window.searchIndex = {"fields":["title","body"],"pipeline":["trimmer","stopWordFilter","stemmer"],"ref":"id","version":"0.9.5","index":{"body":{"root":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.23606797749979}},"df":12,".":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"4":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}},"2":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1},"5":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}},"0":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":1,"1":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1},"2":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}},"1":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":2}}},"2":{"docs":{},"df":0,"8":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1},"9":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":1}},"3":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":3},"1":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.7320508075688772}},"df":3},"2":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":2},"3":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":1}},"4":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0}},"df":1},"3":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":2},"8":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.4142135623730951}},"df":1}},"5":{"docs":{},"df":0,"8":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":1},"9":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}},"6":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0}},"df":1}},"8":{"docs":{},"df":0,".":{"docs":{},"df":0,"5":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":2},"6":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772}},"df":1}}},"9":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":2.6457513110645907}},"df":1},"x":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}}},"1":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.8284271247461903}},"df":1},"2":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1},"6":{"docs":{},"df":0,",":{"docs":{},"df":0,"2":{"docs":{},"df":0,"0":{"docs":{},"df":0,"1":{"docs":{},"df":0,"4":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}},"8":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1},"9":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}},"1":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":3.1622776601683795},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":5.477225575051661},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":3.1622776601683795},"https://hwjskt.github.io/posts/post-2/":{"tf":1.0},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":3.4641016151377544},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":4.69041575982343},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":3.3166247903554},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":3.3166247903554},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.6457513110645907}},"df":27,"\"":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"p":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},".":{"docs":{},"df":0,".":{"docs":{},"df":0,"4":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":1}}}}}},"=":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}}}},"2":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1},"8":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}},"5":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951}},"df":1}}},"0":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":3.7416573867739413}},"df":17,",":{"docs":{},"df":0,"8":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0}},"df":1}}}},"0":{"docs":{"https://hwjskt.github.io/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.4142135623730951}},"df":4,"0":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}},"4":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}},"1":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":7},"2":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":2.0}},"df":9,"2":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1},"7":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}}}},"8":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1,"비":{"docs":{},"df":0,"트":{"docs":{},"df":0,"i":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"8":{"docs":{},"df":0,"u":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"8":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}}}}}}}},"3":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":5,"5":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}},"4":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.7320508075688772}},"df":8,"1":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}},"5":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.7320508075688772}},"df":7,"0":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"0":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0}},"df":2}},"1":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":1}},"6":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":5,"4":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":2.23606797749979}},"df":1},"5":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":1},"8":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1},"x":{"docs":{},"df":0,"1":{"docs":{},"df":0,"6":{"docs":{},"df":0,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}},"비":{"docs":{},"df":0,"트":{"docs":{},"df":0,"i":{"docs":{},"df":0,"1":{"docs":{},"df":0,"6":{"docs":{},"df":0,"u":{"docs":{},"df":0,"1":{"docs":{},"df":0,"6":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}}}}},"7":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":8,"4":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}},"8":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":2.23606797749979}},"df":6,"0":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1},"4":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}},"9":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":6,"9":{"docs":{},"df":0,"9":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}},"]":{"docs":{},"df":0,"(":{"docs":{},"df":0,"#":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}},"_":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}},"2":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.6457513110645907},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":4.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":2.449489742783178},"https://hwjskt.github.io/posts/post-1/":{"tf":1.0},"https://hwjskt.github.io/posts/post-2/":{"tf":1.0},"https://hwjskt.github.io/rust/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter2/":{"tf":4.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":4.123105625617661},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":4.123105625617661},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.6457513110645907}},"df":24,"\"":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"(":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}},".":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":2},"5":{"docs":{},"df":0,"3":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951}},"df":1}},"8":{"docs":{},"df":0,"5":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":1}}},"0":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":5,"0":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1,"8":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1},"9":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}},"1":{"docs":{},"df":0,"3":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1},"4":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.449489742783178}},"df":1},"9":{"docs":{"https://hwjskt.github.io/about/":{"tf":1.0}},"df":1}},"2":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":2},"2":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1}},"8":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":2.6457513110645907}},"df":1}},"1":{"docs":{"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":2},"2":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":3,"4":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":2.449489742783178}},"df":1}},"3":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":1},"4":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.7320508075688772}},"df":2},"5":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.0}},"df":2,"5":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":2},"6":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951}},"df":1},"7":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}},"7":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{},"df":0,"8":{"docs":{},"df":0,"3":{"docs":{},"df":0,"3":{"docs":{},"df":0,"3":{"docs":{},"df":0,"3":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"8":{"docs":{},"df":0,".":{"docs":{},"df":0,"6":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"9":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"0":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"]":{"docs":{},"df":0,"(":{"docs":{},"df":0,"#":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}},"^":{"docs":{},"df":0,"(":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}},"7":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951}},"df":1},"8":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1},"n":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"e":{"docs":{},"df":0,"h":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"2":{"docs":{},"df":0,"5":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"3":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.449489742783178},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":4.0},"https://hwjskt.github.io/posts/post-2/":{"tf":1.0},"https://hwjskt.github.io/rust/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":4.123105625617661},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":5.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":3.4641016151377544},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":20,"\"":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},".":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}},"0":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":3.4641016151377544},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":2.0}},"df":5,"0":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}},"2":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.4142135623730951}},"df":3,".":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}},"x":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{},"df":0,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}},"비":{"docs":{},"df":0,"트":{"docs":{},"df":0,"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{},"df":0,"u":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}}}}},"8":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772}},"df":1},"]":{"docs":{},"df":0,"(":{"docs":{},"df":0,"#":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}},"d":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}},"4":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":3.4641016151377544},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":5.385164807134504},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.0}},"df":22,".":{"docs":{},"df":0,"3":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1},"4":{"docs":{},"df":0,"5":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}},"0":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":4},"2":{"docs":{},"df":0,"`":{"docs":{},"df":0,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"`":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}}}}}}}}}}},"3":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1},"5":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":3}},"5":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":4.0},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":3.4641016151377544},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":3.4641016151377544},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":3.3166247903554},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":4.47213595499958},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":3.4641016151377544},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":19,"0":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.8284271247461903}},"df":8,"0":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.7320508075688772}},"df":2,"0":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"3":{"docs":{},"df":0,"6":{"docs":{},"df":0,"6":{"docs":{},"df":0,"7":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1}}}},"6":{"docs":{},"df":0,".":{"docs":{},"df":0,"7":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}},"7":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.4142135623730951}},"df":1,"u":{"docs":{},"df":0,"8":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}},"8":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1},"9":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772}},"df":1},"\\":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}},"d":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1},"h":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1}},"6":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":4.123105625617661},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":18,".":{"docs":{},"df":0,"4":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":2.0}},"df":1,"4":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}},"0":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":4,"(":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951}},"df":1}}},"1":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772}},"df":1},"4":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.7320508075688772}},"df":2,"비":{"docs":{},"df":0,"트":{"docs":{},"df":0,"i":{"docs":{},"df":0,"6":{"docs":{},"df":0,"4":{"docs":{},"df":0,"u":{"docs":{},"df":0,"6":{"docs":{},"df":0,"4":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}}}}}},"7":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":5.0990195135927845},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":5.744562646538029},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":20,"0":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1},"5":{"docs":{},"df":0,"4":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}},"6":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772}},"df":1},"7":{"docs":{},"df":0,".":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"8":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,"1":{"docs":{},"df":0,"6":{"docs":{},"df":0,"6":{"docs":{},"df":0,"6":{"docs":{},"df":0,"7":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"a":{"docs":{},"df":0,"z":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,"y":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"v":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"8":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":5.385164807134504},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":5.916079783099616},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":4.0}},"df":14,"0":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.449489742783178}},"df":1,"0":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"0":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"3":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1},"7":{"docs":{},"df":0,"1":{"docs":{},"df":0,".":{"docs":{},"df":0,"8":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}}},"비":{"docs":{},"df":0,"트":{"docs":{},"df":0,"i":{"docs":{},"df":0,"8":{"docs":{},"df":0,"u":{"docs":{},"df":0,"8":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}}},"9":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":11,"0":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1},"5":{"docs":{},"df":0,".":{"docs":{},"df":0,"5":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}},"9":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951}},"df":1}},"_":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0},"https://hwjskt.github.io/posts/post-1/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":2.0}},"df":8,"_":{"docs":{},"df":0,"_":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}},"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,".":{"docs":{},"df":0,"m":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":2}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}},"a":{"docs":{},"df":0,"[":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1},"1":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":2}}}}}},"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.7320508075688772}},"df":1}}}},"b":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.7320508075688772}},"df":1}}}}}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.7320508075688772}},"df":1}}}}}},"c":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.449489742783178}},"df":1,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/posts/post-2/":{"tf":1.7320508075688772}},"df":2,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}},"u":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":2.449489742783178}},"df":1,"@":{"docs":{},"df":0,"v":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{},"df":0,"7":{"docs":{},"df":0,".":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"@":{"docs":{},"df":0,"v":{"docs":{},"df":0,"3":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"v":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":3.605551275463989}},"df":2}}}},"d":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.449489742783178},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":3,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"p":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}},"d":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.6457513110645907},"https://hwjskt.github.io/docs/config-options/":{"tf":2.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/posts/post-2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":2.8284271247461903}},"df":7,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"8":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"8":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}}}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"8":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"h":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}}}}}}},"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}},"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"y":{"docs":{},"df":0,"_":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.449489742783178}},"df":1}}}}}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":5.291502622129181},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":3.4641016151377544},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.7320508075688772}},"df":4}}}}}}}}}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":2.23606797749979}},"df":2}}}}},"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.8284271247461903}},"df":1}}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0}},"df":1}}}}},"f":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}}}}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.449489742783178}},"df":1,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}},"r":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.449489742783178}},"df":1}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"k":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772}},"df":1}}}}}},"i":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":1},"c":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1},"g":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":3.1622776601683795}},"df":1}},"e":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.7320508075688772}},"df":1},"w":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":2.449489742783178}},"df":1}}}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":3.4641016151377544}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}},"i":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}},"p":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":8,";":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951}},"df":2,"\"":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"[":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}}}}}},"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":2}}}},"'":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951}},"df":1},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":1}}}}},"[":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}}}},"a":{"docs":{},"df":0,"[":{"docs":{},"df":0,"1":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"3":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}},"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}},"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"[":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1},"4":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}}}}}}},"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":2.0}},"df":1}}}},"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":5}}},"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":1}}},"p":{"docs":{},"df":0,"1":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"p":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.4142135623730951}},"df":1},"2":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.4142135623730951}},"df":1},"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":2.449489742783178}},"df":2}}}}}}}},"s":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.4142135623730951}},"df":1},"2":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":2.8284271247461903}},"df":1},"3":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1},"[":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}}},"0":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1},"5":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1},"i":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}}}}}},"3":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}}}}}},"6":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951}},"df":1}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":2.23606797749979}},"df":1}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}}},"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":4.242640687119285},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":9}}},"v":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1,"[":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.4142135623730951}},"df":1},"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}}},"2":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}},"{":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.4142135623730951}},"df":2},"z":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}}}},"i":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.7320508075688772}},"df":1}}},"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":2.8284271247461903}},"df":1,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"(":{"docs":{},"df":0,"5":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1},"x":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.7320508075688772}},"df":1}}}},"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}},"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}},"i":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.0}},"df":9,"(":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":2}}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":2}},"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951}},"df":1}},"l":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":2,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.0}},"df":2}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":2}}}},"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":3.0}},"df":2,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":2}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.7320508075688772}},"df":1}}}}}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0}},"df":1},"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":2}}}}}}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.4142135623730951}},"df":1,"1":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0}},"df":1}}}}}}}}},"g":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.4142135623730951}},"df":2}}}}}},"m":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":3.7416573867739413},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":5.0990195135927845},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.0}},"df":4},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":2}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":3}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":2.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"]":{"docs":{},"df":0,"(":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,":":{"docs":{},"df":0,"/":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}}}}}}}}}}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":2}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}},"g":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.8284271247461903}},"df":1,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/about/":{"tf":1.0},"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951}},"df":2}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951}},"df":1}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":1}}},"x":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1},"y":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":1}},"b":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":8,"'":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":4,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"_":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.6457513110645907}},"df":1,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.7320508075688772}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,"`":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":4}}}},"y":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.7320508075688772}},"df":1}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}}},"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.8284271247461903},"https://hwjskt.github.io/posts/post-1/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":4},"s":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.4142135623730951}},"df":1,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1}}}}}}}}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1}}}}}}}}}}}},"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"_":{"docs":{},"df":0,"j":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1}}}}}}}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1}}}}}}}}}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"j":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}}}},"e":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}}},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.449489742783178}},"df":3}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}}}}}},"i":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.4142135623730951}},"df":2},"j":{"docs":{},"df":0,"4":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"c":{"docs":{},"df":0,"6":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.0}},"df":2},"y":{"docs":{},"df":0,"0":{"docs":{},"df":0,"b":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"_":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"d":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}},"t":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951}},"df":1}},"n":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.4142135623730951},"https://hwjskt.github.io/posts/post-1/":{"tf":2.8284271247461903}},"df":4,"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}},"g":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":2}},"u":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.8284271247461903}},"df":2}}},"o":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1},"d":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":4}},"l":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.23606797749979},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":2}},"o":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":2.8284271247461903}},"df":1,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.7320508075688772}},"df":1}}}}},"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.7320508075688772}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":2.0}},"df":1}}}}}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"l":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.7320508075688772}},"df":5,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":2.6457513110645907}},"df":1}}}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://hwjskt.github.io/rust/chapter4/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":4.358898943540674},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.449489742783178}},"df":7}}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}}},"x":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0}},"df":1}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":3.0}},"df":2}},"d":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772}},"df":1}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1},"k":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":4.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":4,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.8284271247461903}},"df":1}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}}},"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/posts/post-1/":{"tf":1.0},"https://hwjskt.github.io/posts/post-2/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":4.123105625617661},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":10,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":2.23606797749979}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0}},"df":1}}}}},"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":2.449489742783178}},"df":2,"(":{"docs":{},"df":0,"u":{"docs":{},"df":0,"8":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}}}}}}}},"c":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":12,"2":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1},"3":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1},"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.0}},"df":1,"(":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.7320508075688772}},"df":2,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.4142135623730951}},"df":1}}}}}}},"s":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":2}}}}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}},"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}},"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"l":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":2,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}}}}}}}}},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}},"_":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":2.6457513110645907}},"df":1,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}},"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"’":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}},"g":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter1/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":9.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":7.14142842854285},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":3.4641016151377544},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":23,".":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0}},"df":3}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":3.3166247903554},"https://hwjskt.github.io/rust/chapter2/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":2.6457513110645907}},"df":5}}}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"c":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.7320508075688772}},"df":1}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}},"d":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":3},"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.4142135623730951}},"df":2,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.4142135623730951}},"df":1}}}}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}},"f":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772}},"df":1}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1},"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772}},"df":1}}}},"g":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":1,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.7320508075688772}},"df":1}}}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":3.1622776601683795}},"df":1}}}},"r":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":5,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}},"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":4.69041575982343}},"df":2,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}},"x":{"docs":{},"df":0,"k":{"docs":{},"df":0,"c":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}}}}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":2.8284271247461903}},"df":1,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"x":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}},"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}},"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":1}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1}},"m":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":1}}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0}},"df":2}},"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":2,"0":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.8284271247461903}},"df":1},"3":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1},"4":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1},"5":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1},"6":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1},"7":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.8284271247461903}},"df":1},"8":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1},"9":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.449489742783178}},"df":1}},"=":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}},"'":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"'":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.7320508075688772}},"df":1}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.449489742783178}},"df":2}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/":{"tf":1.0}},"df":1}}},"d":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.7320508075688772}},"df":2,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1}}}},"p":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":2.23606797749979}},"df":1}},"o":{"docs":{"https://hwjskt.github.io/about/":{"tf":1.0}},"df":1,"d":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":4.123105625617661},"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":3.872983346207417},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":2.449489742783178}},"df":4}},"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":3.872983346207417},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.7320508075688772}},"df":2,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.7320508075688772}},"df":1}}},"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.7320508075688772}},"df":1}}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.23606797749979}},"df":1}}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.4142135623730951}},"df":2}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"k":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":4,"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1},"r":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":2,"(":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0}},"df":1}}}}}}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.449489742783178},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":2}}},"e":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":2},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.0}},"df":4}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.6457513110645907},"https://hwjskt.github.io/docs/config-options/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":2.0}},"df":3}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}},"n":{"docs":{"https://hwjskt.github.io/rust/chapter3/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/":{"tf":1.0}},"df":2,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/":{"tf":1.4142135623730951}},"df":1}}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter2/":{"tf":4.898979485566356},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":3.3166247903554},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":19}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}},"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1},"x":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/about/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.0}},"df":2}}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.6457513110645907}},"df":1}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.4142135623730951}},"df":3,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":2.8284271247461903}},"df":1}}}}},"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":2.23606797749979}},"df":1}}}},"u":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.4142135623730951}},"df":2}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.449489742783178}},"df":1}}}}},"u":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951}},"df":5}},"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.7320508075688772}},"df":1,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.4142135623730951}},"df":1}}},"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":2}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1,"@":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":5}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":3.1622776601683795},"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":4.0},"https://hwjskt.github.io/posts/post-1/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.7320508075688772}},"df":6,"\"":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"`":{"docs":{},"df":0,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.23606797749979}},"df":2}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0}},"df":5}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"(":{"docs":{},"df":0,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951}},"df":1}}}}},"l":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1},"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.6457513110645907}},"df":1}}}}},"p":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":3}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.0}},"df":4,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.449489742783178}},"df":1}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.0}},"df":1}}}}}}}},"r":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.4142135623730951}},"df":1}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.7320508075688772}},"df":1}}}},"p":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951}},"df":1}},"t":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.4142135623730951}},"df":8,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"_":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.7320508075688772}},"df":2,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.4142135623730951}},"df":2}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":2.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":5}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.6457513110645907},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}},"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772}},"df":1}}}}}}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0},"https://hwjskt.github.io/posts/post-1/":{"tf":3.605551275463989}},"df":2}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951}},"df":2}}},"u":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1,"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1},"r":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":2.23606797749979}},"df":3,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0}},"df":1}}},"d":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":3,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":1}},"l":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":3.1622776601683795}},"df":1}}},"s":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}},"t":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.6457513110645907},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":6.48074069840786},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":7,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":3.4641016151377544}},"df":1}}}},"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"y":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":2}},"b":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":3.1622776601683795}},"df":1,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0}},"df":1}}}}}}}}}},"3":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":2},"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":3.0}},"df":2,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":7}}}}}}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"9":{"docs":{},"df":0,"8":{"docs":{},"df":0,"_":{"docs":{},"df":0,"2":{"docs":{},"df":0,"2":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":2}}}},"e":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":2,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/":{"tf":1.0},"https://hwjskt.github.io/docs/config-options/":{"tf":2.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/docs/theme-extension/":{"tf":2.23606797749979},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.4142135623730951}},"df":5,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":6,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.0}},"df":7,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":2}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}},"h":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.449489742783178}},"df":1}},"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.23606797749979}},"df":1}}}},"i":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}},"n":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}},"o":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772}},"df":1}},"p":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.449489742783178}},"df":1,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"(":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"(":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"y":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter2/":{"tf":3.0}},"df":2}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"y":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":2.0}},"df":1}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0}},"df":4}}}}}}}}}},"s":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1},"2":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1},"3":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1},"4":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1},"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":4.47213595499958}},"df":3}}}}},"k":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}},"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951}},"df":1}}}},"v":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":7,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":1}}}}}}},"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/posts/post-2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":4}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":3.605551275463989}},"df":1}}}},"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.449489742783178}},"df":1}}}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.0}},"df":3}}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0}},"df":1}}},"m":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.4142135623730951}},"df":1,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0}},"df":1},"1":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0}},"df":1}}}}}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772}},"df":1}}},"e":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}},"r":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":7}}}},"q":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":2.0}},"df":1}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1},"s":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.6457513110645907}},"df":2}}}},"j":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/":{"tf":1.4142135623730951}},"df":1}}}}},"o":{"docs":{"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":2,"c":{"docs":{"https://hwjskt.github.io/docs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951}},"df":3,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0},"https://hwjskt.github.io/posts/post-2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.4142135623730951}},"df":3}}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.4142135623730951}},"df":1}}}}},"j":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":3.1622776601683795}},"df":1}}},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1}},"e":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":2,"c":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0}},"df":1}},"’":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}},"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.4142135623730951}},"df":1}}},"w":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":2.8284271247461903}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":3.3166247903554}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.4142135623730951}},"df":3}},"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":15},"o":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}},"e":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":4,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"4":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}},"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"6":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0}},"df":2}}},"2":{"docs":{},"df":0,"7":{"docs":{},"df":0,"7":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":2}},"8":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}},"3":{"docs":{},"df":0,"0":{"docs":{},"df":0,"8":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951}},"df":4}},"8":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1},"4":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0}},"df":1}}},"4":{"docs":{},"df":0,"3":{"docs":{},"df":0,"3":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":1}},"9":{"docs":{},"df":0,"9":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":1}}},"5":{"docs":{},"df":0,"0":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":3}},"9":{"docs":{},"df":0,"6":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":1}}},"6":{"docs":{},"df":0,"0":{"docs":{},"df":0,"3":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951}},"df":1}},"5":{"docs":{},"df":0,"8":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1}}}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":2}},"r":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":5.0990195135927845},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.7320508075688772}},"df":3}}}}}}}}}}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.7320508075688772}},"df":1}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":2,"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}},"u":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/about/":{"tf":1.0}},"df":1}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"g":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0}},"df":1}}},"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0}},"df":1},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.23606797749979}},"df":4,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.449489742783178}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":5.291502622129181}},"df":2}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":2}},"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"y":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.6457513110645907}},"df":1,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/config-options/":{"tf":2.8284271247461903},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":3}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}},"d":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":4.123105625617661},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":4,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":2.23606797749979}},"df":1}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951}},"df":2}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":3.1622776601683795}},"df":1},"y":{"docs":{},"df":0,"(":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":4.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.449489742783178}},"df":10,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter6/":{"tf":1.0}},"df":3}},"s":{"docs":{},"df":0,")":{"docs":{},"df":0,"(":{"docs":{},"df":0,"6":{"docs":{"https://hwjskt.github.io/rust/chapter5/":{"tf":1.0}},"df":1}}}}}},"v":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":1,":":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":4}}}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":3}},"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1,"a":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.449489742783178}},"df":1}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}},"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":3.4641016151377544}},"df":1,"(":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1,"_":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772}},"df":1}},"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":3.4641016151377544},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":17,"[":{"docs":{},"df":0,"e":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"4":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}},"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"6":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951}},"df":2}}},"2":{"docs":{},"df":0,"7":{"docs":{},"df":0,"7":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":3}},"8":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}},"3":{"docs":{},"df":0,"0":{"docs":{},"df":0,"8":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951}},"df":4}},"8":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1},"4":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0}},"df":1}}},"4":{"docs":{},"df":0,"3":{"docs":{},"df":0,"3":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":1}},"9":{"docs":{},"df":0,"9":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":1}}},"5":{"docs":{},"df":0,"0":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":3}},"9":{"docs":{},"df":0,"6":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":1}}},"6":{"docs":{},"df":0,"0":{"docs":{},"df":0,"3":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.0}},"df":1}},"5":{"docs":{},"df":0,"8":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1}}}}}}}}}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}},"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1,"c":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":2}},"u":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1,"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":2},"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}},"x":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.23606797749979},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0}},"df":4,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":3.7416573867739413},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951}},"df":6,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":2.449489742783178}},"df":1}}}}},"`":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/about/":{"tf":1.0}},"df":1,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":17}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":4}}}}},"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.7320508075688772},"https://hwjskt.github.io/posts/post-1/":{"tf":1.7320508075688772}},"df":4},"s":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.4142135623730951}},"df":2}},"r":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":2}},"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/config-options/":{"tf":2.23606797749979}},"df":2,".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951}},"df":1}}}}},"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951}},"df":1}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951}},"df":1}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951}},"df":1}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"x":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951}},"df":1}}}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"f":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":3,"3":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":2.23606797749979}},"df":1}},"6":{"docs":{},"df":0,"4":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.7320508075688772}},"df":3}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.449489742783178}},"df":1}}}}}},"i":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.7320508075688772}},"df":5}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"r":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"h":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0}},"df":1}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":2.0}},"df":1,"_":{"docs":{},"df":0,"1":{"docs":{},"df":0,"6":{"docs":{},"df":0,"x":{"docs":{},"df":0,"1":{"docs":{},"df":0,"6":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}},"3":{"docs":{},"df":0,"2":{"docs":{},"df":0,"x":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}},"y":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.449489742783178}},"df":2,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}},"b":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.4142135623730951}},"df":2}},"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/":{"tf":2.0}},"df":1}}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":2.0}},"df":1,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.7320508075688772}},"df":1}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.0}},"df":1}}}}}}}},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"l":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.449489742783178},"https://hwjskt.github.io/docs/config-options/":{"tf":2.449489742783178},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.0}},"df":5,":":{"docs":{},"df":0,"/":{"docs":{},"df":0,"/":{"docs":{},"df":0,"/":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.449489742783178}},"df":1}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":2}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":2}}}},"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":2.449489742783178}},"df":1}}}}},"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":3.0}},"df":1}}}}}}}}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.7320508075688772}},"df":1}}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":3}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":2}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0}},"df":1}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":2.0}},"df":1}}}}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.0}},"df":3}}},"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":3.3166247903554},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":7}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"x":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":8,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":1}}}},"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":3.4641016151377544}},"df":1,"(":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":2.23606797749979}},"df":1,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.7320508075688772}},"df":1,"m":{"docs":{},"df":0,"y":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951}},"df":1,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"[":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"6":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}}}}},"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"[":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"6":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"df":0,"y":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":2,"_":{"docs":{},"df":0,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}}}},"x":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}},"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951}},"df":1,"(":{"docs":{},"df":0,"f":{"docs":{},"df":0,"6":{"docs":{},"df":0,"4":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}}}}}},"w":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.0}},"df":3,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772}},"df":1}}}}}}}},"m":{"docs":{},"df":0,"t":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":1}}}}}}}}}},"n":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":4.242640687119285},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":4.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":3.872983346207417},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":3.7416573867739413},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.449489742783178}},"df":23},"o":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1},"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0},"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":4}}}},"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}},"o":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":1}}},"t":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":4.358898943540674}},"df":1,"e":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1},"[":{"docs":{},"df":0,"^":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}},"r":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":4,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"{":{"docs":{},"df":0,"s":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}},"`":{"docs":{},"df":0,"{":{"docs":{},"df":0,"s":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.4142135623730951}},"df":1}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951}},"df":5}},"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}}}}}},"e":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.0}},"df":1,"d":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":2}},"q":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":1,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"(":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.449489742783178}},"df":1}}}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":3,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"_":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":3.4641016151377544}},"df":4,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.23606797749979}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":3.7416573867739413},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.449489742783178}},"df":7,"'":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.4142135623730951}},"df":1},"1":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.4142135623730951}},"df":1},"2":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.4142135623730951}},"df":1}}}}}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1}}}}},"g":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1,"a":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772}},"df":2,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":2}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.449489742783178}},"df":1}}},"r":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":2.6457513110645907}},"df":1,".":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0}},"df":1}}}}}}},"c":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0}},"df":2}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772}},"df":1}}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/posts/post-2/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":8}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1}}}}}},"t":{"docs":{"https://hwjskt.github.io/rust/chapter1/":{"tf":1.0}},"df":1,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":2}}}}}},"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"(":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"=":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,".":{"docs":{},"df":0,"m":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"(":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"=":{"docs":{},"df":0,"'":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772}},"df":1}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.4142135623730951}},"df":1}}}}},"f":{"docs":{},"df":0,"m":{"docs":{},"df":0,"]":{"docs":{},"df":0,"^":{"docs":{},"df":0,"(":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}},"h":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":1,"x":{"docs":{},"df":0,"r":{"docs":{},"df":0,"3":{"docs":{},"df":0,"o":{"docs":{},"df":0,"6":{"docs":{},"df":0,"y":{"docs":{},"df":0,"z":{"docs":{},"df":0,"1":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":3.0}},"df":1,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/posts/post-2/":{"tf":3.3166247903554},"https://hwjskt.github.io/rust/":{"tf":1.0}},"df":4,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.7320508075688772}},"df":1}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.0}},"df":1}}}}}}}}}}}}}},"l":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1,"o":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":2.449489742783178}},"df":2}}},"o":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.0}},"df":3,"e":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":3},"o":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1},"g":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":2.0},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}},"p":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}},"p":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"w":{"docs":{"https://hwjskt.github.io/rust/chapter7/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0}},"df":2}}},"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.449489742783178},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/posts/post-1/":{"tf":2.6457513110645907},"https://hwjskt.github.io/posts/post-2/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":4.795831523312719},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":3.3166247903554},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":3.4641016151377544},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":4.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":6.324555320336759},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.23606797749979}},"df":26,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1,";":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}},"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"j":{"docs":{},"df":0,"o":{"docs":{},"df":0,"h":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.449489742783178}},"df":1}}}}}}}},"b":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1},"c":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1},"d":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":1}}}}}}}},"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":9.433981132056603},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":3,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":2.449489742783178}},"df":1}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772}},"df":1,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":4.242640687119285}},"df":1}}}}}}}}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/about/":{"tf":1.0}},"df":1}}}}}}}}},"h":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.7320508075688772}},"df":3,"1":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1},"2":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1},"3":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1},"4":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1},"5":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1},"6":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1},"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1,"l":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}}}}}},"g":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}},"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.7320508075688772}},"df":1}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}},"s":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":4,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.7320508075688772}},"df":2,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}},"k":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":1},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":3.0}},"df":2}}}}}}}}}},"y":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.7320508075688772}},"df":1}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.8284271247461903}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.4142135623730951}},"df":3,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"h":{"docs":{},"df":0,"1":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"2":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"3":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"4":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"5":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"6":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"p":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.4142135623730951}},"df":1},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}}}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":4.242640687119285},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":3,"1":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.4142135623730951}},"df":1}}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":3.3166247903554},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":4.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":12,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":4.242640687119285}},"df":1,".":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":1}}}}}}},"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":2.23606797749979}},"df":1,".":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0}},"df":1}}}}}}}},"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0}},"df":1}}}}}}}}},"p":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":13}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.0}},"df":11,"'":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.4142135623730951}},"df":1}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}},"x":{"docs":{},"df":0,"0":{"docs":{},"df":0,"x":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"b":{"docs":{},"df":0,"g":{"docs":{},"df":0,"z":{"docs":{},"df":0,"c":{"docs":{},"df":0,"g":{"docs":{},"df":0,"w":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0}},"df":1}}},"o":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772}},"df":1,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1},"d":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":2.0}},"df":1}},"m":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":2.0}},"df":2}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":2}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":4.58257569495584},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":3.3166247903554}},"df":4,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.7320508075688772}},"df":1}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.4142135623730951}},"df":2}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.4142135623730951}},"df":2}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":2.6457513110645907}},"df":1,"=":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,":":{"docs":{},"df":0,"/":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,":":{"docs":{},"df":0,"/":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"/":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,":":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"@":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"@":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/":{"tf":1.0},"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":4.58257569495584},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.0}},"df":4}},"t":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,":":{"docs":{},"df":0,"/":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}},"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":3}}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,".":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,".":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,".":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"/":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"j":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,".":{"docs":{},"df":0,"j":{"docs":{},"df":0,"p":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1}}}}}}}}}}},"w":{"docs":{},"df":0,"w":{"docs":{},"df":0,"w":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}},"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":3.872983346207417},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.7320508075688772}},"df":9,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}},"6":{"docs":{},"df":0,"4":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}},"8":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":2.8284271247461903}},"df":2},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951}},"df":1}}}}}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":2.23606797749979}},"df":3,"=":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}}}}}}},"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772}},"df":2}},"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.7320508075688772}},"df":8}}},"p":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":4.795831523312719},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":5,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":5}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":2}}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":1}}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0}},"df":3}},"x":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":7,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"x":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"{":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"}":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}}}}}},"i":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"a":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}},"f":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":2,"r":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":15}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}},"t":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.7320508075688772}},"df":2}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":2}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951}},"df":1}}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":4.123105625617661},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.0}},"df":2,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}},".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.23606797749979}},"df":2}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":2}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}},"l":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.7320508075688772}},"df":1},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":4},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":2}}}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951}},"df":1,"t":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0}},"df":1}}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":2,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}}}}}}}}}},"o":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":2,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":2,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":2}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.4142135623730951}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"p":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":3.7416573867739413}},"df":1,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":3.3166247903554}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"v":{"docs":{},"df":0,"4":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1,"(":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"7":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"(":{"docs":{},"df":0,"`":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"7":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"6":{"docs":{},"df":0,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"(":{"docs":{},"df":0,"`":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}},"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":3.4641016151377544}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"v":{"docs":{},"df":0,"4":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":2.0}},"df":1},"6":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.8284271247461903}},"df":1}}},"v":{"docs":{},"df":0,"4":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}},"6":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951}},"df":1}},"s":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":2}}},"t":{"docs":{},"df":0,"'":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":2},"a":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1,"i":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":2}}}},"e":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.6457513110645907},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":5},"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":4,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"’":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}},"’":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.4142135623730951}},"df":1}}},"j":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":3}}}}}}}}},"e":{"docs":{},"df":0,"k":{"docs":{},"df":0,"y":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"j":{"docs":{},"df":0,"a":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":1},"h":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":3.1622776601683795}},"df":1}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1}}}}},"y":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}},"s":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0}},"df":3},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}},"n":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1},"g":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772}},"df":1}}}},"k":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772}},"df":2,"(":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"=":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}}}}}}}}},".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}},"b":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1},"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}},"y":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.23606797749979}},"df":6,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}},"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter3/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":2}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":2.6457513110645907}},"df":2}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772}},"df":1}}}}},"o":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772}},"df":1}}},"l":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":5.656854249492381}},"df":2,"\"":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1},"[":{"docs":{},"df":0,"^":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}},"c":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.8284271247461903}},"df":1}},"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,".":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"0":{"docs":{},"df":0,"3":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}}}}}}}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"/":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":2}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"/":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"/":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"5":{"docs":{},"df":0,"3":{"docs":{},"df":0,"6":{"docs":{},"df":0,"6":{"docs":{},"df":0,"7":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0},"https://hwjskt.github.io/rust/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":3}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":4},"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}},"z":{"docs":{},"df":0,"y":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}},"n":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":5,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":4}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"'":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":3},".":{"docs":{},"df":0,"m":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/":{"tf":1.7320508075688772}},"df":2}}}},"i":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":2,"c":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772}},"df":1},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":2}}}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":2.6457513110645907}},"df":3}}}}},"n":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":3.605551275463989},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":9},"k":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.8284271247461903},"https://hwjskt.github.io/docs/config-options/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}},"r":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"x":{"docs":{"https://hwjskt.github.io/rust/chapter1/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":4}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":3.1622776601683795},"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":3.3166247903554},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":3.3166247903554},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":4.0},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":3.4641016151377544},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.6457513110645907}},"df":24}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"8":{"docs":{},"df":0,"6":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772}},"df":1}},"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":3}}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"1":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}}},"l":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":1},"n":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.7320508075688772}},"df":1}}}},"o":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":5.0990195135927845},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772}},"df":2},"p":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":4.898979485566356},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":4,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":2.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":3.872983346207417}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}},"w":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.4142135623730951}},"df":1}},"s":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.7320508075688772}},"df":2},"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":4,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}}}},";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"'":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"8":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}}}},"/":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":3}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}},"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"y":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0}},"df":1}}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}},"a":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.6457513110645907}},"df":1},"b":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"b":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}},"r":{"docs":{},"df":0,"/":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"@":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"v":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":3,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"/":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}},"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"df":0,"1":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"h":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}},"2":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"h":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}},"3":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"h":{"docs":{},"df":0,"3":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}},"4":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"h":{"docs":{},"df":0,"4":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}},"5":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"h":{"docs":{},"df":0,"5":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}},"6":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"h":{"docs":{},"df":0,"6":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,":":{"docs":{},"df":0,"/":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"/":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"8":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951}},"df":1},"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}},"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}},"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":2.6457513110645907}},"df":1,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"p":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}}}}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}},"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":2.449489742783178}},"df":1}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951}},"df":1}}},"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}},"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"y":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}},"d":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}},"h":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0}},"df":1}}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}},"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}},"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":2},"y":{"docs":{},"df":0,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"m":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951}},"df":1,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951}},"df":1}}}}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter1/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":4},"r":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.7320508075688772}},"df":4,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/posts/post-2/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":3.7416573867739413},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":3.3166247903554},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":4.0},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.7320508075688772}},"df":21,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":2.6457513110645907}},"df":1}},"p":{"docs":{},"df":0,"d":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0}},"df":1}}},"r":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0}},"df":5}}}},"j":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"k":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":5,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"y":{"docs":{},"df":0,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}}}}}}}}}},"x":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}}}}}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/":{"tf":1.0}},"df":2}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}},"i":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0}},"df":1}}}},"p":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.23606797749979}},"df":7,"(":{"docs":{},"df":0,"|":{"docs":{},"df":0,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}},".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"(":{"docs":{},"df":0,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":1},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"x":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772}},"df":2,"(":{"docs":{},"df":0,"z":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"=":{"docs":{},"df":0,"6":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}}}}}}}}}},"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"c":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}},"k":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/":{"tf":1.0},"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":3.4641016151377544},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.7320508075688772}},"df":4}}}}}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.449489742783178}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}},"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"v":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter2/":{"tf":4.69041575982343},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":6.48074069840786},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":3.7416573867739413},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.7320508075688772}},"df":8}},"h":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":2},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}},"x":{"docs":{"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":2.449489742783178}},"df":1,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.7320508075688772}},"df":1}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.4142135623730951}},"df":1}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951}},"df":1,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951}},"df":1}}}}}}},"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}}}}}}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.4142135623730951}},"df":1}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1,"n":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":1}}},"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"x":{"docs":{},"df":0,"(":{"docs":{},"df":0,"2":{"docs":{},"df":0,"0":{"docs":{},"df":0,"1":{"docs":{},"df":0,"8":{"docs":{"https://hwjskt.github.io/about/":{"tf":1.0}},"df":1}}}}}}}}}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":2}}}},"n":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":3.1622776601683795}},"df":2,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":2.23606797749979}},"df":1,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}}},"`":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1},"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":6,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":1},"2":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":1}}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":2},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"]":{"docs":{},"df":0,"(":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,":":{"docs":{},"df":0,"/":{"docs":{},"df":0,"/":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,".":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"/":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":4}}}}},"s":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951}},"df":2},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}},"k":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":2.0}},"df":1}}}},"m":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":2},"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}},"d":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":4.242640687119285},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":3.1622776601683795}},"df":4,".":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.4142135623730951}},"df":1}},"e":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.23606797749979}},"df":1},"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter7/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.0}},"df":5}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.449489742783178}},"df":1}}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}},"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":17}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":4.242640687119285},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951}},"df":2,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}}}}}}},"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}}}}}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}}}}}},"s":{"docs":{},"df":0,"v":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}},"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.0}},"df":3}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":3.7416573867739413},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":4.0}},"df":14,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.4142135623730951}},"df":5}}}}},"y":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"n":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":3,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772}},"df":1}},"m":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/posts/post-2/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":2.0}},"df":9}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"v":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}}},"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":2}}}}}}}}},"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}},"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.0}},"df":4}},"q":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":2}},"w":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0},"https://hwjskt.github.io/posts/post-2/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":12,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}}}}}},"x":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.4142135623730951}},"df":1}}}},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":2}}}}},"s":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1},"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.449489742783178}},"df":1}}},"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":3,"e":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":4.0},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":6},"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"e":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":13},"h":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.7320508075688772}},"df":1}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}},"w":{"docs":{"https://hwjskt.github.io/about/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":4}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":5.291502622129181},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":2,"a":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0}},"df":1}}},"m":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":2,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":4.58257569495584},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":5.916079783099616},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":5,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.8284271247461903}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}},"x":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"_":{"docs":{},"df":0,"1":{"docs":{},"df":0,"9":{"docs":{},"df":0,"o":{"docs":{},"df":0,"q":{"docs":{},"df":0,"w":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"o":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":2,"(":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}},"b":{"docs":{},"df":0,"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.7320508075688772}},"df":2,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":1}}}}}}}},".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.4142135623730951}},"df":4}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"0":{"docs":{},"df":0,"o":{"docs":{},"df":0,"7":{"docs":{},"df":0,"7":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0}},"df":1}}}}}},"k":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":3.3166247903554}},"df":1,"(":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772}},"df":1}}},"t":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}},"a":{"docs":{},"df":0,"y":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}}},"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":4,"c":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":1}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951}},"df":1}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/config-options/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":8,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":2}}}}}},"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":2}}}},"v":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}}}},"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":3}}}}},"8":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":2.23606797749979}},"df":1}}}}},"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":4.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.0}},"df":3}}}},"u":{"docs":{},"df":0,"8":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.0}},"df":1}}}}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":1}}}}}}},"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":6,"1":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1},"2":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":2.23606797749979}},"df":1}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":3.0}},"df":1}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":2.449489742783178}},"df":1}}}}}}}}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951}},"df":3}}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"u":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":6,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":3.605551275463989},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":3.872983346207417}},"df":2}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.4142135623730951}},"df":3,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.7320508075688772}},"df":1}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://hwjskt.github.io/":{"tf":1.0}},"df":1}}}}}}},"w":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951}},"df":6}}}}}}}}},"p":{"docs":{},"df":0,"1":{"docs":{},"df":0,".":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"p":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":2.0}},"df":4}}}},"g":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/config-options/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0},"https://hwjskt.github.io/posts/post-2/":{"tf":2.6457513110645907}},"df":4,"'":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.7320508075688772}},"df":1}},"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.4142135623730951}},"df":1}}},"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":3}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":2.0}},"df":3}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.4142135623730951}},"df":1}}}}}},"k":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772}},"df":1},"s":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":3.3166247903554},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951}},"df":2,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}}}}}}}}},"t":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":2,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951}},"df":2}},"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1}}}},"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}},"[":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1},"1":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1},"2":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1},"3":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}},"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":6},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.0}},"df":3}}}}}},"d":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.0}},"df":1}}},"r":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.4142135623730951}},"df":1}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.7320508075688772}},"df":1}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}},"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"/":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"g":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":1}}}},"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"j":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"k":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}},"n":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1},"p":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}},"x":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.4142135623730951}},"df":2}}}},"k":{"docs":{},"df":0,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{},"df":0,"j":{"docs":{},"df":0,"1":{"docs":{},"df":0,"i":{"docs":{},"df":0,"j":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"m":{"docs":{},"df":0,"f":{"docs":{},"df":0,"0":{"docs":{},"df":0,"y":{"docs":{},"df":0,"w":{"docs":{},"df":0,"5":{"docs":{},"df":0,"z":{"docs":{},"df":0,"a":{"docs":{},"df":0,"h":{"docs":{},"df":0,"j":{"docs":{},"df":0,"l":{"docs":{},"df":0,"c":{"docs":{},"df":0,"2":{"docs":{},"df":0,"h":{"docs":{},"df":0,"0":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"c":{"docs":{},"df":0,"j":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"j":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"y":{"docs":{},"df":0,"2":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"2":{"docs":{},"df":0,"s":{"docs":{},"df":0,"2":{"docs":{},"df":0,"n":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"3":{"docs":{},"df":0,"m":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"0":{"docs":{},"df":0,"z":{"docs":{},"df":0,"z":{"docs":{},"df":0,"j":{"docs":{},"df":0,"z":{"docs":{},"df":0,"b":{"docs":{},"df":0,"x":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"3":{"docs":{},"df":0,"y":{"docs":{},"df":0,"2":{"docs":{},"df":0,"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"0":{"docs":{},"df":0,"n":{"docs":{},"df":0,"y":{"docs":{},"df":0,"j":{"docs":{},"df":0,"9":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,"r":{"docs":{},"df":0,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"j":{"docs":{},"df":0,"p":{"docs":{},"df":0,"k":{"docs":{},"df":0,"b":{"docs":{},"df":0,"x":{"docs":{},"df":0,"h":{"docs":{},"df":0,"w":{"docs":{},"df":0,"w":{"docs":{},"df":0,"3":{"docs":{},"df":0,"x":{"docs":{},"df":0,"g":{"docs":{},"df":0,"p":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}},"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.4142135623730951}},"df":2}},"t":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.4142135623730951}},"df":1}}},"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.0}},"df":2,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"5":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.4142135623730951}},"df":1},"f":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.4142135623730951}},"df":1},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}},"x":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.4142135623730951}},"df":2}}}}}}}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":7,"(":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0}},"df":1}}}}}}},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}},"p":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":2},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.449489742783178}},"df":1},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":3.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":2}}}},"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":2.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.449489742783178},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/posts/":{"tf":1.0},"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":5}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.7320508075688772}},"df":2}}}}}}}},"p":{"docs":{},"df":0,"v":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772}},"df":1}},"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1,"e":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"x":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.4142135623730951}},"df":1}}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":2}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}}},"s":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.449489742783178}},"df":1}}},"t":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0}},"df":1}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":15}}}}},"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1,"m":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}},"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":3,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"5":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":3.872983346207417},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":3.3166247903554}},"df":12,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":2.0}},"df":1}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":3}}}}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":2.23606797749979}},"df":1}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":2},"o":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":3.1622776601683795}},"df":1}}},"x":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1},"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":3.4641016151377544}},"df":1}}}},"`":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.4142135623730951}},"df":1}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951}},"df":1}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":1}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"'":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1},"m":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951}},"df":1}}}}}}},"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.449489742783178}},"df":1}}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.4142135623730951}},"df":1}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1},"2":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.4142135623730951}},"df":1}}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.0}},"df":10,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}}}},"x":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1},"{":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1},"c":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1},"i":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951}},"df":1}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0}},"df":1}}}}}}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":3}},"t":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.8284271247461903}},"df":3,")":{"docs":{"https://hwjskt.github.io/rust/chapter7/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":3.1622776601683795}},"df":1}}}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":2}}}},"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951}},"df":1}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.4142135623730951}},"df":7,"m":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":2.0}},"df":5,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.23606797749979},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":3}}}}},"u":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":6.164414002968976},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":4.58257569495584},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":3.605551275463989}},"df":4,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.4142135623730951}},"df":3,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/about/":{"tf":1.0},"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":2}}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}},"s":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":2.23606797749979}},"df":4,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":2.449489742783178}},"df":2}}}}}},"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.449489742783178}},"df":2}},"y":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0}},"df":1,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.4142135623730951}},"df":1}}}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.7320508075688772}},"df":2,"(":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}}}}}}}}},"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951}},"df":2,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}}}}},"o":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}}}},"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"1":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":4.0}},"df":1},"2":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":3.7416573867739413}},"df":1},"3":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.6457513110645907}},"df":1},"\\":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951}},"df":1}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":1}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1}}},"i":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.4142135623730951}},"df":1}},"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":4.795831523312719},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":2.8284271247461903}},"df":3,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":2}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":2,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"1":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"=":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":2}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772}},"df":1}}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772}},"df":1}}}},"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"g":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}},"b":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0}},"df":1},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":3,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":2.8284271247461903}},"df":1,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":2}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}},"m":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":3.7416573867739413},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":3.3166247903554}},"df":2,".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.4142135623730951}},"df":1},"3":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.7320508075688772}},"df":1}}}}}}},"2":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":2.6457513110645907}},"df":1},"3":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":2.0}},"df":1},"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":6.324555320336759},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":6.324555320336759},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":2}}}}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":2}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"s":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"3":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"d":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":3.872983346207417},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":7,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"l":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.7320508075688772}},"df":2,"=":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":2.6457513110645907}},"df":1}}}}}}}}}}}},"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter5/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":3}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":3.0}},"df":1,"d":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951}},"df":1}}}},"o":{"docs":{},"df":0,"v":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"y":{"docs":{},"df":0,"_":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.449489742783178}},"df":1}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":4.0},"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":3}}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":2}}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.4142135623730951}},"df":1}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"v":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":1,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.7320508075688772}},"df":3,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"_":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"2":{"docs":{},"df":0,"0":{"docs":{},"df":0,"1":{"docs":{},"df":0,"7":{"docs":{"https://hwjskt.github.io/about/":{"tf":1.0}},"df":1}}}}}}}}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter2/":{"tf":4.898979485566356},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":2.449489742783178}},"df":5}}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":5}}}},"v":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.4142135623730951}},"df":2}}}},"n":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":2}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"=":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.0}},"df":2}},"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"_":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}},"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"v":{"docs":{},"df":0,"4":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1},"6":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"w":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}},"s":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.4142135623730951}},"df":1},"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":3}},"l":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":5}},"n":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":4.242640687119285},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":3.3166247903554},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":4.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":2.0}},"df":17},"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/":{"tf":7.0},"https://hwjskt.github.io/rust/chapter1/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":4.58257569495584},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":5.385164807134504},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":4.123105625617661},"https://hwjskt.github.io/rust/chapter2/":{"tf":5.385164807134504},"https://hwjskt.github.io/rust/chapter3/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":5.744562646538029},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":3.4641016151377544},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":4.0},"https://hwjskt.github.io/rust/chapter4/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":5.385164807134504},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter5/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":3.4641016151377544},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":4.69041575982343},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":34,"/":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,".":{"docs":{},"df":0,"m":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}}}}}}}}},"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"=":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":3}}}}}}}}}}}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":9}}}}},"c":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":19,"/":{"docs":{},"df":0,"d":{"docs":{},"df":0,"5":{"docs":{},"df":0,"a":{"docs":{},"df":0,"8":{"docs":{},"df":0,"2":{"docs":{},"df":0,"b":{"docs":{},"df":0,"b":{"docs":{},"df":0,"d":{"docs":{},"df":0,"2":{"docs":{},"df":0,"6":{"docs":{},"df":0,"e":{"docs":{},"df":0,"1":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"8":{"docs":{},"df":0,"b":{"docs":{},"df":0,"7":{"docs":{},"df":0,"4":{"docs":{},"df":0,"0":{"docs":{},"df":0,"1":{"docs":{},"df":0,"f":{"docs":{},"df":0,"6":{"docs":{},"df":0,"a":{"docs":{},"df":0,"7":{"docs":{},"df":0,"1":{"docs":{},"df":0,"8":{"docs":{},"df":0,"a":{"docs":{},"df":0,"9":{"docs":{},"df":0,"c":{"docs":{},"df":0,"5":{"docs":{},"df":0,"7":{"docs":{},"df":0,"c":{"docs":{},"df":0,"9":{"docs":{},"df":0,"6":{"docs":{},"df":0,"9":{"docs":{},"df":0,"0":{"docs":{},"df":0,"5":{"docs":{},"df":0,"4":{"docs":{},"df":0,"8":{"docs":{},"df":0,"3":{"docs":{},"df":0,"/":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,":":{"docs":{},"df":0,"7":{"docs":{},"df":0,"8":{"docs":{},"df":0,"3":{"docs":{},"df":0,":":{"docs":{},"df":0,"8":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}}}}}}}}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,":":{"docs":{},"df":0,"5":{"docs":{},"df":0,"1":{"docs":{},"df":0,"8":{"docs":{},"df":0,":":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}}},"2":{"docs":{},"df":0,"2":{"docs":{},"df":0,":":{"docs":{},"df":0,"5":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"df":0,"m":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.4142135623730951}},"df":2}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}}}}}}}},"u":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":2}}}}},"y":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}}},"s":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":4.795831523312719},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":6.244997998398398},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":3.872983346207417},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":4.58257569495584}},"df":4,"'":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.4142135623730951}},"df":1},".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.7320508075688772}},"df":1}}}}}},"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":2.0}},"df":1}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":2.23606797749979}},"df":3}}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"(":{"docs":{},"df":0,"'":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}},"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1,"(":{"docs":{},"df":0,"`":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"1":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":5.744562646538029},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":4.0}},"df":3,",":{"docs":{},"df":0,"s":{"docs":{},"df":0,"2":{"docs":{},"df":0,",":{"docs":{},"df":0,"s":{"docs":{},"df":0,"3":{"docs":{},"df":0,",":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}}}},".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.4142135623730951}},"df":1}}}}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}}}}}}}}},"[":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":1}}},"2":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":5.0990195135927845},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":3.7416573867739413}},"df":3,",":{"docs":{},"df":0,"s":{"docs":{},"df":0,"3":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}},"3":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":2.8284271247461903}},"df":2},"a":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"e":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":2.449489742783178}},"df":1}},"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772}},"df":1}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951}},"df":1}},"l":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}},"m":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":2},"p":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":2.0}},"df":1}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}}}}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}},"e":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.449489742783178}},"df":1}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":4.123105625617661},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":9}},"r":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":3.4641016151377544}},"df":1,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"(":{"docs":{},"df":0,"`":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"`":{"docs":{},"df":0,")":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"5":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"y":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"`":{"docs":{},"df":0,")":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"5":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"(":{"docs":{},"df":0,"`":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.449489742783178}},"df":1}}},"y":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.4142135623730951}},"df":1}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}},"d":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.4142135623730951}},"df":1}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.6457513110645907}},"df":1}}}}}}}}}}},"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.4142135623730951}},"df":1}}}}}}},"c":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":2.0}},"df":1,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":2,"_":{"docs":{},"df":0,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951}},"df":1,"(":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":3,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":2}}}}},"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/config-options/":{"tf":2.23606797749979},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.8284271247461903}},"df":3}}}}},"d":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0}},"df":1},"e":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":5,"d":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1},"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/posts/post-2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":3}}},"f":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":5.291502622129181},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":6,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":2.23606797749979}},"df":1}}}}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":2.449489742783178}},"df":1}}}}}}}},"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":2}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951}},"df":1}}}},"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1},"v":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":2.0}},"df":1,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.4142135623730951}},"df":1}}}},"r":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.0}},"df":2}}}},"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/posts/post-1/":{"tf":1.0},"https://hwjskt.github.io/posts/post-2/":{"tf":2.449489742783178}},"df":4,"u":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":2.23606797749979}},"df":1}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"h":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951}},"df":1}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}}},"z":{"docs":{},"df":0,"z":{"docs":{},"df":0,"/":{"docs":{},"df":0,"z":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":1}}}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0}},"df":1,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":3}}}}},"w":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}},"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"n":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":3.4641016151377544}},"df":1}}}}}}}}}}},"k":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":2}}}},"p":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1,"f":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}}},"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":3.7416573867739413},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":2,"e":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":4}},"x":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":3,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}}}}}}}},"z":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.4142135623730951}},"df":2}}},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter4/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":3.7416573867739413},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":3}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.6457513110645907}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.7320508075688772}},"df":1}}}}}},"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":2.8284271247461903}},"df":5,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.23606797749979},"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.449489742783178}},"df":3}}}}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.7320508075688772}},"df":1}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}},"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}}}}}}},"'":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1},"3":{"docs":{},"df":0,"u":{"docs":{},"df":0,"8":{"docs":{"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.4142135623730951}},"df":1}}},"5":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.0}},"df":2},"i":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":3.0}},"df":1},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.7320508075688772}},"df":1}}},"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.7320508075688772}},"df":1,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}}}}}},"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.7320508075688772}},"df":1}}}}},"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.7320508075688772}},"df":2,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"@":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951}},"df":4}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"3":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"y":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}},"[":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951}},"df":1},"r":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":3.0}},"df":3,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.7320508075688772}},"df":1}}}},"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0}},"df":1}}}}}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.4142135623730951}},"df":1}},"f":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951}},"df":5}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"3":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"(":{"docs":{},"df":0,"`":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":1,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.7320508075688772}},"df":2,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}},"r":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":4.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.0}},"df":6,"/":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.0}},"df":1}}},"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"_":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":2.8284271247461903}},"df":1}},"/":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.4142135623730951}},"df":1}},"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":2.0}},"df":1}},"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.4142135623730951}},"df":1}},"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":2.23606797749979}},"df":5,"s":{"docs":{},"df":0,":":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,":":{"docs":{},"df":0,"9":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":1}}},"2":{"docs":{},"df":0,":":{"docs":{},"df":0,"2":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}},"3":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}}}}},"2":{"docs":{},"df":0,":":{"docs":{},"df":0,"5":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951}},"df":1}}},"3":{"docs":{},"df":0,":":{"docs":{},"df":0,"9":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951}},"df":1}}},"7":{"docs":{},"df":0,":":{"docs":{},"df":0,"5":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":1}}},"9":{"docs":{},"df":0,":":{"docs":{},"df":0,"2":{"docs":{},"df":0,"8":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}},"3":{"docs":{},"df":0,"7":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}}}}}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter2/":{"tf":3.872983346207417},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":3.3166247903554},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.0}},"df":18,"s":{"docs":{},"df":0,":":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0}},"df":1,":":{"docs":{},"df":0,"5":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}},"4":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0}},"df":1},"8":{"docs":{},"df":0,":":{"docs":{},"df":0,"5":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}}},"9":{"docs":{},"df":0,":":{"docs":{},"df":0,"1":{"docs":{},"df":0,"9":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}},"2":{"docs":{},"df":0,"2":{"docs":{},"df":0,":":{"docs":{},"df":0,"2":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}}},"8":{"docs":{},"df":0,":":{"docs":{},"df":0,"4":{"docs":{},"df":0,"7":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}}},":":{"docs":{},"df":0,"1":{"docs":{},"df":0,"3":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1},"4":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.7320508075688772}},"df":1}},"9":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}},"3":{"docs":{},"df":0,":":{"docs":{},"df":0,"1":{"docs":{},"df":0,"3":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1},"4":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0}},"df":1},"5":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":2}}}},"4":{"docs":{},"df":0,":":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0}},"df":1},"4":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}},"4":{"docs":{},"df":0,"4":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":1}},"5":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0}},"df":1},"8":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":1}}},"5":{"docs":{},"df":0,":":{"docs":{},"df":0,"1":{"docs":{},"df":0,"4":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":1},"6":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":1},"7":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}},"2":{"docs":{},"df":0,"8":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}}}},"6":{"docs":{},"df":0,":":{"docs":{},"df":0,"1":{"docs":{},"df":0,"4":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":1}},"5":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}}},"7":{"docs":{},"df":0,":":{"docs":{},"df":0,"2":{"docs":{},"df":0,"4":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1}}}},"8":{"docs":{},"df":0,":":{"docs":{},"df":0,"5":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"f":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1},"g":{"docs":{"https://hwjskt.github.io/":{"tf":1.4142135623730951}},"df":1}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}},"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}}}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/":{"tf":1.0}},"df":2,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"=":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951}},"df":1,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.4142135623730951}},"df":4,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":2.449489742783178}},"df":1}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":1}}}},"d":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":2.23606797749979}},"df":2,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"c":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":2}}}}}}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.4142135623730951}},"df":1,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.8284271247461903}},"df":2}}}}}}},"{":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"df":0,"m":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.4142135623730951}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.4142135623730951}},"df":1}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"i":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":2.449489742783178}},"df":3,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.7320508075688772}},"df":1}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951}},"df":1}}}}},"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.7320508075688772}},"df":1}}}},"{":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":2}}}}}}}}},"{":{"docs":{},"df":0,"c":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.4142135623730951}},"df":1}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951}},"df":1}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.4142135623730951}},"df":1}}}},"e":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}},"e":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":4},"m":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}},"r":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":2,"i":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"n":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":3.4641016151377544},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":6.082762530298219},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":4.242640687119285},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":2.8284271247461903},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":7.810249675906654},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.23606797749979}},"df":15,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":3.3166247903554}},"df":3,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":2}}}}},"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}}},"`":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"7":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}},"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"@":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"@":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}}}}}}}}},"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":1}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":3.3166247903554},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":4}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"@":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"3":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}},"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":1,"a":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":1}},"o":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":1}},"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}}}}},"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}}}}}}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":4}}}}},"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}}}}},"`":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.7320508075688772}},"df":1}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":4.123105625617661},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":12,"u":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter5/":{"tf":1.4142135623730951}},"df":1}}}}}},"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.4142135623730951}},"df":1}}},"f":{"docs":{},"df":0,"f":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":3}}},"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":4,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1}}}}}}}}},"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951}},"df":1}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}},"m":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951}},"df":2,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951}},"df":1,"(":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}}}}}}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":3.0}},"df":2,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}}}}}}}}}}},"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":2.0}},"df":1}}}}}},"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":4}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":2}}}}}},"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":4,"a":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0}},"df":2,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"v":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}},"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0},"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.4142135623730951}},"df":3}},"c":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":1,"i":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}},"g":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1},"i":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1}},"j":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1},"k":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.4142135623730951}},"df":1}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.4142135623730951}},"df":1}}}},"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1,"(":{"docs":{},"df":0,"a":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1,"(":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.7320508075688772}},"df":1,"(":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":7},"/":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.4142135623730951}},"df":1,"/":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.0}},"df":1}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}}}},"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":2.0}},"df":1}}}}},"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{},"df":0,"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":2.6457513110645907}},"df":1}}}}}}}}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":2.23606797749979}},"df":1}}}}}}}}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.7320508075688772}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.0}},"df":1}}}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.7320508075688772}},"df":1}}}}}}},"\\":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"\\":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"k":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.23606797749979},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.449489742783178}},"df":2,"2":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}},"d":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1},"e":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.23606797749979},"https://hwjskt.github.io/docs/theme-extension/":{"tf":3.1622776601683795},"https://hwjskt.github.io/posts/post-1/":{"tf":1.7320508075688772}},"df":3,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}},"/":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}}}}}}},"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/":{"tf":1.0}},"df":1},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":1}},"x":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":3.605551275463989},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":5,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}}}},".":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"]":{"docs":{},"df":0,"(":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,":":{"docs":{},"df":0,"/":{"docs":{},"df":0,"/":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,".":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"/":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,".":{"docs":{},"df":0,"j":{"docs":{},"df":0,"p":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"_":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1,"_":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}},"e":{"docs":{"https://hwjskt.github.io/":{"tf":1.0},"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/posts/post-1/":{"tf":2.23606797749979}},"df":6}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"'":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.8284271247461903}},"df":1}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/posts/post-1/":{"tf":2.0}},"df":3,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":3}},"e":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":3,"_":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":1},"l":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}},"m":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":3}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":6.0},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.4142135623730951}},"df":4,"e":{"docs":{},"df":0,"=":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}},"l":{"docs":{},"df":0,"s":{"docs":{},"df":0,"v":{"docs":{},"df":0,"1":{"docs":{},"df":0,".":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":2.23606797749979}},"df":1}}}},"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":2.6457513110645907}},"df":1}}},"c":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.4142135623730951}},"df":1},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.4142135623730951}},"df":1}},"o":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}},"e":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":1},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/posts/post-2/":{"tf":2.6457513110645907}},"df":2,"(":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"(":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":1}}}}}}}}}},"m":{"docs":{},"df":0,"'":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":1},"l":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.4142135623730951}},"df":1,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}},"p":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":8}}},"e":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1},"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}},"i":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":17,"m":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":2},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1}}}}}},"u":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":2.8284271247461903},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.7320508075688772}},"df":7},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1}},"p":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":2.449489742783178}},"df":1,"l":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951}},"df":2}},"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}}}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"v":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951}},"df":1}},"g":{"docs":{"https://hwjskt.github.io/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":4.69041575982343},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":2.0}},"df":16,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{},"df":0,"#":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}}}}}}}}}},"e":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1}}}}}},"u":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":2,"+":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}},"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{},"df":0,"7":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}},"3":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":4.358898943540674},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":3.0}},"df":6}},"6":{"docs":{},"df":0,"4":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951}},"df":1}},"8":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":4},"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":2}}}}},"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0}},"df":1,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.4142135623730951}},"df":1}}}},"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter4/":{"tf":1.0}},"df":1}}}}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":4,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":2.0}},"df":1}}}}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1}}}}}}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":7}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":2}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"f":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.8284271247461903}},"df":1,".":{"docs":{},"df":0,"j":{"docs":{},"df":0,"p":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":4.0}},"df":1}}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":2}},"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}},"p":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":2,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.449489742783178}},"df":3}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"!":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}},"]":{"docs":{},"df":0,"(":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,":":{"docs":{},"df":0,"/":{"docs":{},"df":0,"/":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"/":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}},"r":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}},"s":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":3.3166247903554},"https://hwjskt.github.io/docs/config-options/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":3.605551275463989},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":2.0},"https://hwjskt.github.io/posts/post-2/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter2/":{"tf":4.58257569495584},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":2.6457513110645907},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":8.426149773176359},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":3.3166247903554}},"df":20,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":4.69041575982343}},"df":2,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"'":{"docs":{},"df":0,"a":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"1":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":3.7416573867739413}},"df":1,".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.4142135623730951}},"df":1}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0}},"df":1}}}}}}}}},"2":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":2.8284271247461903}},"df":1},"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":2.0}},"df":1}}}}}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":4.69041575982343}},"df":1}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"%":{"docs":{},"df":0,"\\":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"z":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":2.0}},"df":5}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"k":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":2}}}},"t":{"docs":{},"df":0,"f":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":5}}},"v":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":3.872983346207417},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":2,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":1}}},".":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}}},"2":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"(":{"docs":{},"df":0,"5":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1},"6":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.7320508075688772}},"df":1},"7":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1},"8":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}}}}}}},"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter2/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.4142135623730951}},"df":17}}},"2":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1},"4":{"docs":{},"df":0,"4":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951}},"df":1}},"7":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951}},"df":1}},"2":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1},"8":{"docs":{},"df":0,"6":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}},"9":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951}},"df":1}}},"3":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1},"1":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951}},"df":1}}},"6":{"docs":{},"df":0,".":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1},"4":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.4142135623730951}},"df":1}}},"8":{"docs":{},"df":0,".":{"docs":{},"df":0,"5":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":2.0}},"df":1},"6":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}}}},"1":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772}},"df":1}}}}},"4":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":2.23606797749979}},"df":1,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"v":{"docs":{},"df":0,"4":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}}},"u":{"docs":{},"df":0,"8":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}},"6":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":2.449489742783178}},"df":1,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"v":{"docs":{},"df":0,"6":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.449489742783178}},"df":2}},"u":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":3.4641016151377544},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.449489742783178}},"df":14,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"(":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.7320508075688772}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"k":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"}":{"docs":{},"df":0,"{":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":3.3166247903554},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":7}},"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":3.605551275463989},"https://hwjskt.github.io/rust/chapter6/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":6}}}}}},"c":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"=":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.0}},"df":1,"!":{"docs":{},"df":0,"[":{"docs":{},"df":0,"1":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.23606797749979}},"df":1,"0":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.4142135623730951}},"df":1}}},"4":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}},"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}},"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.7320508075688772}},"df":2}}}},"u":{"docs":{},"df":0,"8":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}}}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.7320508075688772}},"df":1}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":5}}}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":2.449489742783178}},"df":1,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0}},"df":1}}}}}}}}}},"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}},"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.8284271247461903}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.23606797749979}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"/":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":3}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":2}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}},"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"=":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.4142135623730951}},"df":2}}}},"t":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772}},"df":1},"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":3.0}},"df":1}}}}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"i":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.7320508075688772}},"df":1}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}},"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.7320508075688772}},"df":1}}}}}},"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.7320508075688772}},"df":4}},"r":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":2.0}},"df":3,"(":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":1}}}}}},"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"y":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":2}},"e":{"docs":{},"df":0,"'":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1},"l":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.4142135623730951}},"df":1}},"r":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":2}},"b":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":2,"g":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.4142135623730951}},"df":1}}}},"e":{"docs":{},"df":0,"k":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/about/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":2}}}},"’":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.0}},"df":1}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}},"’":{"docs":{"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.4142135623730951}},"df":1}}}},"w":{"docs":{"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1,"\"":{"docs":{},"df":0,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"o":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1},"l":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.7320508075688772}},"df":2}}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":4.242640687119285},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":3.872983346207417},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":3,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":1}}}}}}}}}},"1":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":2.8284271247461903}},"df":1,"d":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1,"o":{"docs":{},"df":0,"w":{"docs":{"https://hwjskt.github.io/rust/chapter1/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":5}}}},"p":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/config-options/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":3}}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":2}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.4142135623730951}},"df":1}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":4.795831523312719},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.0}},"df":4,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/":{"tf":1.0}},"df":1}}}}}},"k":{"docs":{"https://hwjskt.github.io/about/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.449489742783178},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":5,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.7320508075688772}},"df":1}}}},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/rust/chapter7/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":3.872983346207417},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":3.1622776601683795},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.7320508075688772}},"df":13}},"s":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.23606797749979}},"df":1,"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"_":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1}}}}}}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":2.6457513110645907},"https://hwjskt.github.io/posts/post-2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":6,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":1}}}}}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}},"w":{"docs":{},"df":0,"w":{"docs":{},"df":0,".":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"w":{"docs":{},"df":0,"y":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}}},"x":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.7320508075688772},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":3.7416573867739413},"https://hwjskt.github.io/rust/chapter2/":{"tf":1.7320508075688772},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":6.557438524302},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":6.244997998398398},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":4.123105625617661},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":2.23606797749979},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":2.23606797749979}},"df":9,".":{"docs":{},"df":0,"0":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1},"1":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1},"2":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0}},"df":1},"y":{"docs":{},"df":0,".":{"docs":{},"df":0,"z":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1}}}},"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"k":{"docs":{},"df":0,"u":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"1":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"8":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.8284271247461903}},"df":1}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"y":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.23606797749979}},"df":1}},"y":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":3.7416573867739413},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter2/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":2.449489742783178},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":4.123105625617661},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":3.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":2.23606797749979}},"df":7,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":2.0}},"df":1}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.8284271247461903}},"df":1}}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"=":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":2.0}},"df":1}}}}}}}}},"y":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"7":{"docs":{},"df":0,"b":{"docs":{},"df":0,"f":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"y":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.4142135623730951},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":2}}}},"z":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":2.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":2,"e":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1,"r":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.4142135623730951}},"df":1}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/":{"tf":2.449489742783178},"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0},"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0},"https://hwjskt.github.io/posts/post-1/":{"tf":1.4142135623730951},"https://hwjskt.github.io/posts/post-2/":{"tf":2.0}},"df":6}}}}}},"title":{"root":{"docs":{},"df":0,"2":{"docs":{"https://hwjskt.github.io/posts/post-1/":{"tf":1.0}},"df":1},"8":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1},"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}}}}},"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/4-comments/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter3/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/":{"tf":1.0}},"df":2}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter3/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.0}},"df":1}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0}},"df":4}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter7/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.0}},"df":2}}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":1}}}}}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0}},"df":3}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"y":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"c":{"docs":{"https://hwjskt.github.io/docs/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter6/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"tf":1.0}},"df":2}}},"x":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1},"s":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1}}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.0}},"df":3}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter3/3-functions/":{"tf":1.0}},"df":1}}}}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter1/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://hwjskt.github.io/rust/chapter7/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0}},"df":1}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"tf":1.0}},"df":2}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter1/1-installation/":{"tf":1.0}},"df":1},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/":{"tf":1.0}},"df":1}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}}}},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":1}}}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,".":{"docs":{},"df":0,"m":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter7/":{"tf":1.0}},"df":1}}},"p":{"docs":{"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"k":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter6/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"tf":1.0}},"df":2}}}},"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter7/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.0}},"df":4}}}},"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/docs/config-options/":{"tf":1.0}},"df":1}}}}},"w":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://hwjskt.github.io/rust/chapter4/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"tf":1.0}},"df":2}}}}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter7/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"tf":1.0}},"df":2}}}},"g":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"h":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":2},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://hwjskt.github.io/rust/chapter6/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/posts/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/rust/chapter2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter3/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0}},"df":3}}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter7/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":2}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter5/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":2}}}},"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"tf":1.0}},"df":1}}}},"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/docs/extended-shortcodes/":{"tf":1.0}},"df":1}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter1/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":3}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter5/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0}},"df":3,"u":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter5/":{"tf":1.0}},"df":1}}}}}}},"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"tf":1.0}},"df":2}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/docs/theme-extension/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"tf":1.0}},"df":2}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter4/":{"tf":1.0}},"df":1}}}}}}}}},"s":{"docs":{"https://hwjskt.github.io/posts/post-2/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"tf":1.0}},"df":4},"t":{"docs":{},"df":0,"f":{"docs":{"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"tf":1.0}},"df":1}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"tf":1.0}},"df":1}}}}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://hwjskt.github.io/about/":{"tf":1.0},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"tf":1.0}},"df":2}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"tf":1.0}},"df":1}}}}},"z":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{"https://hwjskt.github.io/":{"tf":1.0}},"df":1}}}}}}},"documentStore":{"save":true,"docs":{"https://hwjskt.github.io/":{"body":"\n졸라 (Zola)\n\nZola는 Hugo, Pelican 및 Jekyll 과 유사한 정적 사이트 생성기(SSG)입니다.\nRust 로 작성되었으며 Jinja2 , Django 템플릿 , Liquid 및 Twig 와 유사한 Tera 템플릿 엔진을 사용합니다.\n콘텐츠는 강력하게 정의되고 호환성이 높은 Markdown 사양인 CommonMark(사용법)으로 작성됩니다.\nZola는 pulldown-cmark를 사용하여 마크다운 파일을 구문 분석합니다. 이 라이브러리의 목표는 CommonMark 사양을 100% 준수하는 것입니다.\n각주 구문 분석, Github 테이블, Github 작업 목록 및 취소선과 같은 몇 가지 추가 기능을 추가합니다.\nSSG는 동적 템플릿을 사용하여 콘텐츠를 정적 HTML 페이지로 변환합니다. 따라서 정적 사이트는 매우 빠르고 데이터베이스가 필요하지 않으므로 호스팅하기 쉽습니다.\nWordPress, Drupal 및 Django와 같은 정적 사이트와 동적 사이트 간의 비교는 여기에서 찾을 수 있습니다.\n-Zola 공식홈페이지 Overview\n\n\n테마 (Theme)\n\nZola 홈페이지에서 제공하는 테마들 중에 DeepThought를 기본으로 제작했습니다.\n선택한 이유는 이 테마를 이용해서 사이트를 만드는 걸 잘 설명해주는 유튜브 영상이 있었기 때문입니다.\n다른 테마들도 훌륭하기 때문에 하나씩 적용해 볼 예정입니다.\n\n","id":"https://hwjskt.github.io/","title":"Zola를 이용해서 만든 사이트입니다."},"https://hwjskt.github.io/about/":{"body":"\n  \n\n취미로 코딩하는 성형외과 전문의\n\n\"WORK EXPERIENCE\"\n\n스케치성형외과 (NOW)\n강남엘성형외과\n리엔장성형외과\n...\n\n\n\"EDUCATION\"\n\n성형외과전문의, 가톨릭중앙의료원\"\n가톨릭대학교 의과대학\n\n\n\"PUBLISH (co-author)\"\n\n미용성형외과학, 군자출판사(2019)\nComplication Guidebook, Medytox(2018)\n필러 안전 시술가이드, Restylane(2017)\n...\n\n\n\n","id":"https://hwjskt.github.io/about/","title":"Welcome"},"https://hwjskt.github.io/docs/":{"body":"","id":"https://hwjskt.github.io/docs/","title":"Docs"},"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"body":"This article offers a sample of basic Markdown syntax that can be used in Zola content files.\n\nLet's face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages.\nMarkdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it.\nSome of the key benefits are:\n\nMarkdown is simple to learn, with minimal extra characters, so it's also quicker to write content.\nLess chance of errors when writing in Markdown.\nProduces valid XHTML output.\nKeeps the content and the visual display separate, so you cannot mess up the look of your site.\nWrite in any text editor or Markdown application you like.\nMarkdown is a joy to use!\n\nWithout further delay, let us go over the main elements of Markdown and what the resulting HTML looks like!\nHeadings\nHeadings from h1 through h6 are constructed with a # for each level:\n# h1 Heading\n## h2 Heading\n### h3 Heading\n#### h4 Heading\n##### h5 Heading\n###### h6 Heading\n\nThe HTML looks like this:\n&lt;h1&gt;h1 Heading&lt;/h1&gt;\n&lt;h2&gt;h2 Heading&lt;/h2&gt;\n&lt;h3&gt;h3 Heading&lt;/h3&gt;\n&lt;h4&gt;h4 Heading&lt;/h4&gt;\n&lt;h5&gt;h5 Heading&lt;/h5&gt;\n&lt;h6&gt;h6 Heading&lt;/h6&gt;\n\nComments\nComments should be HTML compatible.\n&lt;!--\nThis is a comment\n--&gt;\n\nComment below should NOT be seen:\n\nHorizontal Rules\nThe HTML &lt;hr&gt; element is for creating a \"thematic break\" between paragraph-level elements.\nIn Markdown, you can create a &lt;hr&gt; with any of the following:\n\n___: three consecutive underscores\n---: three consecutive dashes\n***: three consecutive asterisks\n\nThe rendered output looks like this:\n\n\n\nBody\nBody written as normal, plain text will be wrapped with &lt;p&gt;&lt;/p&gt; tags in the rendered HTML.\nSo this body:\nLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri,\nanimal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex,\nsoluta officiis concludaturque ei qui, vide sensibus vim ad.\n\nThe HTML looks like this:\n&lt;p&gt;Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.&lt;/p&gt;\n\nA line break can be done with one blank line.\nInline HTML\nIf you need a certain HTML tag (with a class) you can simply use HTML:\nParagraph in Markdown.\n\n&lt;div class=\"class\"&gt;\n    This is &lt;b&gt;HTML&lt;/b&gt;\n&lt;/div&gt;\n\nParagraph in Markdown.\n\nEmphasis\nBold\nFor emphasizing a snippet of text with a heavier font-weight.\nThe following snippet of text is rendered as bold text.\n**rendered as bold text**\n__rendered as bold text__\n\nThe HTML looks like this:\n&lt;strong&gt;rendered as bold text&lt;/strong&gt;\n\nItalics\nFor emphasizing a snippet of text with italics.\nThe following snippet of text is rendered as italicized text.\n*rendered as italicized text*\n_rendered as italicized text_\n\nThe HTML looks like this:\n&lt;em&gt;rendered as italicized text&lt;/em&gt;\n\nStrikethrough\nIn [GFM]^(GitHub flavored Markdown) you can do strikethroughs.\n~~Strike through this text.~~\n\nThe HTML looks like this:\n&lt;del&gt;Strike through this text.&lt;/del&gt;\n\nBlockquotes\nFor quoting blocks of content from another source within your document.\nAdd &gt; before any text you want to quote:\n&gt; **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\n\nThe rendered output looks like this:\n\nFusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\n\nThe HTML looks like this:\n&lt;blockquote&gt;\n  &lt;p&gt;\n    &lt;strong&gt;Fusion Drive&lt;/strong&gt; combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\n  &lt;/p&gt;\n&lt;/blockquote&gt;\n\nBlockquotes can also be nested:\n&gt; Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue.\nNunc augue augue, aliquam non hendrerit ac, commodo vel nisi.\n&gt;&gt; Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor\nodio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.\n\nThe rendered output looks like this:\n\nDonec massa lacus, ultricies a ullamcorper in, fermentum sed augue.\nNunc augue augue, aliquam non hendrerit ac, commodo vel nisi.\n\nSed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor\nodio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.\n\n\nLists\nUnordered\nA list of items in which the order of the items does not explicitly matter.\nYou may use any of the following symbols to denote bullets for each list item:\n* valid bullet\n- valid bullet\n+ valid bullet\n\nFor example:\n* Lorem ipsum dolor sit amet\n* Consectetur adipiscing elit\n* Integer molestie lorem at massa\n* Facilisis in pretium nisl aliquet\n* Nulla volutpat aliquam velit\n  * Phasellus iaculis neque\n  * Purus sodales ultricies\n  * Vestibulum laoreet porttitor sem\n  * Ac tristique libero volutpat at\n* Faucibus porta lacus fringilla vel\n* Aenean sit amet erat nunc\n* Eget porttitor lorem\n\nThe rendered output looks like this:\n\nLorem ipsum dolor sit amet\nConsectetur adipiscing elit\nInteger molestie lorem at massa\nFacilisis in pretium nisl aliquet\nNulla volutpat aliquam velit\n\nPhasellus iaculis neque\nPurus sodales ultricies\nVestibulum laoreet porttitor sem\nAc tristique libero volutpat at\n\n\nFaucibus porta lacus fringilla vel\nAenean sit amet erat nunc\nEget porttitor lorem\n\nThe HTML looks like this:\n&lt;ul&gt;\n  &lt;li&gt;Lorem ipsum dolor sit amet&lt;/li&gt;\n  &lt;li&gt;Consectetur adipiscing elit&lt;/li&gt;\n  &lt;li&gt;Integer molestie lorem at massa&lt;/li&gt;\n  &lt;li&gt;Facilisis in pretium nisl aliquet&lt;/li&gt;\n  &lt;li&gt;Nulla volutpat aliquam velit\n    &lt;ul&gt;\n      &lt;li&gt;Phasellus iaculis neque&lt;/li&gt;\n      &lt;li&gt;Purus sodales ultricies&lt;/li&gt;\n      &lt;li&gt;Vestibulum laoreet porttitor sem&lt;/li&gt;\n      &lt;li&gt;Ac tristique libero volutpat at&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li&gt;Faucibus porta lacus fringilla vel&lt;/li&gt;\n  &lt;li&gt;Aenean sit amet erat nunc&lt;/li&gt;\n  &lt;li&gt;Eget porttitor lorem&lt;/li&gt;\n&lt;/ul&gt;\n\nOrdered\nA list of items in which the order of items does explicitly matter.\n1. Lorem ipsum dolor sit amet\n2. Consectetur adipiscing elit\n3. Integer molestie lorem at massa\n4. Facilisis in pretium nisl aliquet\n5. Nulla volutpat aliquam velit\n6. Faucibus porta lacus fringilla vel\n7. Aenean sit amet erat nunc\n8. Eget porttitor lorem\n\nThe rendered output looks like this:\n\nLorem ipsum dolor sit amet\nConsectetur adipiscing elit\nInteger molestie lorem at massa\nFacilisis in pretium nisl aliquet\nNulla volutpat aliquam velit\nFaucibus porta lacus fringilla vel\nAenean sit amet erat nunc\nEget porttitor lorem\n\nThe HTML looks like this:\n&lt;ol&gt;\n  &lt;li&gt;Lorem ipsum dolor sit amet&lt;/li&gt;\n  &lt;li&gt;Consectetur adipiscing elit&lt;/li&gt;\n  &lt;li&gt;Integer molestie lorem at massa&lt;/li&gt;\n  &lt;li&gt;Facilisis in pretium nisl aliquet&lt;/li&gt;\n  &lt;li&gt;Nulla volutpat aliquam velit&lt;/li&gt;\n  &lt;li&gt;Faucibus porta lacus fringilla vel&lt;/li&gt;\n  &lt;li&gt;Aenean sit amet erat nunc&lt;/li&gt;\n  &lt;li&gt;Eget porttitor lorem&lt;/li&gt;\n&lt;/ol&gt;\n\nTask Lists\nTask lists allow you to create a list of items with checkboxes. To create a task list, add dashes (-) and brackets with a space ([ ]) before task list items. To select a checkbox, add an x in between the brackets ([x]).\n- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media\n\nThe rendered output looks like this:\n\n\nWrite the press release\n\nUpdate the website\n\nContact the media\n\nCode\nInline Code\nWrap inline snippets of code with `.\nIn this example, `&lt;section&gt;&lt;/section&gt;` should be wrapped as **code**.\n\nThe rendered output looks like this:\nIn this example, &lt;section&gt;&lt;/section&gt; should be wrapped as code.\nThe HTML looks like this:\n&lt;p&gt;\n  In this example, &lt;code&gt;&amp;lt;section&amp;gt;&amp;lt;/section&amp;gt;&lt;/code&gt; should be wrapped with &lt;strong&gt;code&lt;/strong&gt;.\n&lt;/p&gt;\n\nIndented Code\nOr indent several lines of code by at least four spaces, as in:\n    // Some comments\n    line 1 of code\n    line 2 of code\n    line 3 of code\n\nThe rendered output looks like this:\n// Some comments\nline 1 of code\nline 2 of code\nline 3 of code\n\nThe HTML looks like this:\n&lt;pre&gt;\n  &lt;code&gt;\n    // Some comments\n    line 1 of code\n    line 2 of code\n    line 3 of code\n  &lt;/code&gt;\n&lt;/pre&gt;\n\nTables\nTables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned.\n| Option | Description |\n| ------ | ----------- |\n| data   | path to data files to supply the data that will be passed into templates. |\n| engine | engine to be used for processing templates. Handlebars is the default. |\n| ext    | extension to be used for dest files. |\n\nThe rendered output looks like this:\nOptionDescription\ndatapath to data files to supply the data that will be passed into templates.\nengineengine to be used for processing templates. Handlebars is the default.\nextextension to be used for dest files.\n\nThe HTML looks like this:\n&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Option&lt;/th&gt;\n      &lt;th&gt;Description&lt;/th&gt;\n    &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;\n      &lt;td&gt;data&lt;/td&gt;\n      &lt;td&gt;path to data files to supply the data that will be passed into templates.&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;engine&lt;/td&gt;\n      &lt;td&gt;engine to be used for processing templates. Handlebars is the default.&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n      &lt;td&gt;ext&lt;/td&gt;\n      &lt;td&gt;extension to be used for dest files.&lt;/td&gt;\n    &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n\nLinks\nBasic Link\n&lt;https://assemble.io&gt;\n&lt;contact@revolunet.com&gt;\n[Assemble](https://assemble.io)\n\nThe rendered output looks like this (hover over the link, there is no tooltip):\nhttps://assemble.io\ncontact@revolunet.com\nAssemble\nThe HTML looks like this:\n&lt;a href=\"https://assemble.io\"&gt;https://assemble.io&lt;/a&gt;\n&lt;a href=\"mailto:contact@revolunet.com\"&gt;contact@revolunet.com&lt;/a&gt;\n&lt;a href=\"https://assemble.io\"&gt;Assemble&lt;/a&gt;\n\nAdd a Title\n[Upstage](https://github.com/upstage/ \"Visit Upstage!\")\n\nThe rendered output looks like this (hover over the link, there should be a tooltip):\nUpstage\nThe HTML looks like this:\n&lt;a href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"&gt;Upstage&lt;/a&gt;\n\nNamed Anchors\nNamed anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters:\n## Table of Contents\n  * [Chapter 1](#chapter-1)\n  * [Chapter 2](#chapter-2)\n  * [Chapter 3](#chapter-3)\n\nwill jump to these sections:\n## Chapter 1 &lt;a id=\"chapter-1\"&gt;&lt;/a&gt;\nContent for chapter one.\n\n## Chapter 2 &lt;a id=\"chapter-2\"&gt;&lt;/a&gt;\nContent for chapter one.\n\n## Chapter 3 &lt;a id=\"chapter-3\"&gt;&lt;/a&gt;\nContent for chapter one.\n\nFootnotes\nFootnotes allow you to add notes and references without cluttering the body of the document. When you create a footnote, a superscript number with a link appears where you added the footnote reference. Readers can click the link to jump to the content of the footnote at the bottom of the page.\nTo create a footnote reference, add a caret and an identifier inside brackets ([^1]). Identifiers can be numbers or words, but they can’t contain spaces or tabs. Identifiers only correlate the footnote reference with the footnote itself — in the output, footnotes are numbered sequentially.\nAdd the footnote using another caret and number inside brackets with a colon and text ([^1]: My footnote.). You don’t have to put footnotes at the end of the document. You can put them anywhere except inside other elements like lists, block quotes, and tables.\nThis is a digital footnote[^1].\nThis is a footnote with \"label\"[^label]\n\n[^1]: This is a digital footnote\n[^label]: This is a footnote with \"label\"\n\nThis is a digital footnote1.\nThis is a footnote with \"label\"2\n1\nThis is a digital footnote\n2: This is a footnote with \"label\"\n\nImages\nImages have a similar syntax to links but include a preceding exclamation point.\n![Minion](https://octodex.github.com/images/minion.png)\n\n\nor:\n![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\")\n\n\nLike links, images also have a footnote style syntax:\n![Alt text][id]\n\n\nWith a reference later in the document defining the URL location:\n[id]: https://octodex.github.com/images/dojocat.jpg  \"The Dojocat\"\n\n","id":"https://hwjskt.github.io/docs/basic-markdown-syntax/","title":"Basic Markdown Syntax"},"https://hwjskt.github.io/docs/config-options/":{"body":"DeepThought theme provides some config option like option to add favicon to your site, add avatar for profile, setup social links for the profile etc\nSite Configurations\nAuthor Details\nYou can configure author details in [extra.author] of config.toml file.\n[extra.author]\nname = \"&lt;your_name&gt;\"\navatar = \"&lt;path_to_avatar&gt;\"\n\nFavicon Setup\nYou can configure favicon in [extra.favicon] of config.toml file. You can use something like realfavicongenerator to generate your favicon.\n[extra.favicon]\nfavicon_16x16 = \"/icons/favicon-16x16.png\"\nfavicon_32x32 = \"/icons/favicon-32x32.png\"\napple_touch_icon = \"/icons/apple-touch-icon.png\"\nsafari_pinned_tab = \"/icons/safari-pinned-tab.svg\"\nwebmanifest = \"/icons/site.webmanifest\"\n\nSocial Link Setup\nYou can configure social links in [extra.social] of config.toml file.\n[extra.social]\nemail = \"&lt;email_id&gt;\"\nfacebook = \"&lt;facebook_username&gt;\"\ngithub = \"&lt;github_username&gt;\"\ngitlab = \"&lt;gitlab_username&gt;\"\nkeybase = \"&lt;keybase_username&gt;\"\nlinkedin = \"&lt;linkedin_username&gt;\"\nstackoverflow = \"&lt;stackoverflow_userid&gt;\"\ntwitter = \"&lt;twitter_username&gt;\"\ninstagram = \"&lt;instagram_username&gt;\"\nbehance = \"&lt;behance_username&gt;\"\ngoogle_scholar = \"&lt;googlescholar_userid&gt;\"\norcid = \"&lt;orcid_userid&gt;\"\nmastodon_username = \"&lt;mastadon_username&gt;\"\nmastodon_server = \"&lt;mastodon_server&gt;\" (if not set, defaults to mastodon.social)\n\nGoogle Analytics Setup\nDeepThought supports google analytics out of the box. You can configure google in [extra.analytics] of config.toml file. \n[extra.analytics]\ngoogle = \"&lt;your_gtag&gt;\"\n\nDisqus Comments Setup\nDeepThought supports disqus commenting out of the box. You can configure disqus in [extra.commenting] of config.toml file. \n[extra.commenting]\ndisqus = \"&lt;your_disqus&gt;\"\n\nExternal Libraries\nMermaid, Chart and Galleria\nTo gain the features displayed in Extended Shortcodes,\nenable the libraries you want to use in the [extra] section of config.toml.\nchart.enabled = true\nmermaid.enabled = true\ngalleria.enabled = true\n\nMapbox\nDeepThought supports Mapbox out of the box to add maps in your posts.\nYou can enable it and set an access token in the [extra.mapbox] section of config.toml.\n[extra.mapbox]\nenabled = true\naccess_token = \"&lt;your_access_token&gt;\"\n\nKaTeX\nThis theme contains math formula support using KaTeX.\nTo enable KaTeX in your project, set the following in the [extra] section of config.toml:\n[extra]\nkatex.enabled = true\nkatex.auto_render = true    # automatic rendering without shortcodes\n\nSection Configurations\nApart from standard config you can also add a description in your _index.md file for your sections that appears in listing.\ndescription = \"Blog posts accumulated over the time.\"\n\nPage Configurations\nEnable Table Of Content\nIn order to enable toc for your post change as below code snippet in your page.\n[extra]\ntoc = true\n\nEnable Comments\nIn order to enable comments for your post change as below code snippet in your page.\n[extra]\ncomments = true\n\n","id":"https://hwjskt.github.io/docs/config-options/","title":"Config Options"},"https://hwjskt.github.io/docs/extended-shortcodes/":{"body":"DeepThought theme provides multiple shortcodes on top of built-in ones in Zola.\nPlease, have a look at the Config Options\nthat explain how to enable them.\nMermaid\nMermaid is a library helping you to generate diagram and flowcharts from text, in a similar manner as Markdown.\nFlowchart\nTo put a flowchart in your post use below snippet\nCode\n{% mermaid() %}\ngraph TD;\n    A--&gt;B;\n    A--&gt;C;\n    B--&gt;D;\n    C--&gt;D;\n{% end %}\n\nOutput\ngraph TD;\nA--&gt;B;\nA--&gt;C;\nB--&gt;D;\nC--&gt;D;\n\nSequence Diagram\nTo put a sequence diagram in your post use below snippet\nCode\n{% mermaid() %}\nsequenceDiagram\n  participant Alice\n  participant Bob\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n    John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts &lt;br/&gt;prevail!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!\n{% end %}\n\nOutput\nsequenceDiagram\n  participant Alice\n  participant Bob\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n    John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts &lt;br/&gt;prevail!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!\n\nGantt diagram\nTo put a gantt diagram in your post use below snippet\nCode\n{% mermaid() %}\ngantt\n  dateFormat YYYY-MM-DD\n  title Adding GANTT diagram to mermaid\n  excludes weekdays 2014-01-10\n\n  section A section\n  Completed task :done, des1, 2014-01-06,2014-01-08\n  Active task :active, des2, 2014-01-09, 3d\n  Future task : des3, after des2, 5d\n  Future task2 : des4, after des3, 5d\n{% end %}\n\nOutput\ngantt\n  dateFormat YYYY-MM-DD\n  title Adding GANTT diagram to mermaid\n  excludes weekdays 2014-01-10\n\n  section A section\n  Completed task :done, des1, 2014-01-06,2014-01-08\n  Active task :active, des2, 2014-01-09, 3d\n  Future task : des3, after des2, 5d\n  Future task2 : des4, after des3, 5d\nClass diagram - experimental\nTo put a class diagram in your post use below snippet\nCode\n{% mermaid() %}\nclassDiagram\n  Class01 &lt;|-- AveryLongClass : Cool\n  Class03 _-- Class04\n  Class05 o-- Class06\n  Class07 .. Class08\n  Class09 --&gt; C2 : Where am i?\n  Class09 --_ C3\n  Class09 --|&gt; Class07\n  Class07 : equals()\n  Class07 : Object[] elementData\n  Class01 : size()\n  Class01 : int chimp\n  Class01 : int gorilla\n  Class08 &lt;--&gt; C2: Cool label\n{% end %}\n\nOutput\nclassDiagram\n  Class01 &lt;|-- AveryLongClass : Cool\n  Class03 _-- Class04\n  Class05 o-- Class06\n  Class07 .. Class08\n  Class09 --&gt; C2 : Where am i?\n  Class09 --_ C3\n  Class09 --|&gt; Class07\n  Class07 : equals()\n  Class07 : Object[] elementData\n  Class01 : size()\n  Class01 : int chimp\n  Class01 : int gorilla\n  Class08 &lt;--&gt; C2: Cool label\n\nEntity Relationship Diagram - experimental\nTo put an ER diagram in your post use below snippet\nCode\n{% mermaid() %}\nerDiagram\n    CUSTOMER ||--o{ ORDER : places\n    ORDER ||--|{ LINE-ITEM : contains\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\n{% end %}\n\nOutput\nerDiagram\n    CUSTOMER ||--o{ ORDER : places\n    ORDER ||--|{ LINE-ITEM : contains\n    CUSTOMER }|..|{ DELIVERY-ADDRESS : uses\n\nUser Journey Diagram\nTo put an user journey diagram in your post use below snippet\nCode\n{% mermaid() %}\n  journey\n  title My working day\n  section Go to work\n  Make tea: 5: Me\n  Go upstairs: 3: Me\n  Do work: 1: Me, Cat\n  section Go home\n  Go downstairs: 5: Me\n  Sit down: 5: Me\n{% end %}\n\nOutput\njourney\n  title My working day\n  section Go to work\n  Make tea: 5: Me\n  Go upstairs: 3: Me\n  Do work: 1: Me, Cat\n  section Go home\n  Go downstairs: 5: Me\n  Sit down: 5: Me\n\nMapbox\nMapbox GL JS is a JavaScript library that uses WebGL to render interactive maps from vector tiles and Mapbox styles.\nCode\n{% mapbox(zoom=6) %}\n{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [78.016667, 27.183333]\n      },\n      \"properties\": {\n        \"title\": \"Agra\",\n        \"description\": \"Agra is a major tourist destination because of its many Mughal-era buildings, most notably the Taj Mahal, Agra Fort and Fatehpur Sikri, all of which are UNESCO World Heritage Sites.\"\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [77.2, 28.6]\n      },\n      \"properties\": {\n        \"title\": \"New Delhi\",\n        \"description\": \"New Delhi is the capital of India and an administrative district of NCT Delhi.\"\n      }\n    }\n  ]\n}\n{% end %}\n\nOutput\n\n    \n        pk.eyJ1IjoicmF0YW5zaHJlc2h0aGEiLCJhIjoiY2tla2s2NmM3MDd0ZzJzbXFtc3Y2YmU0NyJ9.0RhUnJPKbxHWw3xGPnnBlA\n    \n    \n        6\n    \n     \n        {\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [78.016667, 27.183333]\n      },\n      \"properties\": {\n        \"title\": \"Agra\",\n        \"description\": \"Agra is a major tourist destination because of its many Mughal-era buildings, most notably the Taj Mahal, Agra Fort and Fatehpur Sikri, all of which are UNESCO World Heritage Sites.\"\n      }\n    },\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [77.2, 28.6]\n      },\n      \"properties\": {\n        \"title\": \"New Delhi\",\n        \"description\": \"New Delhi is the capital of India and an administrative district of NCT Delhi.\"\n      }\n    }\n  ]\n}\n    \n\n\nChart\nChart.xkcd is a chart library plots “sketchy”, “cartoony” or “hand-drawn” styled charts.\nLine chart\nLine chart displays series of data points in the form of lines. It can be used to show trend data, or comparison of different data sets.\nCode\n{% chart() %}\n{\n  \"type\": \"Line\",\n  \"title\": \"Monthly income of an indie developer\",\n  \"xLabel\": \"Month\",\n  \"yLabel\": \"$ Dollars\",\n  \"data\": {\n    \"labels\": [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"],\n    \"datasets\": [\n      {\n        \"label\": \"Plan\",\n        \"data\": [30, 70, 200, 300, 500, 800, 1500, 2900, 5000, 8000]\n      },\n      {\n        \"label\": \"Reality\",\n        \"data\": [0, 1, 30, 70, 80, 100, 50, 80, 40, 150]\n      }\n    ]\n  }\n}\n{% end %}\n\nOutput\n{\n  \"type\": \"Line\",\n  \"title\": \"Monthly income of an indie developer\",\n  \"xLabel\": \"Month\",\n  \"yLabel\": \"$ Dollars\",\n  \"data\": {\n    \"labels\": [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"],\n    \"datasets\": [\n      {\n        \"label\": \"Plan\",\n        \"data\": [30, 70, 200, 300, 500, 800, 1500, 2900, 5000, 8000]\n      },\n      {\n        \"label\": \"Reality\",\n        \"data\": [0, 1, 30, 70, 80, 100, 50, 80, 40, 150]\n      }\n    ]\n  }\n}\nXY chart\nXY chart is used to plot points by specifying their XY coordinates.\nCode\n{% chart() %}\n{\n  \"type\": \"XY\",\n  \"title\": \"Pokemon farms\",\n  \"xLabel\": \"Coordinate\",\n  \"yLabel\": \"Count\",\n  \"data\": {\n    \"datasets\": [\n      {\n        \"label\": \"Pikachu\",\n        \"data\": [\n          {\n            \"x\": 3,\n            \"y\": 10\n          },\n          {\n            \"x\": 4,\n            \"y\": 122\n          },\n          {\n            \"x\": 10,\n            \"y\": 100\n          }\n        ]\n      },\n      {\n        \"label\": \"Squirtle\",\n        \"data\": [\n          {\n            \"x\": 1,\n            \"y\": 1\n          },\n          {\n            \"x\": 3,\n            \"y\": 3\n          }\n        ]\n      },\n      {\n        \"label\": \"Charizard\",\n        \"data\": [\n          {\n            \"x\": 2,\n            \"y\": 5\n          },\n          {\n            \"x\": 6,\n            \"y\": 8\n          }\n        ]\n      }\n    ]\n  },\n  \"options\": {\n    \"xTickCount\": 5,\n    \"yTickCount\": 5,\n    \"showLine\": false,\n    \"dotSize\": 1\n  }\n}\n{% end %}\n\nOutput\n{\n  \"type\": \"XY\",\n  \"title\": \"Pokemon farms\",\n  \"xLabel\": \"Coordinate\",\n  \"yLabel\": \"Count\",\n  \"data\": {\n    \"datasets\": [\n      {\n        \"label\": \"Pikachu\",\n        \"data\": [\n          {\n            \"x\": 3,\n            \"y\": 10\n          },\n          {\n            \"x\": 4,\n            \"y\": 122\n          },\n          {\n            \"x\": 10,\n            \"y\": 100\n          }\n        ]\n      },\n      {\n        \"label\": \"Squirtle\",\n        \"data\": [\n          {\n            \"x\": 1,\n            \"y\": 1\n          },\n          {\n            \"x\": 3,\n            \"y\": 3\n          }\n        ]\n      },\n      {\n        \"label\": \"Charizard\",\n        \"data\": [\n          {\n            \"x\": 2,\n            \"y\": 5\n          },\n          {\n            \"x\": 6,\n            \"y\": 8\n          }\n        ]\n      }\n    ]\n  },\n  \"options\": {\n    \"xTickCount\": 5,\n    \"yTickCount\": 5,\n    \"showLine\": false,\n    \"dotSize\": 1\n  }\n}\nBar chart\nA bar chart provides a way of showing data values represented as vertical bars\nCode\n{% chart() %}\n{\n  \"type\": \"Bar\",\n  \"title\": \"How to feel powerful ?\",\n  \"xLabel\": \"Platforms\",\n  \"yLabel\": \"Count\",\n  \"data\": {\n    \"labels\": [\"Earn Money\", \"Get Famous\", \"Use terminal in front of non-programmers\"],\n    \"datasets\": [\n      {\n        \"data\": [30, 45, 100]\n      }\n    ]\n  },\n  \"options\": {\n    \"yTickCount\": 2,\n    \"dataColors\": [\"Red\", \"Green\", \"Blue\"]\n  }\n}\n{% end %}\n\nOutput\n{\n  \"type\": \"Bar\",\n  \"title\": \"How to feel powerful ?\",\n  \"xLabel\": \"Platforms\",\n  \"yLabel\": \"Count\",\n  \"data\": {\n    \"labels\": [\"Earn Money\", \"Get Famous\", \"Use terminal in front of non-programmers\"],\n    \"datasets\": [\n      {\n        \"data\": [30, 45, 100]\n      }\n    ]\n  },\n  \"options\": {\n    \"yTickCount\": 2,\n    \"dataColors\": [\"Red\", \"Green\", \"Blue\"]\n  }\n}\nStacked bar chart\nA stacked bar chart provides a way of showing data values represented as vertical bars\nCode\n{% chart() %}\n{\n  \"type\": \"StackedBar\",\n  \"title\": \"Issues and PR Submissions\",\n  \"xLabel\": \"Month\",\n  \"yLabel\": \"Count\",\n  \"data\": {\n    \"labels\": [\"Jan\", \"Feb\", \"Mar\", \"April\", \"May\"],\n    \"datasets\": [\n      {\n        \"label\": \"Issues\",\n        \"data\": [12, 19, 11, 29, 17]\n      },\n      {\n        \"label\": \"PRs\",\n        \"data\": [3, 5, 2, 4, 1]\n      },\n      {\n        \"label\": \"Merges\",\n        \"data\": [2, 3, 0, 1, 1]\n      }\n    ]\n  }\n}\n{% end %}\n\nOutput\n{\n  \"type\": \"StackedBar\",\n  \"title\": \"Issues and PR Submissions\",\n  \"xLabel\": \"Month\",\n  \"yLabel\": \"Count\",\n  \"data\": {\n    \"labels\": [\"Jan\", \"Feb\", \"Mar\", \"April\", \"May\"],\n    \"datasets\": [\n      {\n        \"label\": \"Issues\",\n        \"data\": [12, 19, 11, 29, 17]\n      },\n      {\n        \"label\": \"PRs\",\n        \"data\": [3, 5, 2, 4, 1]\n      },\n      {\n        \"label\": \"Merges\",\n        \"data\": [2, 3, 0, 1, 1]\n      }\n    ]\n  }\n}\nPie/Doughnut chart\nA pie/doughnut chart provides a way of illustrating numerical proportion.\nCode\n{% chart() %}\n{\n  \"type\": \"Pie\",\n  \"title\": \"What Tim is made of\",\n  \"data\": {\n    \"labels\": [\"a\", \"b\", \"e\", \"f\", \"g\"],\n    \"datasets\": [\n      {\n        \"data\": [500, 200, 80, 90, 100]\n      }\n    ]\n  }\n}\n{% end %}\n\nOutput\n{\n  \"type\": \"Pie\",\n  \"title\": \"What Tim is made of\",\n  \"data\": {\n    \"labels\": [\"a\", \"b\", \"e\", \"f\", \"g\"],\n    \"datasets\": [\n      {\n        \"data\": [500, 200, 80, 90, 100]\n      }\n    ]\n  }\n}\nRadar chart\nA radar chart provides a way of displaying multivariate data in the form of a two-dimensional chart of three or more quantitative variables represented on axes starting from the same point.\nCode\n{% chart() %}\n{\n  \"type\": \"Radar\",\n  \"title\": \"Letters in random words\",\n  \"data\": {\n    \"labels\": [\"c\", \"h\", \"a\", \"r\", \"t\"],\n    \"datasets\": [\n      {\n        \"label\": \"ccharrrt\",\n        \"data\": [2, 1, 1, 3, 1]\n      },\n      {\n        \"label\": \"chhaart\",\n        \"data\": [1, 2, 2, 1, 1]\n      }\n    ]\n  },\n  \"options\": {\n    \"showLegend\": true,\n    \"showLabels\": true\n  }\n}\n{% end %}\n\nOutput\n{\n  \"type\": \"Radar\",\n  \"title\": \"Letters in random words\",\n  \"data\": {\n    \"labels\": [\"c\", \"h\", \"a\", \"r\", \"t\"],\n    \"datasets\": [\n      {\n        \"label\": \"ccharrrt\",\n        \"data\": [2, 1, 1, 3, 1]\n      },\n      {\n        \"label\": \"chhaart\",\n        \"data\": [1, 2, 2, 1, 1]\n      }\n    ]\n  },\n  \"options\": {\n    \"showLegend\": true,\n    \"showLabels\": true\n  }\n}\nGalleria\nGalleria is a framework that simplifies the process of creating beautiful image galleries for the web and mobile devices.\nCode\n{% galleria() %}\n{\n  \"images\": [\n    {\n      \"src\": \"alexandre-dinaut-GHxr3O6yZ1c-unsplash.jpg\",\n      \"title\": \"Clouds &amp; Mountains\",\n      \"description\": \"Just hanging out with each other.\"\n    },\n    {\n      \"src\": \"chandler-cruttenden-YYemke7BfuE-unsplash.jpg\",\n      \"title\": \"Crop\",\n      \"description\": \"Waiting for the harvest.\"\n    },\n    {\n      \"src\": \"jung-ho-park-7aZtpsyaWVM-unsplash.jpg\",\n      \"title\": \"The Fog\",\n      \"description\": \"Engulfing everything.\"\n    },\n    {\n      \"src\": \"kitera-dent-BIj4LObC6es-unsplash.jpg\",\n      \"title\": \"Just Plants\",\n      \"description\": \"Backdrop of ocean.\"\n    },\n    {\n      \"src\": \"koes-nadi-XkUFF1nnbA8-unsplash.jpg\",\n      \"title\": \"Whoa\",\n      \"description\": \"Something to look at.\"\n    },\n    {\n      \"src\": \"lazyartistgallery-HHaIRbgzcGw-unsplash.jpg\",\n      \"title\": \"Let's Chill\",\n      \"description\": \"Three birds just chilling !!\"\n    },\n    {\n      \"src\": \"saira-nUxdL_19OQw-unsplash.jpg\",\n      \"title\": \"Canyon\",\n      \"description\": \"Might of nature.\"\n    },\n    {\n      \"src\": \"waldemar-brandt-2hAEHCt25eM-unsplash.jpg\",\n      \"title\": \"Evening\",\n      \"description\": \"Time to wind down.\"\n    }\n  ]\n}\n{% end %}\n\nOutput\n{\n  \"images\": [\n    {\n      \"src\": \"alexandre-dinaut-GHxr3O6yZ1c-unsplash.jpg\",\n      \"title\": \"Clouds &amp; Mountains\",\n      \"description\": \"Just hanging out with each other.\"\n    },\n    {\n      \"src\": \"chandler-cruttenden-YYemke7BfuE-unsplash.jpg\",\n      \"title\": \"Crop\",\n      \"description\": \"Waiting for the harvest.\"\n    },\n    {\n      \"src\": \"jung-ho-park-7aZtpsyaWVM-unsplash.jpg\",\n      \"title\": \"The Fog\",\n      \"description\": \"Engulfing everything.\"\n    },\n    {\n      \"src\": \"kitera-dent-BIj4LObC6es-unsplash.jpg\",\n      \"title\": \"Just Plants\",\n      \"description\": \"Backdrop of ocean.\"\n    },\n    {\n      \"src\": \"koes-nadi-XkUFF1nnbA8-unsplash.jpg\",\n      \"title\": \"Whoa\",\n      \"description\": \"Something to look at.\"\n    },\n    {\n      \"src\": \"lazyartistgallery-HHaIRbgzcGw-unsplash.jpg\",\n      \"title\": \"Let's Chill\",\n      \"description\": \"Three birds just chilling !!\"\n    },\n    {\n      \"src\": \"saira-nUxdL_19OQw-unsplash.jpg\",\n      \"title\": \"Canyon\",\n      \"description\": \"Might of nature.\"\n    },\n    {\n      \"src\": \"waldemar-brandt-2hAEHCt25eM-unsplash.jpg\",\n      \"title\": \"Evening\",\n      \"description\": \"Time to wind down.\"\n    }\n  ]\n}KaTeX\nKaTeX is a math typesetting library based on TeX.\nCode\n{% katex(block=true) %}\n\\KaTeX\n{% end %}\n\nOutput\n\nPhoto By:\n\nALEXANDRE DINAUT on Unsplash\nChandler Cruttenden on Unsplash\nJung Ho Park on Unsplash\nKitera Dent on Unsplash\nKoes nadi on Unsplash\nLazyartistgallery on Unsplash\nSaira on Unsplash\nWaldemar Brandt on Unsplash\n\n","id":"https://hwjskt.github.io/docs/extended-shortcodes/","title":"Extended Shortcodes"},"https://hwjskt.github.io/docs/theme-extension/":{"body":"DeepThought theme can be extended with usual Zola extension mechanisms.\nReplacing a template\nAs any theme, all DeepThought templates can be replaced to override a whole template.\nBlocks to extend\nIf you don't want to replace a whole DeepThought template, but override parts of it, you can extend the template and redefine some specific blocks.\nHere is a WIP list of blocks in DeepThought templates to override:\nTemplate location1BlockDescription\nbase.htmluser_custom_stylesheetCustom stylesheet (css or saas) to fine-tune DeepThought styling\nbase.htmltitleCustomize default page's titles\nbase.htmlanalyticsProvide your own analytics script. Google Analytics by default\nbase.htmlheaderCustomize page's header\nbase.htmlcontentCustomize page's content\nbase.htmlsearchProvide your own search box partial template\nbase.htmlpaginationOverride default pagination\nbase.htmlcommentProvide your own pagination partial template\nbase.htmlother_lang_search_jsProvide custom search behavior, eg. to use languages others than English\nbase.htmluser_custom_jsProvide any custom JS scripts at the end of the body of the page\n\n\n1\nRelative to the templates directory\n\n","id":"https://hwjskt.github.io/docs/theme-extension/","title":"Theme extension"},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"body":"This is a small example post of stuff you can do with the DeepThought theme.\nWe'll try to represent all possible markdown and shortcode combinations here\nso you can develop easily.\nHere's some lists\n\nlet's list some stuff\nunordered, of course.\n\n\nWe can also order lists\n\nAnd nesting here works too\nWe can do whatever we want!\n\n\nAnd drop back to the original indentation.\n\nHeaders\nSmaller\nSmaller still!\nCan't really get much smaller than this\nEven if you try\nIt won't do anything\nWe can also italicize stuff, or make it bold.\nCode\nWant some Rust code?  We got Rust code.\n\n// `vst` uses macros, so we'll need to specify that we're using them!\n#[macro_use]\nextern crate vst;\n\n// We're implementing a trait `Plugin` that does all the VST-y stuff for us.\nimpl Plugin for Whisper {\n    fn get_info(&amp;self) -&gt; Info {\n        Info {\n            name: \"Whisper\".to_string()\n        }\n    }\n}\n\n\nWe can also add a filename to our code blocks which is super useful when\nproviding tutorials, etc.  Here's some HTML we can insert into our\nmarkdown file right before the code block.  (Meta, right?)\n\n  www.index.html\n\n&lt;div class='filename'&gt;\n  &lt;div&gt;src/lib.rs&lt;/div&gt;\n&lt;/div&gt;\n\nIf we want, we can also specify inline code which is useful for the small stuff.\nHorizontal rules\nWe have them!\n\nYoutube\nwith youtube(id=\"the_id_here\")\n\n    \n    \n\nVimeo\nwith vimeo(id=\"id_here\")\n\n    \n    \n\nLinks\nOf Course\nTables\nYou can make tables in markdown, too!  Who would have thought.  Are these styled yet?\nFirst HeaderSecond Header\nContent CellContent Cell\nContent CellContent Cell\n\nFoldable Text\n\n    Title 1\n    Content 1 Content 1 Content 1 Content 1 Content 1\n\n\n    Title 2\n    Content 2 Content 2 Content 2 Content 2 Content 2\n\nWe can do that like this:\n&lt;details&gt;\n    &lt;summary&gt;Title 1&lt;/summary&gt;\n    &lt;p&gt;Content 1 Content 1 Content 1 Content 1 Content 1&lt;/p&gt;\n&lt;/details&gt;\n\n","id":"https://hwjskt.github.io/docs/welcome-to-deep-thought/","title":"Welcome to DeepThought"},"https://hwjskt.github.io/posts/":{"body":"\n\n","id":"https://hwjskt.github.io/posts/","title":"Posts"},"https://hwjskt.github.io/posts/post-1/":{"body":"zola 의 Deep-Thought theme 을 이용해서 만들던 중, Book theme 을 함께 쓰려고 조금씩 수정을 했습니다.\n그 과정에서 겪은 시행착오를 메모합니다.\n원하는 글꼴로 통일\nTypora 의 newsprint css 를 다운받아 /sass 폴더에 복사합니다.\n확장자를 css 에서 scss로 바꿔줍니다.\n뒤에 {% block user_custom_stylesheet %} 블럭을 이용해서 적용해줍니다.\n\ncss 를 복사해오기\nzola 는 sass 파일로 작성한 다음, build 할 때 css 파일로 만듭니다.\nBook theme 를 사용하려면 테마의 sass 파일들을 /sass 폴더로 복사해서 가져와야 합니다.\n파일이름이 구별되도록 book.sass 파일을 제외한 나머지 파일에 _book 이라는 prefix를 붙여줍니다.\n(앞에 _ 를 붙이지 않으면 book.sass에서 import 가 되지 않습니다.)\nbook.sass 파일안에 import 도 파일이름에 맞게 고쳐줍니다.\n\n각 메뉴에 맞게 css 적용하기\n기존 Deep-Thought 테마를 사용하는 곳에는 글꼴 선택 정도의 테마를 적용합니다.\n/templates/base.html 에 아래 스타일을 추가합니다.\n{% block user_custom_stylesheet %}\n    {# 전체 글꼴 적용 #}\n    &lt;link rel=\"stylesheet\" href=\"{{ get_url(path='newsprint.css') | safe }}\"&gt;\n{% endblock %}\n\nBook 테마를 사용하는 곳에는 book에서 가져온 css 만 적용하는데, 나머지는 원래 css를 적용해서 통일감을 유지합니다.\n/templates/book_index.html 에 아래 스타일을 추가합니다.\n{% block user_custom_stylesheet %}\n    {# book 의 css를 불러온 후, deep-thought의 css를 덮어썼다. #}\n    &lt;link rel=\"stylesheet\" href=\"{{ get_url(path='book.css') | safe }}\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"{{ get_url(path='deep-thought.css') | safe }}\"&gt;\n    {# 전체 글꼴 적용 #}\n    &lt;link rel=\"stylesheet\" href=\"{{ get_url(path='newsprint.css') | safe }}\"&gt;\n{% endblock %}\n\n약간 차이가 남는데 어쩔수 없습니다. css를 다 뜯어고치기엔 너무 귀찮다.......\n\n전용 template 를 만들기\nbook theme 의 /templates 폴더에서 파일을 복사해옵니다.\nprefix 를 붙여서 book_index.html, book_page.html, book_sectinn.html 파일로 이름을 변경합니다.\n아래와 같이 조금씩 수정해줍니다.\n- book_index.html\nbase.html을 복사해서 book_index.html 을 만듭니다.\n{% extends \"DeepThought/templates/base.html\" %} 를 {% extends \"base.html\" %} 로 수정합니다.\ncss 를 불러오기 위해 아래 코드를 추가합니다.\n{% block user_custom_stylesheet %}\n    {# book 의 css를 불러온 후, deep-thought의 css를 덮어썼다. #}\n    &lt;link rel=\"stylesheet\" href=\"{{ get_url(path='book.css') | safe }}\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"   \"&gt;\n    {# 본문형식을 맞춰본다 #}\n    &lt;link rel=\"stylesheet\" href=\"{{ get_url(path='newsprint.css') | safe }}\"&gt;\n{% endblock %}\n\n{% block content %} 에 book theme 의 /templates 폴더애 있는 index.html 의  를 복사해붙여넣습니다.\nnavigation 이 nav bar 와 겹치지 않게 위치를 내려줍니다.\n            {% block before_menu %}\n            {# lt.side menu 가 상단 navbar에 가리지 않게 내린다  #}\n            &lt;div&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/div&gt;\n            {% endblock before_menu %}\n            &lt;nav role=\"navigation\"&gt;\n\nblock content 가 겹치면 오류가 나기 때문에 이름을 book_content 로 바꿔어줍니다.\n               &lt;div class=\"book-content\"&gt;\n                    {% block book_content %}\n                    {% endblock book_content %}\n                &lt;/div&gt;\n\n- book_section.html, book_page.html 수정\n{% extends \"book_index.html\" %} 로 수정하고, 아래 내용도 적당히 수정해줍니다.\npre, post 화살표가 적절히 작동하려면 {% set index = get_section(path=\"_index.md\") %} 에서 _index.md 대신 rust/_index.md 식으로 바꿔주어야 합니다.\n","id":"https://hwjskt.github.io/posts/post-1/","title":"테마 2가지 사용하기"},"https://hwjskt.github.io/posts/post-2/":{"body":"zola 를 이용해 만든 블로그를 localhost 에서 github-Pages 로 이동하는 과정입니다.\nzola 의 Documention을 따라하면서 놓친 부분을 추가해서 메모해둡니다.\nGithub Actions\nGithub-Pages에 Zola-Page를 배포하기 위해 Github Actions를 사용하는 것은 매우 쉽습니다.\n기본적으로 세 가지가 필요합니다.\n\nPersonal access token 이 없다면 생성\nGithub Action 만들기\n리포지토리 설정에서 Github 페이지 섹션을 확인\n\n아래와 같이 순서대로 하면 됩니다.\n1. Personal access token\n동일한 리포지토리에 사이트를 게시하는 경우 해당 단계를 따를 필요가 없습니다.\n그러나 여전히 GITHUB_TOKEN 이 자동으로 전달되게 해야 합니다. \n- 토큰을 생성합니다.\n여기를 클릭 하거나,\ngithub 페이지 오른쪽 상단 아바타 &gt; Settings &gt; Developer Settings &gt; Personal access tokens &gt; Tokens(classic) &gt; Generate new Token(classic) 으로 이동합니다.\n이름과 유효기간을 정하고, Select scopes 에서 public_repo 권한을 부여합니다.\nGenerate token 을 클릭하면 token 이 나오는데, 잘 복사해둡니다.\n- 토큰을 환경변수에 저장\n리포지토리로 이동하여 상단의 Settings &gt; Environments &gt; New Environment 를 클릭합니다.\nenvironment 이름을 적은 다음 나오는 페이지에서 Environment secrets &gt; add secret 를 클릭합니다.\nName 은 TOKEN, Secret 에는 위에서 생성한 token값을 붙여넣습니다.\n\n2. Github Action 만들기\n- 만들기\n리포지토리 상단의 Actions &gt; New workflow &gt; set up a workflow yourself → 를 클릭합니다.\n아래의 내용을 붙여넣습니다.\nname: Zola on GitHub Pages\n\non: \n push:\n  branches:\n   - main\n\njobs:\n  build:\n    name: Publish site\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout main\n      uses: actions/checkout@v3.0.0\n    - name: Build and deploy\n      uses: shalzz/zola-deploy-action@v0.17.2\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\n작업은 선택한 분기에 대해서만 실행되므로, branch 이름이 main 이 아니라면 master 또는 다른 이름으로 수정합니다.\n- 권한수정\n리포지토리 상단의 setting &gt; actions &gt; general 을 클릭합니다.\n아래쪽의 workflow permission 에서 Read and write permission 선택합니다.\n\n3. Github 페이지 섹션을 확인\n리포지토리 상단의 setting &gt; Pages 를 클릭합니다.\nBuild and deployment 에서 Branch 가 gh-pages 로 설정되어 있고, 디렉토리가 /(root) 인지 확인합니다. \n","id":"https://hwjskt.github.io/posts/post-2/","title":"blog Deployment using Github Pages"},"https://hwjskt.github.io/rust/":{"body":"\nNote: 이 책의 판본은 No Starch Press에서 인쇄 및 전자책 형식으로 제공되는 The Rust Programming Language와 동일합니다.\n\nRust에 대한 소개서인 The Rust Programming Language에 오신 것을 환영합니다. Rust 프로그래밍 언어는 더 빠르고 안정적인 소프트웨어를 작성하는 데 도움이 됩니다.\nHigh-level ergonomics과 low-level control는 프로그래밍 언어 디자인에서 종종 상충됩니다. Rust는 그 충돌에 도전합니다. Rust는 강력한 기술 역량과 훌륭한 개발자 경험 사이의 균형을 통해, 전통적인 갈등없이 low-level control(예: 메모리 사용)을 할 수 있는 옵셥을 제공합니다.\n러스트는 누구를 위한 것인가\nRust는 다양한 이유로 많은 사람들에게 이상적입니다. 가장 중요한 몇 가지 그룹을 살펴보겠습니다.\n- 개발자 팀\nRust는 다양한 수준의 시스템 프로그래밍 지식을 가진 대규모 개발자 팀 간의 협업을 위한 생산적인 도구임이 입증되었습니다. 저수준 코드는 대부분의 다른 언어에서 숙련된 개발자의 광범위한 테스트와 신중한 코드 검토를 통해서만 발견할 수 있는 다양한 미묘한 버그에 취약합니다. Rust에서 컴파일러는 동시성 버그를 포함하여 이러한 애매한 버그가 있는 코드를 컴파일하는 것을 거부함으로써 게이트키퍼 역할을 합니다. 컴파일러와 함께 작업함으로써 팀은 버그를 추적하는 대신 프로그램의 논리에 집중하는 데 시간을 할애할 수 있습니다.\nRust는 또한 시스템 프로그래밍 세계에 최신 개발자 도구를 제공합니다.\n포함된 종속성 관리자 및 빌드 도구인 Cargo는 Rust 생태계 전체에서 종속성을 쉽고 일관성 있게 추가, 컴파일 및 관리합니다.\nRustfmt 서식 도구는 개발자 간에 일관된 코딩 스타일을 보장합니다.\nRust Language Server는 코드 완성 및 인라인 오류 메시지를 위한 통합 개발 환경(IDE) 통합을 지원합니다.\nRust 생태계에서 이러한 도구와 다른 도구를 사용함으로써 개발자는 시스템 수준 코드를 작성하는 동안 생산성을 높일 수 있습니다.\n- 학생\nRust는 학생들과 시스템 개념에 대해 배우는 데 관심이 있는 사람들을 위한 것입니다. Rust를 사용하여 많은 사람들이 운영 체제 개발과 같은 주제에 대해 배웠습니다. 커뮤니티는 학생들을 매우 환영하며 기꺼이 학생들의 질문에 답변해 드립니다. 이 책과 같은 노력을 통해 Rust 팀은 더 많은 사람들, 특히 프로그래밍을 처음 접하는 사람들이 시스템 개념에 더 쉽게 접근할 수 있기를 원합니다.\n- 기업\n크고 작은 수백 개의 회사가 명령줄 도구(command line tools), 웹 서비스, DevOps 도구, 임베디드 장치, 오디오 및 비디오 분석 및 트랜스코딩, 암호 화폐, 생물 정보학, 검색 엔진, 사물 인터넷 응용 프로그램, 기계 학습, 심지어 Firefox 웹 브라우저의 주요 부분까지 다양한 작업을 위한 프로덕션에서 Rust를 사용합니다. \n- 오픈 소스 개발자\nRust는 Rust 프로그래밍 언어, 커뮤니티, 개발자 도구 및 라이브러리를 구축하려는 사람들을 위한 것입니다. 우리는 당신이 Rust 언어에 기여하기를 바랍니다.\n- 속도와 안정성을 중시하는 사람들\nRust는 언어의 속도와 안정성을 갈망하는 사람들을 위한 것입니다.\n속도란 Rust 코드가 얼마나 빨리 실행될 수 있는지와 Rust가 프로그램을 작성할 수 있는 속도를 모두 의미합니다.\nRust 컴파일러의 검사는 기능 추가 및 리팩토링을 통해 안정성을 보장합니다. 이는 개발자가 종종 수정을 두려워하는 이러한 검사가 없는 언어의 취약한 레거시 코드와 대조됩니다. 비용이 들지 않는 추상화, 수동으로 작성된 코드만큼 빠르게 하위 수준 코드로 컴파일되는 상위 수준 기능을 위해 노력함으로써 Rust는 안전한 코드도 빠른 코드로 만들기 위해 노력합니다.\n- 다른사람들\nRust 언어는 다른 많은 사용자도 지원하기를 희망합니다. 여기에 언급된 사람들은 단지 가장 큰 이해관계자 중 일부일 뿐입니다. 전반적으로 Rust의 가장 큰 야망은 안전성과 생산성, 속도 및 인체 공학을 제공함으로써 프로그래머가 수십 년 동안 받아들인 장단점을 제거하는 것입니다. Rust를 사용해 보고 선택이 적합한지 확인하세요.\n이 책의 대상\n이 책은 당신이 다른 프로그래밍 언어로 코드를 작성했다고 가정하지만 어떤 언어인지에 대한 가정은 하지 않습니다. 우리는 다양한 프로그래밍 배경을 가진 사람들이 자료에 광범위하게 액세스할 수 있도록 노력했습니다. 우리는 프로그래밍이 무엇인지 또는 프로그래밍에 대해 생각하는 방법에 대해 이야기하는 데 많은 시간을 할애하지 않습니다. 프로그래밍을 처음 접하는 경우 프로그래밍에 대한 소개를 구체적으로 제공하는 책을 읽는 것이 좋습니다.\n이 책을 사용하는 방법\n일반적으로 이 책은 앞에서 뒤로 순서대로 읽는다고 가정합니다. 이후 장에서는 이전 장의 개념을 기반으로 하며 이전 장에서는 특정 주제에 대해 자세히 다루지 않을 수 있지만 이후 장에서 해당 주제를 다시 다룰 것입니다.\n이 책에는 개념 장과 프로젝트 장이라는 두 종류의 장을 볼 수 있습니다. 개념 장에서는 Rust의 한 측면에 대해 배우게 될 것입니다. 프로젝트 장에서는 지금까지 배운 내용을 적용하여 함께 작은 프로그램을 만들 것입니다. 2, 12, 20장은 프로젝트 장입니다. 나머지는 개념 장입니다.\n1장에서는 Rust를 설치하는 방법과 \"Hello, world!\"를 출력하는 프로그램을 작성하는 방법을 설명합니다. 그리고 Rust의 패키지 관리자이자 빌드 도구인 Cargo를 사용하는 방법을 설명합니다.\n2장은 숫자 추측 게임을 구축하면서 Rust로 프로그램을 작성하는 방법에 대한 실습 소개입니다. 여기서는 높은 수준의 개념을 다루고 이후 장에서 추가 세부 정보를 제공합니다. 당장 손을 더럽히고 싶다면 챕터 2가 적합합니다.\n3장에서는 다른 프로그래밍 언어와 유사한 Rust 기능을 다룹니다.\n4장에서는 Rust의 소유권 시스템(ownership system)에 대해 알아봅니다. 다음으로 넘어가기 전에 모든 세부 사항을 배우는 것을 선호하는 특히 세심한 학습자라면 2장을 건너뛰고 바로 3장을 본 다음, 배운 세부사항을 적용하고 싶을 때 2장으로 돌아가는 것이 좋습니다.\n5장에서는 구조체(structs)와 메서드(methods)에 대해 설명합니다.\n6장에서는 열거형(enums), 일치식(match expressions) 및 if let 제어 흐름 구성에 대해 설명합니다. Rust에서 사용자 정의 유형을 만들기 위해 구조체와 열거형을 사용할 것입니다.\n7장에서는 Rust의 모듈 시스템과 코드 구성을 위한 privacy rules 및 공용 API(Application Programming Interface)에 대해 배웁니다.\n8장에서는 벡터(vectors), 문자열(strings) 및 해시맵(hash maps)과 같이 표준 라이브러리가 제공하는 몇 가지 일반적인 컬렉션 데이터 구조에 대해 설명합니다.\n9장은 Rust의 오류 처리 철학과 기술을 탐구합니다.\n10장에서는 여러 유형에 적용되는 코드를 정의할 수 있는 기능을 제공하는 제네릭(generics), 특성(traits) 및 수명(lifetimes)을 파헤칩니다.\n11장은 테스트에 관한 것입니다. 테스트는 Rust의 안전 보장이 있더라도 프로그램의 논리가 올바른지 확인하는 데 필요합니다.\n12장에서는 파일 내에서 텍스트를 검색하는 grep 명령줄 도구(command line tool)의 일부 기능 구현을 직접 구축할 것입니다. 이를 위해 이전 장에서 논의한 많은 개념을 사용할 것입니다.\n13장에서는 함수형 프로그래밍 언어에서 파생된 Rust의 기능인 클로저와 이터레이터를 살펴봅니다.\n14장에서는 Cargo를 더 깊이 살펴보고 다른 사람들과 라이브러리를 공유하는 모범 사례에 대해 이야기할 것입니다.\n15장에서는 표준 라이브러리가 제공하는 스마트 포인터와 기능을 가능하게 하는 특성에 대해 설명합니다.\n16장에서 우리는 동시성 프로그래밍의 다양한 모델을 살펴보고 Rust가 두려움 없이 여러 스레드에서 프로그래밍하는 데 어떻게 도움이 되는지 이야기할 것입니다.\n17장에서는 Rust 관용구가 여러분에게 친숙한 객체 지향 프로그래밍 원칙과 어떻게 비교되는지 살펴봅니다.\n18장은 Rust 프로그램 전체에서 아이디어를 표현하는 강력한 방법인 패턴(patterns)과 패턴 일치(pattern matching)에 대한 참조입니다.\n19장에는 unsafe Rust, 매크로(macros) 및 수명(lifetimes), 특성(traits), 유형(types), 함수(functions) 및 클로저(closures) 를 포함하여 관심을 가질만한 고급 주제의 부페가 포함되어 있습니다.\n20장에서는 저수준의 다중 스레드 웹 서버를 구현하는 프로젝트를 완료합니다!\n마지막으로 일부 부록에는 참조와 유사한 형식으로 언어에 대한 유용한 정보가 포함되어 있습니다.\n부록 A는 Rust의 키워드를 다루고, 부록 B는 Rust의 연산자와 기호를 다루고, 부록 C는 표준 라이브러리에서 제공하는 파생 특성을 다루고, 부록 D는 몇 가지 유용한 개발 도구를 다루고, 부록 E는 Rust 에디션을 설명합니다. 부록 F에서 책의 번역본을 찾을 수 있으며 부록 G에서는 Rust가 어떻게 만들어지고 nightly Rust가 무엇인지 다룰 것입니다.\n이 책을 읽는 데 잘못된 방법은 없습니다. 건너뛰고 싶다면 계속 읽으세요! 혼동이 발생하면 이전 장으로 다시 이동해야 할 수도 있습니다. 그러나 당신에게 효과가 있는 것은 무엇이든 하십시오.\nRust를 배우는 과정에서 중요한 부분은 컴파일러가 표시하는 오류 메시지를 읽는 방법을 배우는 것입니다. 이러한 메시지는 작업 코드로 안내할 것입니다. 따라서 각 상황에서 컴파일러가 표시하는 오류 메시지와 함께 컴파일되지 않는 많은 예제를 제공할 것입니다.\n임의의 예제를 입력하고 실행하면 컴파일되지 않을 수 있습니다! 실행하려는 예제가 오류인지 확인하려면 주변 텍스트를 읽어보면 됩니다. Ferris는 또한 작동하지 않는 코드를 구별하는 데 도움이 됩니다.\nFerris의미\n물음표가 있는 Ferris이 코드는 컴파일되지 않습니다!\n손을 내밀고 있는 페리스이 코드 패닉!\n한쪽 집게발을 들고 어깨를 으쓱하는 Ferris이 코드는 원하는 동작을 생성하지 않습니다.\n\n대부분의 경우 컴파일되지 않는 코드의 올바른 버전으로 안내해 드립니다.\n소스 코드\n이 책이 생성된 소스 파일은 GitHub에서 찾을 수 있습니다.\n","id":"https://hwjskt.github.io/rust/","title":"Introduction"},"https://hwjskt.github.io/rust/chapter1/":{"body":"\nRust 여행을 시작합시다! 배울 것이 많지만 모든 여정은 어딘가에 시작점이 있습니다. 이 장에서는 다음에 대해 논의합니다.\n\nLinux, macOS, Windows에 Rust 설치하기\nHello, world!를 출력하는 프로그램 작성하기\nRust의 패키지 관리자이자 빌드 시스템인 cargo 사용하기\n\n","id":"https://hwjskt.github.io/rust/chapter1/","title":"Getting Started"},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"body":"첫 번째 단계는 Rust를 설치하는 것입니다. Rust 버전 및 관련 도구를 관리하기 위한 명령줄 도구인 rustup을 통해 Rust를 다운로드합니다. 다운로드하려면 인터넷 연결이 필요합니다.\n\nNote: Rustup을 사용하지 않으려면 다른 Rust 설치 방법 페이지에서 더 많은 옵션을 확인하세요.\n\n다음 단계는 Rust 컴파일러의 안정적인 최신 버전을 설치합니다. Rust의 안정성은 컴파일하는 책의 모든 예제가 최신 Rust 버전으로 계속 컴파일되도록 보장합니다. 즉, 이 단계를 사용하여 설치한 더 새롭고 안정적인 버전의 Rust는 이 책의 내용과 예상대로 작동해야 합니다. Rust는 종종 오류 메시지와 경고를 개선하기 때문에 결과가 버전마다 약간 다를 수 있습니다. \n\n명령줄(Command Line) 표기법\n이 장과 책 전반에 걸쳐 터미널에서 사용되는 몇 가지 명령을 보여드리겠습니다.\n터미널에 입력해야 하는 줄은 모두 $로 시작합니다. $ 문자를 입력할 필요가 없습니다. 각 명령의 시작을 나타내기 위해 표시되는 명령줄 프롬프트입니다.\n$로 시작하지 않는 행은 일반적으로 이전 명령의 결과물을 표시합니다.\n또한 PowerShell 관련 예제에서는 $ 대신 &gt;를 사용합니다.\n\nrustup을 Linux 또는 macOS에 설치\nLinux 또는 macOS를 사용하는 경우 터미널을 열고 다음 명령을 입력합니다:\n$ curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh\n이 명령은 스크립트를 다운로드하고 rustup 안정적인 최신 버전의 Rust를 설치하는 도구 설치를 시작합니다. 비밀번호를 입력하라는 메시지가 표시될 수 있습니다. 설치에 성공하면 다음 줄이 나타납니다:\nRust is installed now. Great!\n또한 Rust가 컴파일된 출력을 하나의 파일로 결합하는 데 사용하는 프로그램인 링커(linker)가 필요합니다. 이미 가지고 있을 가능성이 높습니다. 링커 오류가 발생하면 일반적으로 링커를 포함하는 C 컴파일러를 설치해야 합니다. 일부 일반적인 Rust 패키지는 C 코드에 의존하고 C 컴파일러가 필요하기 때문에 A C 컴파일러도 유용합니다.\nmacOS에서는 다음을 실행하여 C 컴파일러를 얻을 수 있습니다:\n$ xcode-select --install\nLinux 사용자는 일반적으로 배포 문서에 따라 GCC 또는 Clang을 설치해야 합니다. 예를 들어 Ubuntu를 사용하는 경우 build-essential 패키지를 설치할 수 있습니다.\nrustup을 Windows에 설치\nWindows에서는 https://www.rust-lang.org/tools/install 로 이동하여 Rust 설치 지침을 따르세요. 설치 중 특정 시점에 Visual Studio 2013 이상용 MSVC 빌드 도구도 필요하다는 메시지가 표시됩니다.\n빌드 도구를 얻으려면 Visual Studio 2022를 설치해야 합니다. 설치할 워크로드를 물으면 다음을 포함합니다:\n\n-“Desktop Development with C++”\n-The Windows 10 or 11 SDK\n-선택한 다른 언어 팩과 함께 영어 언어 팩 구성 요소\n\n이 책의 나머지 부분에서는 cmd.exe 와 PowerShell 모두에서 작동하는 명령을 사용합니다. 구체적인 차이점이 있는 경우 어떤 것을 사용해야 하는지 설명하겠습니다.\n문제 해결\nRust가 올바르게 설치되었는지 확인하려면 셸을 열고 다음 줄을 입력하십시오:\n$ rustc --version\n릴리스된 최신 안정 버전의 버전 번호, 커밋 해시 및 커밋 날짜가 다음 형식으로 표시되어야 합니다:\nrustc x.y.z (abcabcabc yyyy-mm-dd)\n이 정보가 보이면 Rust를 성공적으로 설치한 것입니다!\n이 정보가 보이지 않으면 Rust가 %PATH% 시스템 변수에 있는지 다음과 같이 확인하십시오.\nWindows CMD에서 다음을 사용합니다:\n&gt; echo %PATH%\nPowerShell에서 다음을 사용합니다:\n&gt; echo $env:Path\nLinux 및 macOS에서는 다음을 사용합니다:\n$ echo $PATH\n모든 것이 정확한데 Rust가 여전히 작동하지 않는다면 도움을 받을 수 있는 여러 곳이 있습니다. 커뮤니티 페이지 에서 다른 Rustacean(우리가 스스로를 부르는 별명)과 연락하는 방법을 알아보세요.\n업데이트 및 제거\nrustup을 통해 Rust를 설치하면 새 버전으로 업데이트하는 것이 쉽습니다. 셸에서 다음 업데이트 스크립트를 실행합니다:\n$ rustup update\nRust 및 rustup을 제거하려면 셸에서 다음 제거 스크립트를 실행합니다:\n$ rustup self uninstall\n로컬 문서\nRust 설치에는 문서의 로컬 사본도 포함되어 있어 오프라인에서 읽을 수 있습니다. rustup doc을 실행하여 브라우저에서 로컬 문서를 엽니다.\n타입(type)이나 함수(function)가 표준 라이브러리에서 제공되었는데 그것이 무엇을 하는지 또는 어떻게 사용하는지 잘 모를 때마다 API(Application Programming Interface) 문서를 사용하여 알아보세요!  \n","id":"https://hwjskt.github.io/rust/chapter1/1-installation/","title":"Installation"},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"body":"요약\n\n파일 형식은 카멜_형식 을 따른다.\nmain fn: 프로그램에서 처음 실행되는 함수\nindent 는 4 space 이다. tab이 아니다\n함수뒤에 !가 붙으면 Rust macro를 의미한다\n코드의 끝에는 semicolon (;) 를 붙여야한다.\ncompile하기 :  $ rustc main.rs\n파일실행하기 : $ ./main  (윈도우는  .\\main.exe)\n\nHello, World!\n이제 Rust를 설치했으므로 첫 번째 Rust 프로그램을 작성할 차례입니다. 새로운 언어를 배울 때 텍스트를 Hello, world!화면에 출력하는 작은 프로그램을 작성하는 것이 전통적이므로 여기서도 똑같이 할 것입니다!\n\n참고: 이 책은 명령줄에 대한 기본적인 지식이 있다고 가정합니다. Rust는 편집이나 도구 또는 코드가 있는 위치에 대해 특정한 요구를 하지 않으므로 명령줄 대신 통합 개발 환경(IDE)을 선호하는 경우 선호하는 IDE를 자유롭게 사용하세요. 이제 많은 IDE가 어느 정도 Rust를 지원합니다. 자세한 내용은 IDE 설명서를 확인하십시오. Rust 팀은 rust-analyzer를 통해서 훙륭한 IDE를 지원하는데 집중하고 있습니다. 자세한 내용은 부록 D 를 참조하십시오.\n\n프로젝트 디렉토리 생성\nRust 코드를 저장할 디렉토리를 만드는 것으로 시작합니다. 당신의 코드가 어디에 있는지는 Rust에게 중요하지 않지만 이 책의 연습과 프로젝트를 위해 우리는 당신의 홈 디렉토리에 프로젝트 디렉토리를 만들고 거기에 모든 프로젝트를 보관할 것을 제안합니다.\n터미널을 열고 다음 명령을 입력하여 projects 디렉토리를 만들고, projects 디렉토리 내에 \"Hello, world!\" 프로젝트 디렉토리인 hello_world 디렉토리를 만듭니다.\n\nWindows의 Linux, macOS 및 PowerShell의 경우 다음을 입력합니다.\n$ mkdir ~/projects\n$ cd ~/projects\n$ mkdir hello_world\n$ cd hello_world\n\n\nWindows CMD의 경우 다음을 입력합니다.\n&gt; mkdir \"%USERPROFILE%\\projects\"\n&gt; cd /d \"%USERPROFILE%\\projects\"\n&gt; mkdir hello_world\n&gt; cd hello_world\n\nRust 프로그램 작성 및 실행\n다음으로 새 소스 파일을 만들고 이름을 main.rs 로 지정합니다. Rust 파일은 항상 .rs 확장자로 끝납니다. 파일 이름에 두 개 이상의 단어를 사용하는 경우 규칙은 밑줄을 사용하여 구분하는 것입니다. 예를 들어 helloworld.rs 대신 hello_world.rs 를 사용합니다.\n이제 방금 만든 main.rs 파일을 열고 Listing 1-1의 코드를 입력합니다.\n\n파일명: main.rs\nfn main() {\n    println!(\"Hello, world!\");\n}\n\n목록 1-1: Hello, world! 를 프린트하는 프로그램\n\n파일을 저장하고 ~/projects/hello_world 디렉터리의 터미널 창으로 돌아갑니다. Linux 또는 macOS에서 다음 명령을 입력하여 파일을 컴파일하고 실행합니다.\n$ rustc main.rs\n$ ./main\nHello, world!\n\n\nWindows에서는 ./main 대신 .\\main.exe 명령을 입력합니다.\n&gt; rustc main.rs\n&gt; .\\main.exe\nHello, world!\n\n\n운영 체제에 관계없이 Hello, world! 문자열이 터미널에 프린트되어야 합니다. 이 출력이 표시되지 않으면 설치 섹션의 문제해결 부분을 다시 참조하여 도움을 받으세요.\n`Hello, world! 가 프린트 되었다면 축하합니다! 공식적으로 Rust 프로그램을 작성했습니다. 그것은 당신을 Rust 프로그래머로 만들어줍니다. 환영합니다!\nRust 프로그램 분석\n이 \"Hello, world!\"프로그램을 자세히 검토해 봅시다.  퍼즐의 첫 번째 조각은 다음과 같습니다.\nfn main() {\n\n}\n\n이 줄은 main 이라는 함수를 정의합니다. 이 main 의 기능은 특별합니다. 항상 모든 실행 가능한 Rust 프로그램에서 실행되는 첫 번째 코드입니다. 여기서 첫 번째 줄은 매개변수가 없고 아무 것도 반환하지 않는 main 이라는 이름의 함수를 선언합니다. 매개변수가 있으면  ()괄호 안에 들어갑니다.\n함수 본문은 {} 로 감싸져 있습니다. Rust는 모든 함수 본문 주위에 중괄호가 필요합니다. 여는 중괄호를 함수 선언과 같은 줄에 배치하고, 그 사이에 공백을 하나 추가하는 것이 좋습니다.\n\n참고: Rust 프로젝트 전체에서 표준 스타일을 고수하려면, 코드를 특정 스타일로 포맷하기 위해 호출되는 자동 포맷터 도구인 rustfmt를 사용할 수 있습니다. (자세한 내용은 부록 D rustfmt 참조 ). Rust 팀은 이 도구를 rustc 처럼 표준 Rust 배포판에 포함시켰으므로 컴퓨터에 이미 설치되어 있어야 합니다!\n\n\nmain 함수 본문에는 다음 코드가 포함됩니다.\n    println!(\"Hello, world!\");\n\n이 줄은 이 작은 프로그램의 모든 작업을 수행합니다. 화면에 텍스트를 인쇄합니다. 여기에서 주목해야 할 네 가지 중요한 세부 사항이 있습니다.\n첫째, Rust 스타일은 탭이 아닌 네 개의 공백으로 들여쓰기하는 것입니다.\n둘째, println! 는 Rust 매크로를 호출합니다. 만약 함수를 호출했다면 println(!없이 )를 입력합니다. 19장에서 Rust 매크로에 대해 더 자세히 논의할 것입니다. 지금은 !  를 사용함으로써 일반적인 함수 대신 매크로를 호출하고, 매크로가 항상 함수와 동일한 규칙을 따르지 않는다는 것을 의미한다는 것을 알아야 합니다.\n셋째, \"Hello, world!\" 문자열이 보입니다. 이 문자열을 println!의 인수로 전달하면 문자열이 화면에 출력됩니다.\n넷째, 세미콜론( ;)으로 행을 종료합니다. 이는 이 표현(expression)이 끝났고 다음 표현을 시작할 준비가 되었음을 나타냅니다. 대부분의 Rust 코드 줄은 세미콜론으로 끝납니다.\n컴파일과 실행은 별도의 단계입니다.\n방금 새로 만든 프로그램을 실행했으므로 프로세스의 각 단계를 살펴보겠습니다.\nRust 프로그램을 실행하기 전에 다음과 같이 rustc명령을 입력하고 소스 파일의 이름을 전달합니다. 그러면 Rust 컴파일러가 컴파일합니다. \n$ rustc main.rs\n\nC 또는 C++ 배경 지식이 있는 경우 이것이 gcc 또는 clang와 유사하다는 것을 알 수 있습니다. 성공적으로 컴파일한 후 Rust는 바이너리 실행 파일을 생성합니다.\n\nLinux, macOS 및 Windows의 PowerShell에서는 셸에 ls 명령을 입력하여 실행 파일을 볼 수 있습니다.\n$ ls\n&gt; main  main.rs\n\nLinux 및 macOS에서는 두 개의 파일이 표시됩니다. \n\nWindows에서 PowerShell을 사용하면 CMD를 사용하여 동일한 세 개의 파일을 확인할 수 있습니다. Windows에서 CMD를 사용하면 다음을 입력합니다.\n&gt; dir /B %= the /B option says to only show the file names =%\nmain.exe\nmain.pdb\nmain.rs\n\n여기에는 확장자가 .rs 인 소스 코드 파일, 실행 파일( Windows에서는 main.exe, 다른 모든 플랫폼에서는 main), Windows를 사용하는 경우 확장자가 .pdb 인 디버깅 정보가 포함된 파일이 표시됩니다. \n\n여기에서 다음과 같이 main 또는 main.exe 파일을 실행합니다.\n$ ./main (Linux 및 macOS)\n&gt; .\\main.exe (Windows)\n\nmain.rs 가 \"Hello, world!\"프로그램인 경우,  Hello, world! 가 터미널에 인쇄됩니다.\n\nRuby, Python 또는 JavaScript와 같은 동적 언어에 더 익숙한 경우 별도의 단계로 프로그램을 컴파일하고 실행하는 데 익숙하지 않을 수 있습니다.\nRust는 미리 컴파일된 언어입니다. 즉, 프로그램을 컴파일하고 다른 사람에게 실행 파일을 제공할 수 있으며 Rust가 설치되지 않은 상태에서도 실행할 수 있습니다. 누군가에게 .rb , .py 또는 .js 파일을 제공하는 경우 Ruby, Python 또는 JavaScript 구현이 각각 설치되어 있어야 합니다. 그러나 이러한 언어에서는 프로그램을 컴파일하고 실행하는 데 하나의 명령만 필요합니다. 언어 설계에서는 모든 것이 트레이드 오프입니다.\n\nrustc로 간단하게 컴파일하는 것은 간단한 프로그램에 적합하지만 프로젝트가 커짐에 따라 모든 옵션을 관리하고 코드를 쉽게 공유할 수 있게 만들고 싶을 것입니다. 다음으로 실제 Rust 프로그램을 작성하는 데 도움이 되는 Cargo 도구를 소개합니다.\n","id":"https://hwjskt.github.io/rust/chapter1/2-helloworld/","title":"Hello, World!"},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"body":"요약\n\n\ncargo : Rust의 build system, package manager\n\n\n$ cargo new hello_cargo 명령어를 실행하면 hello_cargo 폴더만들고, 그안에 git 도 설치됩니다. 실행하면 다음과 같은 파일 구조가 만들어집니다.\n\n\n├── .git\n├── .gitignore\n├── Cargo.toml : config 파일\n└── src\n    └── main.rs : 우리가 만드는 코드\n\n\n\n처음에 cargo를  안썼어도, 위와같은 구조만 만들면 cargo 사용할 수 있습니다.\n\n\n$ cargo build 를 사용하면 다음과 같은 구조가 만들어집니다.\n\n\n..\n├── Cargo.lock : Cargo가 dependencies 의 version 관리하는 파일\n├── Cargo.toml\n├── src\n│&nbsp;&nbsp; └── main.rs\n└── target\n    └── debug\n        └── hello_cargo  (여기 실행파일이 있다)\n\n\n\n\n$ cargo run :  코드를 build 하는 동시에 실행시킨다. (build 보다 더 많이 사용)\n\n\n$ cargo check : compile되는지 확인만하고, 실행은 안한다.\n\n\n$ cargo build --release\n\nrelease 용으로 compile (그냥 build 와 다르게 compile이 오래걸리는 대신, 실행이 빠르다)\n./target/release 폴더에 저장\n\n\n\nHello, Cargo!\nCargo는 Rust의 빌드 시스템이자 패키지 관리자입니다. 대부분의 Rustaceans는 이 도구를 사용하여 Rust 프로젝트를 관리합니다. 왜냐하면 Cargo가 코드 빌드, 코드가 의존하는 라이브러리 다운로드, 해당 라이브러리 빌드와 같은 많은 작업을 처리하기 때문입니다. (코드에 종속성(dependency)이 필요한 라이브러리를 호출합니다.)\n우리가 지금까지 작성한 것과 같은 가장 단순한 Rust 프로그램은 종속성이 없습니다. Cargo로 \"Hello, world!\" 프로젝트를 만들면 코드 빌드를 처리하는 Cargo의 일부만 사용합니다. 더 복잡한 Rust 프로그램을 작성하면서 종속성을 추가하게 되고 Cargo를 사용하여 프로젝트를 시작하면 종속성을 추가하는 것이 훨씬 쉬워질 것입니다.\n대부분의 Rust 프로젝트가 Cargo를 사용하기 때문에 이 책의 나머지 부분에서도 Cargo를 사용하고 있다고 가정합니다. Cargo는 설치 섹션에서 논의된 공식 설치 프로그램을 사용한 경우 Rust와 함께 설치됩니다. 다른 방법으로 Rust를 설치했다면, 터미널에 다음을 입력하여 Cargo가 설치되어 있는지 확인하세요:\n\n$ cargo --version\n\n버전 번호가 보이면 가지고 있는 것입니다! command not found와 같은 오류가 표시되면 문서를 참조해서 Cargo를 별도로 설치하는 방법을 선택하세요. \nCargo로 프로젝트 만들기\nCargo를 사용하여 새 프로젝트를 생성하고 원래의 \"Hello, world!\"프로젝트와 어떻게 다른지 살펴보겠습니다. 프로젝트 디렉토리(또는 코드를 저장하기로 결정한 위치) 로 다시 이동합니다. 그런 다음 운영 체제에서 다음을 실행합니다.\n$ cargo new hello_cargo\n$ cd hello_cargo\n\n첫 번째 명령은 hello_cargo 라는 새 디렉터리와 프로젝트를 만듭니다. 우리는 프로젝트 이름을 hello_cargo 로 지정 했고, Cargo는 같은 이름의 디렉토리에 파일을 생성합니다.\n\nhello_cargo 디렉토리 로 이동하여 파일을 확인해보십시오. Cargo가 우리를 위해 두 개의 파일과 하나의 디렉토리를 생성한 것을 볼 수 있습니다: \n├── .git\n│&nbsp;&nbsp; ├── ...\n├── .gitignore\n├── Cargo.toml\n└── src\n    └── main.rs\n\n또한 .gitignore 파일과 함께 새로운 Git 리포지토리를 초기화했습니다. 기존 Git 리포지토리 내에서 cargo new실행하는 경우 Git 파일이 생성되지 않습니다. cargo new --vcs=git 를 사용하여 이 동작을 재정의할 수 있습니다 \n\n참고: Git은 일반적인 버전 제어 시스템입니다.  --vcs플래그 를 사용하여 cargo new 를 바꿀 수 있습니다. 그러면 다른 버전 제어 시스템을 사용하거나, 버전 제어 시스템을 사용하지 않도록 변경할 수 있습니다. 사용 가능한 옵션을 보려면 cargo new --help실행하십시오.\n\n\n텍스트 편집기에서 Cargo.toml 을 엽니다. 목록 1-2의 코드와 유사해야 합니다.\n파일 이름: Cargo.toml\n[package]\nname = \"hello_cargo\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\n\nListing 1-2: cargo new에 의해 생성된 Cargo.toml 의 내용\n이 파일은 Cargo의 구성 형식인 TOML ( Tom's Obvious, Minimal Language ) 형식입니다.\n첫 번째 줄에 있는  [package] 는 다음 문이 패키지를 구성하고 있음을 나타내는 섹션 머리글입니. 이 파일에 더 많은 정보를 추가하게되면, 다른 섹션도 추가할 것입니다.\n다음 세 줄은 Cargo가 프로그램을 컴파일하는 데 필요한 구성 정보(사용할 Rust의 name, version 및 edition)를 설정합니다. 부록 E에서 edition 키 에 대해 이야기하겠습니다.\n마지막 줄의 [dependencies] 는 프로젝트의 종속성을 나열하는 섹션의 시작 부분입니다. Rust에서는 코드 패키지를 크레이트(crates) 라고 합니다. 이 프로젝트에는 다른 크레이트가 필요하지 않지만, 2장의 첫 번째 프로젝트에는 필요할 것이므로, 이 [dependencies] 섹션을 사용할 것입니다.\n\n이제 src/main.rs를 열고 살펴보십시오.\n파일 이름: src/main.rs\nfn main() {\n    println!(\"Hello, world!\");\n}\n\n목록 1-1에서 작성한 것과 같은 프로그램입니다. 이전에 만들었던 프로그램과 Cargo가 생성한 프로젝트의 차이점은 Cargo가 src 디렉토리에 코드를 배치하고 최상위 디렉토리에 Cargo.toml 이라는 이름의 config 파일이 있다는 것입니다.\n├── Cargo.toml\n└── src\n    └── main.rs\n\nCargo는 소스 파일이 src 디렉토리 안에 있을 것으로 예상합니다. 최상위 프로젝트 디렉토리는 README 파일, 라이센스 정보, 구성 파일 및 코드와 관련되지 않은 모든 항목을 위한 것입니다. Cargo를 사용하면 프로젝트를 정리하는 데 도움이 됩니다. 모든 것은 그것을 위한 장소가 있고, 모든 것이 제자리에 있습니다.\n\n이전 장의 \"Hello, world!\"에서 했던 것처럼 Cargo를 사용하지 않고 프로젝트를 시작한 경우, 프로젝트에서 Cargo를 사용하는 프로젝트로 변환할 수 있습니다. 프로젝트 코드를 src 디렉토리로 이동하고 적절한 Cargo.toml 파일을 생성합니다.\nCargo 프로젝트 구축 및 실행\n이제 Cargo 로 \"Hello, world!\"를 빌드하고 실행할 때 무엇이 다른지 살펴보겠습니다. hello_cargo 디렉터리에서 다음 명령을 입력하여 프로젝트를 빌드합니다.\n$ cargo build\n   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.85 secs\n\n이 명령은 현재 디렉터리가 아닌 target/debug/hello_cargo (Windows의 경우 target\\debug\\hello_cargo.exe ) 에 실행 파일을 생성합니다. 기본 빌드가 디버그 빌드이기 때문에 Cargo는 debug 라는 디렉토리에 바이너리를 넣습니다. \n├── Cargo.lock\n├── Cargo.toml\n├── src\n│&nbsp;&nbsp; └── main.rs\n└── target\n    └── debug\n        ├── build\n        ├── deps\n        ├── examples\n        ├── hello_cargo  (여기 실행파일이 있다)\n        ├── hello_cargo.d\n        └── incremental\n\n\n다음 명령으로 실행 파일을 실행할 수 있습니다.\n$ ./target/debug/hello_cargo # or .\\target\\debug\\hello_cargo.exe on Windows\nHello, world!\n\n모든 것이 잘 되었으면 터미널에 Hello, world! 가 인쇄되어야 합니다. 처음으로 cargo build실행하면 Cargo가 최상위 레벨에 새 파일인 Cargo.lock 을 생성하게 됩니다. 이 파일은 프로젝트의 정확한 종속성 버전을 추적합니다. 이 프로젝트에는 종속성이 없으므로 파일이 약간 희박합니다. 이 파일을 수동으로 변경할 필요가 없습니다. Cargo는 당신을 위해 내용물을 관리합니다.\n\n방금 cargo build로 프로젝트를 빌드하고, ./target/debug/hello_cargo를 사용하여 실행했습니다.  그런데 cargo run 이라는 하나의 명령어를 사용해서 코드를 컴파일한 다음 실행할 수 도 있습니다.\n$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs\n     Running `target/debug/hello_cargo`\nHello, world!\n\ncargo build 를 실행한 다음 바이너리에 대한 전체 경로를 사용하는 것보다,  cargo run 을 사용하는 것이 더 편리하므로 대부분의 개발자는 cargo run 을 사용합니다.\n이번에는 Cargo가 hello_cargo 를 컴파일 중임을 나타내는 출력이 표시되지 않았습니다. Cargo는 파일이 변경되지 않았음을 알아내서 다시 빌드하지 않고 바이너리만 실행했습니다. 소스 코드를 수정했다면 Cargo는 프로젝트를 실행하기 전에 다시 빌드했을 것이고, 다음과 같은 출력을 보았을 것입니다:\n$ cargo run\n   Compiling hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.33 secs\n     Running `target/debug/hello_cargo`\nHello, world!\n\n\nCargo는 cargo check이라는 명령도 제공합니다. 이 명령은 코드를 신속하게 검사하여 컴파일되는지 확인합니다. 하지만 실행 파일을 생성하지는 않습니다.\n$ cargo check\n   Checking hello_cargo v0.1.0 (file:///projects/hello_cargo)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32 secs\n\n실행 파일을 원하지 않는 이유는 무엇일까요?  cargo check 는 실행 파일 생성 단계를 건너뛰기 때문에 cargo build 보다 훨씬 빠릅니다. 코드를 작성하는 동안 지속적으로 작업을 확인하는 경우, cargo check를 사용하면 프로젝트가 아직 컴파일 되는지 확인하는 프로세스가 빨라집니다! 따라서 많은 Rustacean은 프로그램이 컴파일되는지 확인하기 위해 프로그램을 작성할 때 주기적으로 cargo check 을 실행합니다. 그런 다음 실행 파일을 사용할 준비가 되면 cargo build 를 실행합니다.\nCargo에 대해 지금까지 배운 내용을 요약해 보겠습니다.\n\ncargo new를 사용하여 프로젝트를 만들 수 있습니다.\ncargo build를 사용하여 프로젝트를 빌드할 수 있습니다.\ncargo run을 사용하여 한 번에 프로젝트를 빌드하고 실행할 수 있습니다.\ncargo check을 사용하여 바이너리를 생성하지 않고 오류를 확인하기 위해 프로젝트를 빌드할 수 있습니다.\nCargo는 빌드 결과를 코드와 같은 디렉토리에 저장하지 않고,  target/debug 디렉토리에 저장합니다.\n\nCargo 사용의 또 다른 이점은 작업 중인 운영 체제에 관계없이 명령이 동일하다는 것입니다. 따라서 이제부터 Linux,  macOS 대 Windows에 대한 특정 지침을 더 이상 제공하지 않습니다.\n출시를 위한 구축\n프로젝트가 최종적으로 릴리스 준비가 되면 cargo build --release를 사용하여 최적화하여 컴파일할 수 있습니다. 이 명령은 target/debug 대신 target/release 에서 실행 파일을 생성합니다.\n├── Cargo.lock\n├── Cargo.toml\n├── src\n│&nbsp;&nbsp; └── main.rs\n└── target\n    ├── debug\n    │&nbsp;&nbsp; ├── hello_cargo\n    └── release\n        └── hello_cargo (여기에 파일 생성)\n\n\n최적화는 Rust 코드를 더 빠르게 실행하게 하지만, 최적화를 켜면 프로그램을 컴파일하는 데 걸리는 시간이 길어집니다. 이것이 두 가지 다른 프로필이 있는 이유입니다. 하나는 신속하고 자주 재빌드하려는 개발용이고 다른 하나는 반복적으로 재빌드되지 않고 최대한 빠르게 실행되는 사용자에게 제공할 최종 프로그램을 빌드하기 위한 것입니다. 코드의 실행 시간을 벤치마킹하는 경우, cargo build --release 를 실행한 다음,  target/release 에서 실행 파일을 실행하고 벤치마킹해야 합니다.\n컨벤션으로서의 Cargo\n간단한 프로젝트에서는 Cargo가 단순히 rustc를 사용하는 것보다 많은 가치를 제공하지는 않습니다. 하지만 프로그램이 더 복잡해짐에 따라 Cargo는 그 가치를 입증할 것입니다. 프로그램이 여러 파일로 확장되거나 종속성이 필요하면 Cargo가 빌드를 조정하도록 하는 것이 훨씬 쉽습니다.\n이 hello_cargo프로젝트는 간단하지만 이제 남은 Rust 경력에서 사용할 실제 도구를 많이 사용합니다. 실제로 기존에 있는 프로젝트에서 작업하려면, 다음 명령을 사용하여, Git 으로 코드를 확인하고, 해당 프로젝트의 디렉터리로 변경한 다음, 빌드할 수 있습니다.\n$ git clone example.org/someproject\n$ cd someproject\n$ cargo build\n\nCargo에 대한 자세한 내용은 문서 를 확인하세요.\n요약\n당신은 이미 Rust 여행을 훌륭하게 시작했습니다! 이 장에서는 다음 방법을 배웠습니다.\n\nrustup을 사용하여 안정적인 최신 버전의 Rust를 설치합니다.\n최신 Rust 버전으로 업데이트\n로컬로 설치된 문서 열기\nrustc 를 직접 사용하여,  \"Hello, world!\"를 작성하고 실행합니다.\nCargo의 규칙을 사용하여 새 프로젝트를 생성하고 실행합니다.\n\n지금은 Rust 코드를 읽고 쓰는 데 익숙해지기 위해 보다 실질적인 프로그램을 구축할 수 있는 좋은 시간입니다. 그래서 2장에서는 추측 게임 프로그램을 만들 것입니다. Rust에서 일반적인 프로그래밍 개념이 어떻게 작동하는지 배우는 것으로 시작하려면 3장을 보고 2장으로 돌아가세요.\n","id":"https://hwjskt.github.io/rust/chapter1/3-hellocargo/","title":"Hello, Cargo!"},"https://hwjskt.github.io/rust/chapter2/":{"body":"요약\n\n\n프로젝트 생성 : cargo new 프로젝트이름\n\n\n\n표준 라이브러리를 가져오는 명령어 :\n\nuse std::라이브러리이름\nuse std::메소드이름::타입이름\n\n\n\n크레이트를 가져오는 명령어 : use 크레이트이름::트레잇이름\n\n\n크레이트 : Rust 소스 코드 파일의 모음\n\n\n트레잇 : 크레이트에 포함된 메서드(하나 또는 여러개)\n\n\n레지스트리 : Crates.io 의 데이터 사본 \n\n\nCrates.io : 사람들이 오픈 소스 Rust 프로젝트를 게시하는 곳\n\n\n\n\n\n변수생성 :\n\n\nlet 변수이름 : 변경불가능 \n\n\nlet mut 변수이름 : 변경가능\n\n\nlet 변수이름 : 타입, let mut 변수이름 : 타입 : 타입명시\n\n\nlet mut 변수이름 = String::new() : 빈 문자열 변수 생성\n\n\n\n\n변수이름은 재사용(덮어쓰기, shadowing) 가능\n\n\n\nmatch, cmp, loop, break 를 사용할 수 있다.\n\n\n\n일부 메서드는 \"결과값\"과 \"Result 타입\"을 함께 반환\n\n\nResult 타입 : 여러가지 변형(variant, 종류라고 이해하면 될듯)을 가지는 열거형(enumeration)\n\n\nResult 타입의 variant : Ok(T) 와 Err(E) \n\n\n\n\n\n\n오류해결\n\nResult 를 반환하는 메소드 뒤에 .expect를 붙인다\n메소드().expect(\"메세지\") : 메소드에서 반환하는 Result 타입의 variant가 Err 이면, 메세지 출력후 프로그램 중단\n\n\n\n추리게임 프로그래밍\n함께 실습 프로젝트를 통해 Rust에 뛰어들어 봅시다! 이 장에서는 실제 프로그램에서 사용하는 방법을 보여줌으로써 몇 가지 일반적인 Rust 개념을 소개합니다. let, match, 메서드, 관련 함수, 외부 크레이트 등에 대해 배우게 됩니다! 다음 장에서는 이러한 아이디어에 대해 자세히 살펴보겠습니다. 이 장에서는 기본 사항만 연습합니다.\n고전적인 초보자 프로그래밍 문제인 추측 게임을 구현할 것입니다. 작동 방식은 다음과 같습니다. 프로그램은 1에서 100 사이의 임의의 정수를 생성합니다. 그런 다음 플레이어에게 추측을 입력하라는 메시지가 표시됩니다. 추측이 입력되면 프로그램은 추측이 너무 낮은지 또는 너무 높은지 표시합니다. 추측이 맞으면 게임이 축하 메시지를 출력하고 종료됩니다.\n새 프로젝트 설정\n새 프로젝트를 설정하려면 1장에서 만든 프로젝트 디렉토리로 이동하고 다음과 같이 Cargo를 사용하여 새 프로젝트를 만듭니다.\n$ cargo new guessing_game\n$ cd guessing_game\n\n첫 번째 명령어인 cargo new는 프로젝트 이름( guessing_game)을 첫 번째 인수로 사용합니다. 두 번째 명령은 새 프로젝트의 디렉터리로 변경됩니다.\n\n생성된 Cargo.toml 파일을 살펴보십시오.\n파일 이름: Cargo.toml\n[package]\nname = \"guessing_game\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\n\n\n1장에서 본 것처럼 cargo new 는 \"Hello, world!\" 프로그램을 생성합니다. src/main.rs 파일을 확인해봅시다.\n파일 이름: src/main.rs\nfn main() {\n    println!(\"Hello, world!\");\n}\n\n\n이제 \"Hello, world!\"  프로그램을 cargo run 명령을 사용하여 컴파일하고 실행하십시오 .\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.50s\n     Running `target/debug/guessing_game`\nHello, world!\n\n이 run 명령은 프로젝트를 빠르게 반복해야 할 때 유용합니다. 이 게임에서 우리는 다음 반복으로 이동하기 전에 각 반복을 빠르게 테스트합니다.\nsrc/main.rs 파일을 다시 엽니다. 이제부터 이 파일에 모든 코드를 작성하게 됩니다.\n추측 처리\n추측 게임 프로그램의 첫 번째 부분은 사용자 입력을 요청하고, 해당 입력을 처리하고, 입력된 값이 예상된 형식인지 확인하는 것입니다. 시작하려면 플레이어가 추측을 입력하도록 허용합니다. 목록 2-1의 코드를 src/main.rs 에 입력합니다.\n파일 이름: src/main.rs\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&amp;mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {guess}\");\n}\n\n목록 2-1: 사용자로부터 추측을 받아 출력하는 코드\n이 코드에는 많은 정보가 포함되어 있으므로 한 줄씩 살펴보겠습니다. 사용자 입력을 얻은 다음 결과를 출력으로 인쇄하려면  io 라고 하는 입력/출력 라이브러리를 범위(scope)로 가져와야 합니다. io라이브러리는 std로 알려진 표준 라이브러리에서 가져옵니다.\nuse std::io;\n\n기본적으로 Rust는 모든 프로그램의 범위로 가져오는 표준 라이브러리에 정의된 일련의 항목을 가지고 있습니다. 이 세트를 전주곡(prelude)이라고 하며 표준 라이브러리 문서에서 그 안에 있는 모든 것을 볼 수 있습니다.\n사용하려는 유형이 전주곡(prelude)에 없으면 use명령문을 사용하여 해당 유형을 명시적으로 범위로 가져와야 합니다. std::io라이브러리를 사용하면, 사용자 입력을 수락하는 기능을 포함하여 여러 가지 유용한 기능이 제공됩니다.\n\n1장에서 본 것처럼 main함수는 프로그램의 진입점입니다.\nfn main() {\n\n구문 fn은 새 함수를 선언합니다. ()괄호는 매개변수가 없음을 나타냅니다. 중괄호({) 는 함수 본문을 시작합니다.\n\n1장에서도 배웠듯이 println!는 화면에 문자열을 출력하는 매크로입니다.\n    println!(\"Guess the number!\");\n\n    println!(\"Please input your guess.\");\n\n\n이 코드는 게임이 무엇인지 설명하고 사용자의 입력을 요청하는 프롬프트를 인쇄합니다.\n변수와 함께 값 저장\n다음으로 다음과 같이 사용자 입력을 저장할 변수를 만듭니다.\nlet mut guess = String::new();\n\n이제 프로그램이 흥미로워지고 있습니다! 이 작은 줄에서 많은 일이 벌어지고 있습니다. let문을 사용하여 변수를 만듭니다.\n\n다음은 또 다른 예입니다.\nlet apples = 5;\n\n이 줄은 apples이름의 새 변수를 만들고, 변수에 값 5를 바인딩합니다. Rust에서 변수는 기본적으로 변경할 수 없습니다. 즉, 변수에 값을 지정하면 값이 변경되지 않습니다. 3장의 \"변수 및 가변성\" 섹션에서 이 개념에 대해 자세히 논의할 것입니다. 변수를 변경 가능하게 만들기 위해 변수 이름 앞에 mut을 추가합니다.\nlet apples = 5; // immutable\nlet mut bananas = 5; // mutable\n\n\n참고: //구문은 줄 끝까지 계속되는 주석을 시작합니다. Rust는 주석의 모든 것을 무시합니다. 주석에 대해서는 3장 에서 더 자세히 논의할 것입니다.\n\n추측 게임 프로그램으로 돌아가서, 이제 let mut guess 는 이름이 변경 가능한 변수 guess를 소개한다는 것을 알고 있습니다. 등호( =)는 Rust에게 우리가 지금 무언가를 변수에 묶고 싶다는 것을 알려줍니다. 등호 오른쪽에는 guess 에 바인딩된 값이 있는데, 그 값은 String의 새 인스턴스를 반환하는 함수인 String::new를 호출한 결과값 입니다. String은 표준 라이브러리에서 제공하는 문자열 유형인데, 확장 가능하고 UTF-8 로 인코딩된 비트(bit)입니다. \n\nString::new() 행의 ::구문은 new 가 String 타입의 연관함수임을 나타냅니다. 연관함수는 어떤 하나의 타입을 위한 함수이며, 이 경우에는 String 타입입니다. new 함수는 비어있는 새 문자열을 만듭니다. 어떤 종류의 새로운 값을 만드는 함수의 일반적인 이름이기 때문에, 많은 타입에서 new 함수를 찾을 수 있습니다.\n\n정리하면, let mut guess = String::new(); 은 변경가능한 guess 변수를 만드는데, 이 변수는 현재 비어 있고 새로운 String 인스턴스에 바인딩되어 있습니다. \n사용자 입력 받기\n프로그램의 첫 번째 줄에서 use std::io; 를 이용해서 표준 라이브러리의 입/출력 기능을 포함했음을 상기하십시오. 이제 io 모듈 에서 stdin 함수를 호출하여 사용자 입력을 처리할 수 있습니다.\n    io::stdin()\n        .read_line(&amp;mut guess)\n\n프로그램 시작 부분에서 use std::io; 를 이용해서 io 라이브러리를 가져오지 않았다면, 이 함수를 호출할때  std::io::stdin 이라고 적어야 합니다. stdin 함수는 std::io::Stdin 인스턴스를 반환하는데, 이것은 터미널에서 표준 입력에 대한 핸들을 나타내는 타입입니다.\n\n다음줄에 있는 .read_line(&amp;mut guess) 는 표준 입력 핸들의 read_line 메서드를 호출하여 사용자로부터 입력을 받습니다. 또한 사용자 입력을 저장할 문자열을 알려주기 위해 &amp;mut guess 를 read_line 함수의 인수(arg)로 전달하고 있습니다. read_line 의 전체 작업은 사용자가 표준 입력으로 입력하는 모든 것을 가져와 문자열(string)에 추가하는 것입니다(내용을 덮어쓰지 않고). 따라서 문자열(string)을 인수로 전달하십시오. 메서드가 문자열의 내용을 변경할 수 있도록 문자열 인수는 변경 가능해야 합니다.\n&amp; 는 이 인수가 참조자(reference)임을 나타냅니다. 즉, 해당 데이터를 메모리에 여러 번 복사할 필요 없이, 코드의 여러 부분에서 한 데이터에 액세스할 수 있는 방법을 제공합니다. 참조는 복잡한 기능이며, Rust의 주요 장점 중 하나는 참조를 사용하는 것이 얼마나 안전하고 쉬운가입니다. 이 프로그램을 마치기 위해 이러한 많은 세부 사항을 알 필요는 없습니다. 지금은 변수와 마찬가지로 참조도 기본적으로 변경할 수 없다(immutable)는 점만 알면 됩니다. 따라서 변경 가능하게 만들기 &amp;guess 가 아니라 &amp;mut guess 로 적어야 합니다. (4장에서 참고 문헌에 대해 더 자세히 설명합니다.)\nResult 타입으로 잠재적인 실패 처리\n우리는 여전히 이 코드 라인을 작업하고 있습니다. 이제 텍스트의 세 번째 줄에 대해 논의하고 있지만 여전히 하나의 논리적 코드 줄의 일부라는 점에 유의하십시오. 다음 부분은 이 메소드입니다.\n        .expect(\"Failed to read line\");\n\n이 코드를 다음과 같이 작성할 수도 있습니다.\nio::stdin().read_line(&amp;mut guess).expect(\"Failed to read line\");\n\n하지만, 하나의 긴 줄은 읽기 어려우므로 나누어서 쓰는 것이 좋습니다. .method_name() 구문을 사용하여 메서드를 호출할 때, 긴 줄을 구분하는 데 도움이 되도록 줄바꿈 및 기타 공백을 사용하는 것이 좋은 경우가 많습니다. 이제 이 줄이 무엇을 하는지 논의해 봅시다.\n앞에서 언급했듯이 read_line 은 사용자가 입력하는 문자열은 무엇이든 전달합니다. 동시에  Result 값도 반환합니다. Result  는 여러 상태(state) 중 하나가 될수 있는 타입인 enumeration 입니다. enum 이라고도 합니다. 가능한 각 상태를 변형(variant) 이라고 합니다.\n\n6장에서 열거형에 대해 자세히 다룰 것입니다. 이러한 Result 타입의 목적은 오류 처리 정보를 인코딩하는 것입니다.\nResult의 variant는 Ok 와 Err 입니다. Ok variant는 작업이 성공했음을 나타내며, Ok 내부는 성공적으로 생성된 결과값입니다.  Err variant는 작업이 실패했음을 의미하며,  Err 내부는 작업이 어떻게 또는 왜 실패했는지에 대한 정보를 포함합니다.\n다른 타입의 값과 마찬가지로, Result 타입의 값에는 메소드가 정의되어 있습니다. Result의 인스턴스에는 호출가능한  expect메서드 가 있습니다.\nResult의 인스턴스 값이 Err 이면, expect 는 프로그램을 중단하고 expect 에 인수로 전달한 메시지가 표시됩니다. read_line메서드가 Err를 반환하는 경우 기본 운영 체제에서 발생한 오류의 결과일 수 있습니다.\nResult 의 인스턴스 값이 Ok 이면, expect 는 Ok 가 보유하고 있는 반환값을 가져 와서 사용할 수 있도록 해당 값만 반환합니다. 이 경우 반환값은 사용자가 입력했던 바이트의 갯수입니다.\n\n만약 expect를 호출하지 않으면 프로그램이 컴파일되지만 경고가 표시됩니다.\n$ cargo build\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\nwarning: unused `Result` that must be used\n  --&gt; src/main.rs:10:5\n   |\n10 |     io::stdin().read_line(&amp;mut guess);\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |\n   = note: this `Result` may be an `Err` variant, which should be handled\n   = note: `#[warn(unused_must_use)]` on by default\n\nwarning: `guessing_game` (bin \"guessing_game\") generated 1 warning\n    Finished dev [unoptimized + debuginfo] target(s) in 0.59s\n\nRust는 read_line에서 반환된 Result 값을 사용하지 않았다고 경고합니다. 이 말은 프로그램이 발생 가능한 오류를 처리하지 않았다는 의미입니다.\n경고를 억제하는 올바른 방법은 실제로 오류 처리 코드를 작성하는 것이지만, 우리는 문제가 발생했을 때 이 프로그램을 중단하기를 원하므로 expect 를 사용했습니다. \n9장 에서 오류 복구에 대해 배웁니다.\nprintln! 변경자(placeholer)를 이용한 값 출력\n이제까지 작성한 코드에서 닫는 중괄호 말고도 살펴봐야 하는 코드가 하나 더 있습니다. 내용은 아래와 같습니다.\n    println!(\"You guessed: {guess}\");\n\n이 줄은 현재 사용자가 입력한 값을 저장한 문자열을 인쇄합니다. 중괄호 세트는 변경자입니다.  {} 를 값을 제자리에 고정하는 작은 게 집게발이라고생각하세요. \n변수 값을 출력할 때 변수 이름은 중괄호 안에 들어갈 수 있습니다. \n표현식 결과값을 출력할 때는 형식 문자열(format string)에 빈 중괄호를 넣습니다. 그 다음 각 빈 중괄호 변경자와 동일한 순서로, 표현식을 쉼표로 구분된 리스트 형식으로 입력합니다. 그러면 빈 중괄호 안에 순서대로 출력됩니다. 아래 코드는 println! 를 한 번 호출해서 변수와 식의 결과를 인쇄하는 방법을 보여줍니다. \nlet x = 5;\nlet y = 10;\n\nprintln!(\"x = {x} and y + 2 = {}\", y + 2);\n\n이 코드는 x = 5 and y + 2 = 12 를 출력합니다.\n첫 번째 부분을 테스트하기\n추측 게임의 첫 번째 부분을 테스트해 봅시다. cargo run을 사용하여 실행하십시오 .\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 6.44s\n     Running `target/debug/guessing_game`\nGuess the number!\nPlease input your guess.\n6\nYou guessed: 6\n\n이제 게임의 첫 번째 부분이 완료되었습니다. 키보드에서 입력을 받은 다음, 그 값을 출력합니다.\n비밀 번호 생성\n다음으로 사용자가 추측할 비밀 번호를 생성해야 합니다. 시크릿 넘버는 매번 달라야 게임을 여러번 해도 재미있습니다. 게임이 너무 어렵지 않도록 1에서 100 사이의 임의의 숫자를 사용합니다. Rust는 아직 표준 라이브러리에 난수 기능을 포함하지 않습니다. 그러나 Rust 팀은 해당 기능이 포함된 rand 크레이트 를 제공합니다.\n크레이트를 사용하여 더 많은 기능 얻기\n크레이트는 Rust 소스 코드 파일의 모음입니다. 우리가 구축한 프로젝트는 실행 파일인 바이너리 크레이트 입니다. rand 크레이트는 라이브러리 크레이트로 , 다른 프로그램에서 사용하기 위한 코드가 들어 있으며 자체적으로는 실행할 수 없습니다.\n\nCargo의 외부 크레이트 활용은 Cargo가 정말 빛을 발하는 부분입니다. rand 를 사용하는 코드를 작성하려면, 먼저 크레이트를 종속항목(dependency)에 포함하도록 Cargo.toml파일을 수정해야 합니다. Cargo.toml파일을 열고 맨 아래, Cargo가 생성한 [dependencies]섹션 헤더 아래에 다음 행을 추가하십시오. 아래의 버전 번호를 사용하여 특정 rand 를 정확하게 지정해야 합니다. 그렇지 않으면 이 자습서의 코드 예제가 작동하지 않을 수 있습니다.\n파일 이름: Cargo.toml\n[dependencies]\nrand = \"0.8.5\"\n\nCargo.toml 파일에서 헤더 뒤에 오는 모든 것은 해당 섹션의 일부분이 되고, 다른 섹션이 시작될 때까지 계속됩니다.  [dependencies] 에서는 프로젝트가 의존하는 외부 크레이트와 그 크레이트의 버전을 Cargo 에 알려줍니다. 이 경우 rand크레이트를  0.8.5 시맨틱 버전 지정자로  지정합니다. \n\nCargo는 버전 번호 작성의 표준인 시맨틱 버전 관리 ( SemVer 라고도 함)를 이용합니다.  0.8.5지정자는 실제로는 ^0.8.5 의 줄임말입니다. 이는 0.8.5 이상 0.9.0 미만의 모든 버전을 의미합니다.\nCargo는 이러한 버전이 버전 0.8.5와 호환되는 공개 API를 갖는 것으로 간주하며, 이 사양은 이 장의 코드와 함께 여전히 컴파일되는 최신 패치 릴리스를 얻을 수 있도록 보장합니다. 버전 0.9.0 이상은 다음 예제에서 사용하는 것과 동일한 API를 갖는다고 보장되지 않습니다.\n\n[dependencies]만 추가하고, 코드를 변경하지 않은채 처음으로 프로젝트를 빌드해 보겠습니다.\n$ cargo build\n    Updating crates.io index\n  Downloaded rand_chacha v0.3.1\n  Downloaded ppv-lite86 v0.2.17\n  Downloaded rand_core v0.6.4\n  Downloaded rand v0.8.5\n  Downloaded getrandom v0.2.9\n  Downloaded cfg-if v1.0.0\n  Downloaded libc v0.2.144\n  Downloaded 7 crates (871.8 KB) in 1.28s\n   Compiling libc v0.2.144\n   Compiling cfg-if v1.0.0\n   Compiling ppv-lite86 v0.2.17\n   Compiling getrandom v0.2.9\n   Compiling rand_core v0.6.4\n   Compiling rand_chacha v0.3.1\n   Compiling rand v0.8.5\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53s\n\ncargo build목록 2-2: rand 크레이트를 종속 항목으로 추가한 후 실행 결과\n다른 버전 번호(그러나 SemVer 덕분에 모두 코드와 호환됨!)와 다른 라인(운영 체제에 따라 다름)이 표시될 수 있으며 라인의 순서가 다를 수 있습니다.\n외부 종속성(dependency)을 포함하면 Cargo는 레지스트리에서 종속성이 필요로 하는 모든 것의 최신 버전을 가져옵니다. 레지스트리는 Crates.io 의 데이터 사본입니다. Crates.io는 Rust 생태계의 사람들이 다른 사람들이 사용할 수 있도록 오픈 소스 Rust 프로젝트를 게시하는 곳입니다.\n레지스트리를 업데이트한 후 Cargo는 [dependencies]섹션을 확인하고 목록에 있는 아직 다운로드되지 않은 크레이트를 다운로드합니다. 이 경우, 의존성으로 rand만 나열했지만 Cargo는 rand가 의존하는 다른 크레이트도 가져왔습니다. 크레이트를 다운로드한 후, Rust는 크레이트를 컴파일한 다음, 사용 가능한 종속성과 함께 프로젝트를 컴파일합니다.\n\n변경한 내용 없이 cargo build 를 다시 실행하면 Finished행 외에는 출력이 표시되지 않습니다. Cargo는 의존성을 이미 다운로드하고 컴파일했으며 Cargo.toml 파일에서 아무것도 변경하지 않았다는 것을 알고 있습니다. 또한 Cargo는 당신이 코드를 아무 것도 변경하지 않았다는 것을 알고 있으므로 그것을 다시 컴파일하지도 않습니다. 할 일 없으면 그냥 종료됩니다.\n\nsrc/main.rs 파일을 열고 사소한 변경을 한 다음 저장하고 다시 빌드하면 두 줄의 출력만 표시됩니다.\n$ cargo build\n    Finished dev [unoptimized + debuginfo] target(s) in 0.01s\n\n이 줄은 Cargo가 src/main.rs 파일에 대한 작은 변경으로만 빌드를 업데이트한다는 것을 보여줍니다. 여러분의 종속성은 변경되지 않았으므로 Cargo는 이미 다운로드하고 컴파일한 것을 재사용할 수 있음을 알고 있습니다.\nCargo.lock 파일로 재현 가능한 빌드 보장\nCargo는 여러분 또는 다른 사람이 여러분의 코드를 빌드할 때마다 동일한 아티팩트를 다시 빌드할 수 있도록 보장하는 메커니즘을 가지고 있습니다. Cargo는 여러분이 수정하기 전까지 여러분이 지정한 종속성 버전만 사용합니다. \n예를 들어 다음 주에 rand크레이트의 버전 0.8.6이 나오고 해당 버전에 중요한 버그 수정이 포함되어 있지만 코드를 손상시키는 변경점이 포함되어 있다고 가정해 보겠습니다. 이를 처리하기 위해 Rust는 cargo build 를 처음 실행할 때 Cargo.lock 파일을 생성하며, guessing_game 디렉토리 에 이 파일이 있습니다.\nguessing_game\n  ├── Cargo.lock\n  ├── Cargo.toml\n  └── src\n   &nbsp;&nbsp; └── main.rs\n\n처음으로 프로젝트를 빌드할 때 Cargo는 기준에 맞는 종속성의 모든 버전을 파악한 다음 Cargo.lock 파일에 기록합니다. 나중에 프로젝트를 빌드할 때 Cargo는 Cargo.lock 파일이 존재하는지 확인하고 버전을 다시 파악하는 모든 작업을 수행하는 대신 여기에 지정된 버전을 사용할 것입니다. 이렇게 하면 재현 가능한 빌드가 자동으로 생성됩니다. 즉, Cargo.lock 파일 덕분에 명시적으로 업그레이드할 때까지 프로젝트가 0.8.5로 유지됩니다. Cargo.lock 파일은 재현 가능한 빌드에 중요하기 때문에 종종 프로젝트의 나머지 코드와 함께 소스 제어에 체크인됩니다.\n크레이트를 업데이트하여 새 버전 얻기\n크레이트를 업데이트하기위해 Cargo는  update 명령을 제공합니다. 이 명령어는 Cargo.lock파일을 무시 하고 Cargo.toml 의 사양에 맞는 모든 최신 버전을 파악합니다. 그다음 Cargo는 해당 버전을 Cargo.lock 파일에 기록합니다. \nrand = \"0.8.5\" 로 지정을 했고, 이것은 실제로는 ^0.8.5 의 줄임말이기 때문에 Cargo는 기본적으로 0.8.5보다 크고 0.9.0보다 작은 버전만 찾습니다. rand 크레이트가 두 개의 새 버전 0.8.6 및 0.9.0을 릴리스한 경우 cargo update 를 실행하면 다음과 같이 표시됩니다. (실제로 이렇게 실행되지는 않습니다.)\n$ cargo update\n    Updating crates.io index\n    Updating rand v0.8.5 -&gt; v0.8.6\n\nCargo는 0.9.0 릴리스를 무시합니다. 이제 Cargo.lock 파일에서 rand 크레이트의 현재 사용 중인 버전이 0.8.6 으로 변경된 것을 확인할 수 있습니다.\n\nrand 의 버전 0.9.0 또는 0.9.x 버전을 사용하려면 Cargo.toml 파일을 다음과 같이 업데이트해야 합니다. (실제로 이렇게 실행되지는 않습니다.)\n[dependencies]\nrand = \"0.9.0\"\n\n다음에 cargo build 를 실행하면 Cargo는 사용 가능한 크레이트의 레지스트리를 업데이트하고, 새로 지정된  rand 의 버전에 따라 요구 사항을 재평가합니다.\n\nCargo 와 그 생태계 에 대해 더 많은 이야기가 있습니다. 14장에서 다루겠지만 지금은 이것이 여러분이 알아야 할 전부입니다. Cargo는 라이브러리를 매우 쉽게 재사용할 수 있게 하므로 Rustaceans는 여러 패키지에서 조립되는 더 작은 프로젝트를 작성할 수 있습니다.\n난수 생성\n추측할 숫자를 생성하는 데 rand 크레이트 사용을 시작하겠습니다. 지금 할일은 Listing 2-3에 표시된 것처럼 src/main.rs 를 업데이트하는 것입니다.\n파일 이름: src/main.rs\nuse std::io;\nuse rand::Rng;  // 추가\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100); //첫번째줄\n\n    println!(\"The secret number is: {secret_number}\");  //두번째줄\n\n    println!(\"Please input your guess.\");\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&amp;mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {guess}\");\n}\n\n목록 2-3: 난수를 생성하는 코드 추가\n먼저 use rand::Rng; 줄을 추가합니다 . Rng 트레잇(trait)은 난수 생성기가 구현하는 메서드를 정의합니다. 트레잇은 해당 메서드를 사용할 수 있는 범위 내에 있어야 합니다. 10장에서는 트레잇에 대해 자세히 다룰 것입니다.\n다음으로 중간에 두 줄을 추가합니다. \n첫 번째 줄에서 우리가 사용할 특정 난수 생성기를 제공하는 함수 rand::thread_rng를 호출합니다. 이 생성기는 운영체제가 시드(seed)를 정하고 현재 스레드에서만 사용되는 특별한 정수생성기를 제공합니다. 그런 다음 난수 생성기에서  gen_range 메서드를 호출합니다. gen_range 메서드는 우리가 use rand::Rng;문으로 범위에 가져온 Rng 트레잇에 의해 정의됩니다. \n이 gen_range 메서드는 범위 식을 인수로 사용하고, 그 범위 안에서 난수를 생성합니다. 여기서 사용하는 범위 식은 start..=end 형식이며 하한과 상한을 포함하므로, 1에서 100 사이의 숫자를 요청하려면 1..=100 을 인수로 지정해야 합니다.\n\n참고: 어떤 트레이트를 사용할지, 크레이트에서 어떤 메서드와 함수를 호출할지 알 수 없으므로 각 크레이트에는 사용 지침이 포함된 문서가 있습니다. Cargo의 또 다른 멋진 기능은 cargo doc --open명령을 실행하면 로컬에서 모든 종속 항목이 제공하는 문서를 빌드하고 브라우저에서 열 수 있습니다.  예를 들어 rand크레이트의 다른 기능에 관심이 있는 경우 cargo doc --open 을 실행 하고 왼쪽의 사이드바에서 rand를 클릭합니다. \nSafari 에서 실행이 잘 안되는 경우, 주소를 복사해서 다른 브라우져를 사용해보세요.\n\n두 번째 줄은 비밀번호를 출력합니다. 이는 테스트할 수 있도록 프로그램을 개발하는 동안만 사용하고 최종 버전에서는 삭제할 것입니다. 프로그램이 시작되자마자 답을 출력한다면 그것은 게임이 아닙니다!\n프로그램을 몇 번 실행해 보십시오.\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 2.53s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 7\nPlease input your guess.\n4\nYou guessed: 4\n\n$ cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.02s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 83\nPlease input your guess.\n5\nYou guessed: 5\n\n서로 다른 임의의 숫자를 가져와야 하며 모두 1에서 100 사이의 숫자여야 합니다. 잘하셨습니다!\n추측과 비밀 번호 비교\n이제 사용자 입력과 임의의 숫자가 있으므로 이를 비교할 수 있습니다. 그 단계는 목록 2-4에 나와 있습니다. 이 코드는 아직 정상적으로 컴파일되지 않습니다.\n파일 이름: src/main.rs\nuse rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\n    // --snip--\n\n    println!(\"You guessed: {guess}\");\n\n    match guess.cmp(&amp;secret_number) {\n        Ordering::Less =&gt; println!(\"Too small!\"),\n        Ordering::Greater =&gt; println!(\"Too big!\"),\n        Ordering::Equal =&gt; println!(\"You win!\"),\n    }\n}\n\n목록 2-4: 두 숫자를 비교할 때 가능한 반환 값 처리\n\n먼저 use명령문을 사용하여,  std::cmp::Ordering 타입을 표준 라이브러리에서 범위로 가져옵니다. Ordering 타입은 또 다른 열거형이며 Less, Greater  및 Equal  변형(variant)가 있습니다. 이것들은 두 값을 비교할 때 가능한 세 가지 결과입니다.\n\n그런 다음 Ordering 타입을 사용하는 코드 다섯 줄을 맨 아래에 추가합니다.\n이 cmp 메서드는 두 값을 비교하고, 비교할 수 있는 모든 것들에 위해 호출할 수 있습니다. 이 메소드는 비교하고 싶은 것들의 참조자를 받습니다.  여기서는 guess 와 secret_number 를 비교하고 있습니다. 그런 다음 use 명령문을 사용하여 범위로 가져온 Ordering 열거형의 변형(variant)을 반환합니다. \n\n우리는 match 표현문을 사용하여, cmp 가 guess 와 secret_number 를 비교한 결과인 Ordering의 변형(variant)값에 따라 무엇을 할 것인지 결정할 수 있습니다. \nmatch 표현식은 arm 으로 이루어져 있습니다.  arm은 일치시킬 패턴 과 실행될 코드로 구성되는데, 이 코드는 match 에 주어진 값과 arm의 패턴이 일치하는 경우에 실행됩니다. Rust는 match 에 주어진 값을 받아서 각 arm의 패턴을 차례로 살펴봅니다. 패턴과 match 생성자는 강력한 Rust 기능입니다. 패턴과 구성은 코드에서 발생할 수 있는 다양한 상황을 표현할 수 있게 하고 모든 상황을 처리하도록 합니다. 이러한 기능은 각각 6장과 18장에서 자세히 다룰 것입니다.\n\n여기서 사용하는 match 표현식을 예로 들어 보겠습니다. 사용자가 50을 추측했고 이번에 무작위로 생성된 비밀 번호는 38이라고 가정합니다.\n코드가 50과 38을 비교하면 50이 38보다 크기 때문에 cmp메서드가 Ordering::Greater 를 반환합니다. match 표현식은 Ordering::Greater 값을 가져오고 각 arm의 패턴을 확인하기 시작합니다. 첫 번째 arm의 패턴은 Ordering::Less 이기 때문에, Ordering::Greater 값과 일치하지 않습니다. 그러면 해당 arm의 코드를 무시하고 다음 arm으로 이동합니다. 다음 팔의 패턴은 Ordering::Greater 이라서 일치합니다! 해당 arm의 관련 코드가 실행되어 화면에 Too big! 이 출력됩니다. match 표현식은 첫 번째 성공적인 일치  후에 끝나므로, 이 시나리오에서는 마지막 arm은 보지 않습니다.\n\n그런데 목록 2-4의 코드는 아직 컴파일되지 않습니다. 해봅시다:\n$ cargo build\n   Compiling libc v0.2.86\n   Compiling getrandom v0.2.2\n   Compiling cfg-if v1.0.0\n   Compiling ppv-lite86 v0.2.10\n   Compiling rand_core v0.6.2\n   Compiling rand_chacha v0.3.0\n   Compiling rand v0.8.5\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\nerror[E0308]: mismatched types\n  --&gt; src/main.rs:22:21\n    |\n22  |     match guess.cmp(&amp;secret_number) {\n    |                 --- ^^^^^^^^^^^^^^ expected `&amp;String`, found `&amp;{integer}`\n    |                 |\n    |                 arguments to this method are incorrect\n    |\n    = note: expected reference `&amp;String`\n               found reference `&amp;{integer}`\n\nnote: associated function defined here\n  --&gt; /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/core/src/cmp.rs:783:8\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `guessing_game` due to previous error\n\n오류(error)의 핵심은 일치하지 않는 유형 이 있다는 것입니다. Rust는 강력한 정적 유형 시스템을 가지고 있습니다. 그러나 타입 유추도 있습니다. 우리가 let mut guess = String::new() 를 작성했을 때 Rust는 guess 가 String 타입이여야 한다고 타입을 유추했기때문에 우리가 타입을 직접 지정하라고 하지 않았습니다. 반면에 secret_number 는 숫자(number) 타입입니다. \n\n몇몇 숫자 타입들이 1과 100 사이의 값을 가질 수 있습니다. i32는 32비트 정수, u32는 32비트의 부호없는 정수, i64는 64비트의 정수이며 그 외에도 비슷합니다. d우리가 따로 타입을 지정하지 않으면서, 다른 정수형임을 추론할 수 있는 타입 정보를 제공하지 않는다면, 러스트는 기본적으로 숫자들을 i32 타입으로 생각합니다. 이 오류의 원인은 러스트가 문자열과 숫자 타입을 비교할 수 없기 때문입니다.\n\n궁극적으로 우리는 프로그램이 입력으로 받은 String을 숫자 타입으로 변환하여, 입력받은 숫자와 비밀번호를 비교하려고 합니다. main 함수 본문 에 다음 줄을 추가하면 됩니다. \n파일 이름: src/main.rs\n    // --snip--\n\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&amp;mut guess)\n        .expect(\"Failed to read line\");\n\n    let guess: u32 = guess.trim().parse().expect(\"Please type a number!\");\n\n    println!(\"You guessed: {guess}\");\n\n    match guess.cmp(&amp;secret_number) {\n        Ordering::Less =&gt; println!(\"Too small!\"),\n        Ordering::Greater =&gt; println!(\"Too big!\"),\n        Ordering::Equal =&gt; println!(\"You win!\"),\n    }\n\n\n추가된 줄은 다음과 같습니다.\nlet guess: u32 = guess.trim().parse().expect(\"Please type a number!\");\n\nguess 라는 변수를 만듭니다. 하지만 잠깐, 프로그램에 이미  guess 라는 변수가 있지 않습니까? 그렇지만, 유용한 Rust는  guess 의 이전 값을 새 값으로 가리게(shadow) 해줍니다. 섀도잉을 사용하면, 예를 들어 guess_str 와 guess 같은 두 개의 고유한 변수를 만들지 않고도, guess 라는 변수 이름을 재사용할 수 있습니다. 3장에서 이에 대해 자세히 다루겠지만, 지금은 이 기능이 값의 유형을 변환하기 위해 자주 사용된다는 점을 알아 두세요.\n\n우리는 새로만든 변수 guess를 guess.trim().parse() 표현식과 묶습니다. 표현식 안에 있는  guess 는 문자열로 입력 값을 입력받은 원래의  guess 변수를 나타냅니다. String 인스턴스의 trim 메서드는 처음과 끝 부분의 빈칸을 제거하는데, 이 작업은 문자열을 숫자 데이터와 비교하기 위해 반드시 필요합니다. 사용자는 추측하는 숫자를 입력하고 read_line 을 만족시키기 위해 Enter 키를 눌러야 합니다. 그러면 문자열에 개행 문자가 추가됩니다. \n예를 들어 사용자가 5를 입력 하고 Enter 키를 누르면 guess 는 5\\n 이 됩니다. 여기서 \\n 는 \"개행\"을 나타냅니다. (Windows에서 Enter 키를 누르면 캐리지 리턴과 줄 바꿈이 발생해서 \\r\\n 이 됩니다.) 이 trim메서드는 \\n 또는 \\r\\n 를 제거하여 5 만 남깁니다.\n\n문자열에 대한 parse 메소드 는 문자열을 다른 유형으로 변환합니다. 여기서는 문자열을 숫자로 변환하는 데 사용합니다. let guess: u32 를 사용하여 원하는 정확한 숫자 유형을 Rust에 알려야 합니다. guess 뒤의 콜론( :)은 우리가 Rust에게 변수의 타입을 명시한다고 알려줍니다. Rust에는 몇 가지 내장 숫자 유형이 있습니다. 여기서 보이는 u32 는 부호 없는 32비트 정수입니다. 이 타입은 작은 양수에 대한 좋은 기본 선택입니다. 다른 숫자 유형에 대해서는  3장에서 배우게 됩니다.\n또한, 이 예제 프로그램에서 u32 타입을 지정하고, secret_number 와 비교했다는 것은,  Rust가 추론할 것 secret_number 가 u32 로 유추해야 함을 의미합니다. 이제 동일한 유형의 두 값을 비교합니다!\n이 parse메서드는 논리적으로 숫자로 변환할 수 있는 글자에만 작동하므로 쉽게 오류가 발생할 수 있습니다. 예를 들어 문자열에 A👍% 가 포함된 경우 이를 숫자로 변환할 방법이 없습니다. 실패할 수 있기 때문에, parse 메서드는 read_line 메서드 결과와 마찬가지로 Result 타입을 반환합니다 (이전의 \"Result 로 잠재적 오류 처리 \" 에서 설명 ). \n우리는 이 Result 를 expect 메소드를 다시 사용하여 동일한 방식으로 처리합니다. 만약 parse 가 문자열에서 숫자를 생성할 수 없다는 이유로 Err 라는 Result 변형자(variant)를 반환한다면,   expect 는 게임을 중단하고 우리가 제공하는 메시지를 인쇄합니다. 만약 parse 가 문자열을 숫자로 성공적으로 변환할 수 있으면, Ok 라는 Result 변형자(variant)가 반환되고 expect 는 Ok 값 에서 원하는 숫자를 반환합니다 .\n이제 프로그램을 실행해 봅시다:\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.43s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 58\nPlease input your guess.\n  76\nYou guessed: 76\nToo big!\n\nNice! 추측값 입력 전에 공백을 추가해도 프로그램은 여전히 사용자가 76을 추측했음을 알아냈습니다. 프로그램을 몇 번 실행하여 다른 종류의 입력으로 다른 동작을 확인합니다. 너무 낮은 숫자, 정확한 숫자, 높은 숫자를 입력해보세요. \n이제 게임이 잘 작동하지만 우리는 한번엔 한 가지만 추측할 수 있습니다. 루프를 추가하여 변경해 봅시다!\n루핑(Looping)으로 여러번의 추측 허용\nloop 키워드 는 무한 루프를 생성합니다. 사용자가 숫자를 추측할 수 있는 더 많은 기회를 제공하기 위해 루프를 추가합니다.\n파일 이름: src/main.rs\n    // --snip--\n\n    println!(\"The secret number is: {secret_number}\");\n\n    loop {\n        println!(\"Please input your guess.\");\n\n        // --snip--\n\n        match guess.cmp(&amp;secret_number) {\n            Ordering::Less =&gt; println!(\"Too small!\"),\n            Ordering::Greater =&gt; println!(\"Too big!\"),\n            Ordering::Equal =&gt; println!(\"You win!\"),\n        }\n    }\n}\n\n보시다시피 추측값 입력 프롬프트의 모든것을 루프로 이동했습니다. 루프 내부의 행을 각각 4칸 더 들여쓰기하고 프로그램을 다시 실행하십시오. 이제 프로그램은 영원히 또 다른 추측값 입력을 요구할 것이며, 이것은 새로운 문제를 만듭니다.  사용자가 종료할 수 없는 것 입니다!\n사용자는 언제나 키보드 단축키 ctrl-c를 사용하여 프로그램을 중단할 수 있습니다. 그러나 \"추측과 비밀 번호의 비교\"에서 parse 를 언급한 것처럼, 이 만족할 줄 모르는 괴물을 피할 수 있는 또 다른 방법이 있습니다. 사용자가 숫자가 아닌 답을 입력하면 프로그램이 중단(crash)됩니다. 다음과 같이 사용자가 종료할 수 있도록 이점을 활용할 수 있습니다.\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.50s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 59\nPlease input your guess.\n45\nYou guessed: 45\nToo small!\nPlease input your guess.\n60\nYou guessed: 60\nToo big!\nPlease input your guess.\n59\nYou guessed: 59\nYou win!\nPlease input your guess.\nquit\nthread 'main' panicked at 'Please type a number!: ParseIntError { kind: InvalidDigit }', src/main.rs:28:47\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\nquit 를 입력하면 게임이 종료되지만, 알다시피 숫자가 아닌 다른 입력도 마찬가지입니다. 이것은 차선책입니다. 우리는 정확한 숫자가 추측되면 게임도 멈추기를 원합니다.\n정답 이후 종료하기\nbreak 문장을 추가하여, 사용자가 이기면 게임이 종료되도록 프로그래밍해 보겠습니다 .\n파일 이름: src/main.rs\n        // --snip--\n\n        match guess.cmp(&amp;secret_number) {\n            Ordering::Less =&gt; println!(\"Too small!\"),\n            Ordering::Greater =&gt; println!(\"Too big!\"),\n            Ordering::Equal =&gt; {\n                println!(\"You win!\");\n                break;\n            }\n        }\n    }\n}\n\nYou win! 다음에 break 줄을 추가하면 사용자가 비밀 번호를 올바르게 추측할 때 프로그램이 루프를 종료합니다. 루프 종료는 프로그램 종료를 의미하기도 합니다. 루프는 main 의 마지막 부분이기 때문입니다 .\n잘못된 입력 처리\n게임의 동작을 더욱 개선하기 위해, 사용자가 숫자가 아닌 것을 입력할 때 프로그램이 충돌(crash)하는 대신, 사용자가 계속 추측할 수 있도록 게임이 숫자가 아닌 것을 무시하도록 합시다. Listing 2-5와 같이guess 가  String 에서 u32 로 변환되는 행을 변경하면 됩니다.\n파일 이름: src/main.rs\n        // --snip--\n\n        io::stdin()\n            .read_line(&amp;mut guess)\n            .expect(\"Failed to read line\");\n\n        let guess: u32 = match guess.trim().parse() {\n            Ok(num) =&gt; num,\n            Err(_) =&gt; continue,\n        };\n\n        println!(\"You guessed: {guess}\");\n\n        // --snip--\n\n목록 2-5: 프로그램을 충돌시키는 대신, 숫자가 아닌 추측을 무시하고 다른 추측을 요청\nexpect 호출에서 match 표현식으로 전환하여, 오류 발생시 충돌하는 대신 오류를  처리하는 방식으로 바꾸었습니다. parse 는 Result 타입을 반환 하고, Result 는 Ok 와 Err 변형자를 포함하는 열거형임을 기억하세요. 여기서 우리는 match 표현식을 사용하고 있는데, cmp 메소드의 Ordering 결과를 처리했을 때와 같습니다. \n만약 parse 가 문자열을 숫자로 성공적으로 변환할 수 있으면 결과 숫자를 포함하는 Ok  값을 반환합니다. Ok 값은 첫 번째 arm의 패턴과 일치하며,  match 표현식은 num 값을 반환합니다. num 값은 parse 가 생성하고 Ok 값 안에 넣어준 값 입니다. 그 숫자는 결국 우리가 만들고 있는 새 guess 변수에 위치합니다.\n만약 parse 가 문자열을 숫자로 변환 할 수 없으면, 오류에 대한 자세한 정보가 포함된 Err 값을 반환합니다.  Err 값은 첫 번째 arm에 있는 Ok(num) 패턴과 일치하지 않지만 두 번째 arm의 Err(_) 패턴과 일치합니다. 밑줄은 포괄적인 값입니다. 이 예시에서 밑줄을 사용함으로서, 우리는 Err 내부에 어떤 정보가 있든 관계없이 일치시키고 싶다고 말합니다. 따라서 프로그램은 두 번째 arm의 코드인 continue 를 실행하여 프로그램이 loop 의 다음 반복으로 이동하여 다른 추측을 요청하도록 지시합니다. 이렇게 프로그램은 parse 가 만날 수 있는 모든 오류를 효과적으로 무시합니다! \n\n이제 프로그램의 모든 것이 예상대로 작동해야 합니다. 해봅시다:\n$ cargo run\n   Compiling guessing_game v0.1.0 (file:///projects/guessing_game)\n    Finished dev [unoptimized + debuginfo] target(s) in 4.45s\n     Running `target/debug/guessing_game`\nGuess the number!\nThe secret number is: 61\nPlease input your guess.\n10\nYou guessed: 10\nToo small!\nPlease input your guess.\n99\nYou guessed: 99\nToo big!\nPlease input your guess.\nfoo\nPlease input your guess.\n61\nYou guessed: 61\nYou win!\n\n훌륭합니다! 작은 마지막 조정 하나만 하고 추측 게임을 끝낼 것입니다. 프로그램이 여전히 비밀 번호를 미리 출력하고 있음을 기억하십시오. 테스트에는 잘 작동했지만 게임을 망쳤습니다. 비밀 번호를 출력하는 println! 를 삭제합시다. 목록 2-6은 최종 코드를 보여줍니다.\n\n파일 이름: src/main.rs\nuse rand::Rng;\nuse std::cmp::Ordering;\nuse std::io;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    loop {\n        println!(\"Please input your guess.\");\n\n        let mut guess = String::new();\n\n        io::stdin()\n            .read_line(&amp;mut guess)\n            .expect(\"Failed to read line\");\n\n        let guess: u32 = match guess.trim().parse() {\n            Ok(num) =&gt; num,\n            Err(_) =&gt; continue,\n        };\n\n        println!(\"You guessed: {guess}\");\n\n        match guess.cmp(&amp;secret_number) {\n            Ordering::Less =&gt; println!(\"Too small!\"),\n            Ordering::Greater =&gt; println!(\"Too big!\"),\n            Ordering::Equal =&gt; {\n                println!(\"You win!\");\n                break;\n            }\n        }\n    }\n}\n\nListing 2-6: 완전한 추측 게임 코드\n\n이제 추측 게임을 성공적으로 구축했습니다. 축하해요!\n요약\n이 프로젝트는 let, match, 함수, 외부 크레이트 사용 등 많은 새로운 Rust 개념을 소개하는 실습 방식이었습니다. 다음 장에서는 이러한 개념에 대해 자세히 알아봅니다. 3장은 변수, 데이터 유형, 함수와 같이 대부분의 프로그래밍 언어가 가지고 있는 개념을 다루고 Rust에서 사용하는 방법을 보여줍니다. 4장은 Rust를 다른 언어와 다르게 만드는 기능인 소유권(ownership)을 탐구합니다. 5장에서는 구조체(structs) 및 메서드 구문(method syntax)에 대해 설명하고 6장에서는 열거형(enums)의 작동 방식을 설명합니다.\n","id":"https://hwjskt.github.io/rust/chapter2/","title":"Programming a Guessing Game"},"https://hwjskt.github.io/rust/chapter3/":{"body":"요약\n\n\n변수, 기본 타입, 함수, 주석 및 흐름 제어를 알아보자.\n\n\n키워드로 선점된 이름은 변수나 함수의 이름으로 사용할 수 없다.\n\n\n일반적인 프로그래밍 개념\n이 장에서는 거의 모든 프로그래밍 언어에 나타나는 개념을 다루고, Rust에서 어떻게 작동하는지 알려드립니다. 프로그래밍 언어들은 그 핵심에 많은 공통점이 있고, 이 장에 제시된 개념들은 Rust에만 있는 것이 아닙니다. 이 개념들을 Rust의 맥락에서 논의하고, 사용하는 방법을 설명할 것입니다.\n특히 변수, 기본 타입, 함수, 주석 및 흐름 제어에 대해 배웁니다. 이러한 기초는 모든 Rust 프로그램에서 사용되며, 이를 초반에 배우면 매우 도움이 됩니다. \n\n키워드(keywords)\nRust 언어에는 다른 언어와 마찬가지로 해당 언어에서만 사용하도록 예약된 키워드(keywords)들이 있습니다. 이 키워드 이름을 변수나 함수의 이름으로 사용할 수 없음을 명심하십시오. 대부분의 키워드는 특별한 의미를 가지고 있으며 Rust 프로그램에서 다양한 작업을 수행하기 위해 키워드를 사용할 것입니다. 몇몇은 관련된 현재 기능이 없지만 미래에 Rust에 추가될 수 있는 기능을 위해 선점되었습니다. 부록 A 에서 키워드 목록을 찾을 수 있습니다 .\n\n","id":"https://hwjskt.github.io/rust/chapter3/","title":"Common Programming Concepts"},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"body":"요약\n\n\nlet으로 선언한 변수는 그 값을 변경할 수 없다.\n\n\n변경 가능한 변수를 선언하려면 let mut x = 5; 와 같이 mut 를 사용한다.\n\n\n\nconst 로 선언한 상수는 항상 변경할 수 없다.\n\n\n상수 이름은 모두 대문자와 _를 사용한다.\n\n\n\nlet을 사용하여 섀도잉하면 같은 변수명에 다른 값을 넣을수 있다.\n\n\n섀도잉을 할 때 값의 type이 바뀔수 있다. mut는 값의 type 이 바뀔수 없다.\n\n\n변수와 가변성\n변수로 값 저장 섹션 에서 언급했듯이 기본적으로 변수는 변경할 수 없습니다. 이것은 Rust가 제공하는 안전하고 쉬운 동시성을 활용하는 방식으로 코드를 작성하도록 Rust가 제공하는 많은 넛지(강제하지 않고 부드럽게 좋은 선택을 유도하는 방법) 중 하나입니다. 그러나 여전히 변수를 변경 가능하게 만드는 옵션이 있습니다. Rust가 불변성을 선호하도록 권장하는 방법과 이유, 그리고 왜 때때로 선택 해제를 원할 수 있는지 살펴보겠습니다.\n\n변수가 변경 불가능한 경우, 값이 이름에 바인딩되면 해당 값을 변경할 수 없습니다. 이를 설명하기 위해 cargo new variables를 사용하여 프로젝트 디렉토리 에 variables 라는 새 프로젝트를 생성합니다 .\n그런 다음 새 변수 디렉토리에서 src/main.rs를 열고 코드를 아래의 코드로 바꿉니다. 이 코드는 아직 컴파일되지 않습니다.\n파일 이름: src/main.rs\nfn main() {\n    let x = 5;\n    println!(`The value of x is: {x}`);\n    x = 6;\n    println!(`The value of x is: {x}`);\n}\n\n\ncargo run을 사용하여 프로그램을 저장하고 실행합니다. 다음 출력과 같이 불변성 오류에 관한 오류 메시지를 수신해야 합니다.\n$ cargo run\n   Compiling variables v0.1.0 (file:///projects/variables)\nerror[E0384]: cannot assign twice to immutable variable `x`\n --&gt; src/main.rs:4:5\n  |\n2 |     let x = 5;\n  |         -\n  |         |\n  |         first assignment to `x`\n  |         help: consider making this binding mutable: `mut x`\n3 |     println!(`The value of x is: {x}`);\n4 |     x = 6;\n  |     ^^^^^ cannot assign twice to immutable variable\n\nFor more information about this error, try `rustc --explain E0384`.\nerror: could not compile `variables` due to previous error\n\n이 예제는 컴파일러가 프로그램에서 오류를 찾는 데 어떻게 도움이 되는지 보여줍니다. 컴파일러 오류는 실망스러울 수 있지만, 실제로는 프로그램이 원하는 작업을 아직 안전하게 수행하지 못한다는 의미일 뿐입니다. 오류는 당신이 좋은 프로그래머가 아니라는 것을 의미하지 않습니다 ! 숙련된 Rustacean도 여전히 컴파일러 오류가 발생합니다.\n변경할 수 없는 x 변수에 두 번째 값을 할당하려고 했기 때문에 변경할 수 없는 변수 x에 두 번 할당할 수 없습니다.라는 오류 메시지가 표시되었습니다.\n바로 이 상황이 버그로 이어질 수 있기 때문에, 변경할 수 없는 것으로 지정된 값을 변경하려고 시도할 때 컴파일 타임 오류가 발생하는 것이 중요합니다. 코드의 한 부분이 값이 절대 변경되지 않는다는 가정하에 작동하고, 코드의 다른 부분이 해당 값을 변경하는 경우 코드의 첫 번째 부분이 설계된 대로 작동하지 않을 수 있습니다. 이러한 종류의 버그의 원인은 나중에 추적하기 어려울 수 있습니다. 특히 두 번째 코드 조각이 가끔 값을 변경하는 경우에는 더욱 그렇습니다 . Rust 컴파일러는 값이 변경되지 않는다고 선언하면 실제로 변경되지 않으므로 직접 추적할 필요가 없습니다. 따라서 코드를 추론하기가 더 쉽습니다.\n\n그러나 가변성은 매우 유용할 수 있으며 코드를 작성하기 더 편리하게 만들 수 있습니다. 변수는 기본적으로 변경할 수 없지만 2장 에서 했던 것처럼 변수 이름 앞에 mut를 추가하여 변수를 변경할 수 있습니다. 또한 mut를 추가하면 코드의 다른 부분이 이 변수의 값을 변경할 것임을 나타내어 코드의 향후 독자에게 의도를 전달합니다.\n예를 들어 src/main.rs를 다음과 같이 변경해 보겠습니다.\n파일 이름: src/main.rs\nfn main() {\n    let mut x = 5;\n    println!(`The value of x is: {x}`);\n    x = 6;\n    println!(`The value of x is: {x}`);\n}\n\n지금 프로그램을 실행하면 다음과 같은 결과가 나타납니다.\n$ cargo run\n   Compiling variables v0.1.0 (file:///projects/variables)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30s\n     Running `target/debug/variables`\nThe value of x is: 5\nThe value of x is: 6\n\nmut이 사용될 때 x에 바인딩된 값을 5에서 6으로 변경할 수 있습니다. 궁극적으로 가변성을 사용할지 여부는 여러분에게 달려 있으며, 여러분이 특정 상황에서 가장 명확하다고 생각하는 것에 따라 결정됩니다.\n상수\n변경할 수 없는 변수와 마찬가지로 상수 역시 값의 변경이 허용되지 않습니다. 하지만 상수와 변수 사이에는 몇 가지 차이점이 있습니다.\n첫째, 상수에는  mut를 사용할 수 없습니다. 상수는 어떤 경우에도 변경할 수 없습니다. let 키워드 대신 const 키워드를 사용하여 상수를 선언하고 값의 유형에 주석을 반드시  달아야 합니다. 다음 섹션인 데이터 유형 에서 유형 및 유형 주석을 다룰 것이므로 지금은 세부 사항에 대해 걱정하지 마십시오. 항상 유형에 주석을 달아야 한다는 점만 알아두세요.\n상수는 전역 범위를 포함한 모든 범위에서 선언할 수 있으므로, 코드의 많은 부분에서 알아야 하는 값에 유용합니다.\n마지막 차이점은 상수는 상수식으로만 표현될 수 있습니다. 런타임이 되어야만 계산되는 값을 결과가 될 수는 없습니다. (예를 들면 함수 호출의 결과값)\n\n다음은 상수 선언의 예입니다.\nconst THREE_HOURS_IN_SECONDS: u32 = 60 * 60 * 3;\n\n상수의 이름은 THREE_HOURS_IN_SECONDS이고, 값은 60(1분의 초 수)에 60(1시간의 분 수)에 3(세고 싶은 시간 수)을 곱한 결과로 설정됩니다.\n상수에 이름을 붙이는 Rust의 규칙은 단어 사이에 밑줄과 함께 모두 대문자를 사용하는 것입니다. 컴파일러는 컴파일 시간에 제한된 작업 집합을 평가할 수 있으므로 이 상수를 값 10,800으로 설정하는 대신 이해하고 확인하기 쉬운 방식으로 이 값을 작성하도록 선택할 수 있습니다. 상수를 선언할 때 사용할 수 있는 작업에 대한 자세한 내용은 Rust 참조의 상수 평가 섹션을 참조하세요.\n\n상수는 선언된 범위 내에서 프로그램이 실행되는 전체 시간 동안 유효합니다. 이런 특징때문에 어플리케이션 도메인에 있는 값이 프로그램의 여러 부분에서 사용되어야하는 경우, 그 값을 선언할 때 상수로 하는게 유용합니다.  예를 들면 게임의 모든 플레이어가 획득할 수 있는 최대 점수, 또는 빛의 속도와 같은 값입니다.\n\n프로그램 전체에서 사용되는 하드코딩된 값의 이름을 상수로 지정하면 향후 코드 관리자에게 해당 값의 의미를 전달하는 데 유용합니다. 또한 나중에 하드코딩된 값을 업데이트해야 하는 경우, 변경해야 하는 코드의 위치를 한군데로 지정할 수 있어 도움이 됩니다.\n섀도잉\n2장 의 추측 게임 튜토리얼에서 본 것처럼 이전 변수와 동일한 이름으로 새 변수를 선언할 수 있습니다. Rustaceans는 첫 번째 변수가 두 번째 변수에 의해 가려진다고 말하는데 , 이는 변수 이름을 사용할 때 컴파일러가 두 번째 변수를 보게 된다는 의미입니다. 실제로 두 번째 변수는 첫 번째 변수를 가리고, 변수 자체가 (다시) 가려지거나 범위가 끝날 때까지 변수 이름을 자신이 사용합니다. 동일한 변수의 이름을 사용하고 다음과 같이 let 키워드를 반복 사용하여 변수를 숨길 수 있습니다.\n파일 이름: src/main.rs\nfn main() {\n    let x = 5;\n\n    let x = x + 1;\n\n    {\n        let x = x * 2;\n        println!(`The value of x in the inner scope is: {x}`);\n    }\n\n    println!(`The value of x is: {x}`);\n}\n\n이 프로그램은 먼저 x를 5 라는 값에 바인딩합니다. 그런 다음 let x =를 반복하여 원래 값에 1을 추가하여 x의 값이 6이 되도록 새 변수 x를 만듭니다. 그런 다음 중괄호로 만든 내부 범위 내에서 세 번째 let 문도 x를 가리고 새 변수를 만들어 이전 값에 2를 곱하여 x 값 12를 제공합니다. 해당 범위가 끝나면 내부 그림자가 종료되고 x는 6으로 돌아갑니다. 이 프로그램을 실행하면 다음과 같이 출력됩니다.\n$ cargo run\n   Compiling variables v0.1.0 (file:///projects/variables)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/variables`\nThe value of x in the inner scope is: 12\nThe value of x is: 6\n\n\n섀도잉은 변수를 mut를 사용해서 변경가능하게 하는 것과 다릅니다. 왜냐하면 섀도잉을 할 때 let 키워드를 사용하지 않고 이 변수를 재할당하려고 하면 컴파일 타임 오류가 발생하기 때문입니다.  let을 사용하여 값에 대해 몇 가지 변환을 수행할 수 있지만, 이러한 변환이 완료된 후에는 변수를 변경할 수 없습니다.\nmut와 섀도잉의 또 다른 차이점은, let 키워드로 섀도잉을 하면 새 변수를 생성하기 때문에 동일한 이름을 재사용하면서 값의 유형을 변경할 수 있다는 것입니다. 예를 들어 프로그램에서 사용자에게 공백 문자를 입력하여 일부 텍스트 사이에 원하는 공백 수를 표시하도록 요청한 다음 해당 입력을 숫자로 저장하려고 한다고 가정해 보겠습니다.\n    let spaces = `   `;\n    let spaces = spaces.len();\n\n첫 번째 spaces 변수는 문자열 유형이고, 두 번째 spaces 변수는 숫자 유형입니다. 따라서 섀도잉은 spaces_str 및 spaces_num과 같은 다른 이름을 생각해내지 않아도 됩니다. 대신 더 간단한 space라는 이름을 재사용할 수 있습니다.\n\n그러나 여기에 표시된 것처럼 mut를 사용하려고 하면 컴파일 타임 오류가 발생합니다.\n    let mut spaces = `   `;\n    spaces = spaces.len();\n\n오류는 변수의 유형을 변경할 수 없다고 말합니다.\n$ cargo run\n   Compiling variables v0.1.0 (file:///projects/variables)\nerror[E0308]: mismatched types\n --&gt; src/main.rs:3:14\n  |\n2 |     let mut spaces = `   `;\n  |                      ----- expected due to this value\n3 |     spaces = spaces.len();\n  |              ^^^^^^^^^^^^ expected `&amp;str`, found `usize`\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `variables` due to previous error\n\n이제 변수가 작동하는 방식을 살펴보았으므로 변수가 가질 수 있는 더 많은 데이터 유형을 살펴보겠습니다.\n","id":"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/","title":"Variables and Mutability"},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"body":"요약\n\n\nRust는 data의 type을 추론한다.\n\n\n여러 type이 가능한 경우 type을 명시해야한다.\n\n\n\n스칼라 타입: 단일 값\n\n\n정수타입: 부호있는 타입, 부호없이 양수만 있는 타입이 있다\n\n\n소수점 타입: 모두 부호가 있다.\n\n\nboolean 타입: true, false\n\n\n문자 타입: 한글자(영어, 한글, 이모지 등), 작은따옴표 사용\n\n\n\n\n\n복합 타입: 값의 그룹\n\n(튜플 타입): 길이 고정, 값의 타입은 다양\n[배열 타입]: 길이 고정, 값의 타입은 하나\n\n\n\n데이터 타입\nRust의 모든 값은 특정 데이터 타입을 가지고 있으며, 이는 Rust에게 이 데이터가 어떤 종류인지 알려주고, 이 데이터로 어떻게 작업해야하는지 알려줍니다. 우리는 2가지 종류의 하위 데이터 타입을 살펴볼건데, 바로 스칼라와 컴파운드입니다.\nRust는 정적으로 타입이 지정된 언어 라는 점을 명심하세요. 즉, 컴파일 할때 모든 변수의 타입을 알아야 합니다. 일반적으로 컴파일러는 값과 우리의 사용방식을 통해서 값의 타입을 추론할 수 있습니다. 그런데 여러가지 타입이 가능한 경우에는 아래와 같이 주석을 달아야합니다. 2장의 “Comparing the Guess to the Secret Number” 절에서 이런 경우가 있었습니다.  parse를 사용하여 String을 숫자 타입으로 변환한 경우에는 여러가지 타입이 가능한데, 이 경우 다음과 같이 타입 주석을 추가해야 합니다. :\nlet guess: u32 = `42`.parse().expect(`Not a number!`);\n\n앞의 코드에 표시된 : u32 타입 주석을 추가하지 않으면 Rust는 다음과 같은 오류를 표시할 것입니다. 이는 컴파일러가 어떤 타입을 사용하려는지 알기 위해 더 많은 정보가 필요함을 의미합니다.\n$ cargo build\n   Compiling no_type_annotations v0.1.0 (file:///projects/no_type_annotations)\nerror[E0282]: type annotations needed\n --&gt; src/main.rs:2:9\n  |\n2 |     let guess = `42`.parse().expect(`Not a number!`);\n  |         ^^^^^\n  |\nhelp: consider giving `guess` an explicit type\n  |\n2 |     let guess: _ = `42`.parse().expect(`Not a number!`);\n  |              +++\n\nFor more information about this error, try `rustc --explain E0282`.\nerror: could not compile `no_type_annotations` due to previous error\n\n다른 데이터 타입에 대한 다른 타입 주석이 표시됩니다.\n스칼라 타입\n스칼라 타입은 단일 값을 나타냅니다. Rust에는 네 가지 기본 스칼라 타입이 있습니다: 정수(integers), 부동 소수점 숫자(floating-point numbers), 부울(Booleans) 및 문자(characters)입니다. 다른 프로그래밍 언어에서 본적이 있을겁니다. Rust에서 어떻게 작동하는지 살펴보겠습니다.\n정수 타입(Integer Type)\n정수는 분수 구성요소가 없는 숫자입니다. 2장에서 하나의 정수 타입인 u32 타입을 사용했습니다. 이 타입선언은 값이 32비트 공간을 차지하는 부호 없는 정수여야 함을 나타냅니다 (부호 있는 정수 타입는 u 대신 i로 시작). 표 3-1은 Rust에 내장된 정수 타입들을 보여줍니다. 이러한 타입을 사용하여 정수 값의 타입을 선언할 수 있습니다.\n표 3-1: Rust의 정수 타입들\n길이부호가 있는부호가 없는\n8비트i8u8\n16비트i16u16\n32비트i32u32\n64비트i64u64\n128비트i128u128\narchisizeusize\n\n각 타입은 부호가 있거나 없을수 있으며, 명시된 크기를 가집니다. 부호 있음  및 부호 없음은 숫자가 음수가 될 수 있는지 여부를 나타냅니다. 즉, 숫자에 부호가 있어야 하는 경우(signed)가 있고, 양수만 가능하므로 부호가 없어도 되는 경우(unsigned)가 있습니다. 이것은 종이에 숫자를 쓰는 것과 같습니다. 부호가 중요한 경우, 숫자에 더하기 기호 또는 빼기 기호가 함께 표시됩니다. 그러나 숫자가 양수라고 가정하는 것이 안전할 때는 부호 없이 표시됩니다. 부호 있는 숫자는 2의 보수 표현을 사용하여 저장됩니다.\n각 부호 있는 타입은 -(2^(n-1)) 에서 2(n-1) - 1까지의 숫자를 저장할 수 있습니다. 여기서 n 은 타입이 사용하는 비트 수입니다. 따라서 i8은 -(2^7)에서 2^7 - 1까지의 숫자를 저장할 수 있으며, 이는 -128에서 127까지입니다. 부호 없는 타입은 0에서 2^n - 1까지의 숫자를 저장할 수 있으므로 u8은 0에서 2^8 - 1 즉, 0에서 255 사이입니다.\n추가로 isize 및 usize 타입은 프로그램이 실행되는 컴퓨터의 아키텍처에 따라 달라지며 표에서 arch로 표시됩니다. 64비트 아키텍처를 사용하는 경우 64비트, 32비트 32비트 아키텍처를 사용하는 경우 32비트입니다.\n\n표 3-2에 표시된 형식으로 정수 리터럴을 작성할 수 있습니다. 여러 숫자 타입이 될 수 있는 숫자 리터럴은 타입을 지정하기 위해 57u8과 같은 타입 접미사를 허용합니다. 숫자 리터럴은 읽기 쉽게하기 위해 시각적 구분 기호로 _를 사용할 수 있습니다 (예: 1000 과  1_000은 동일).\n표 3-2: Rust의 정수 리터럴\n숫자 리터럴예\nDecimal98_222\nHex0xff\nOctal0o77\nBinary0b1111_0000\nByte(u8만 해당)b'A'\n\n\n그렇다면 어떤 정수 타입을 사용해야 할까요? 확신이 없다면 Rust의 기본값을 사용하세요. 정수 타입의 기본값은 i32입니다. isize 또는 usize 는 일부 컬렉션을 인덱싱할 때입니다.\n\n정수 오버플로\n0에서 255 사이의 값을 보유할 수 있는 u8 타입의 변수가 있다고 가정해 보겠습니다. 변수를 해당 범위 밖의 값(예: 256)으로 변경하려고 하면 정수 오버플로가 발생하여 두 가지 중 하나가 발생할 수 있습니다 .\n디버그 모드에서 컴파일할 때, Rust는 정수 오버플로에 대한 검사를 포함해서 이러한 동작이 발생하면 런타임에 프로그램 패닉을 유발합니다 . Rust는 프로그램이 오류와 함께 종료될 때 패닉이라는 용어를 사용합니다. 9장의 패닉!이 있는 복구할 수 없는 오류` 섹션 에서 패닉에 대해 더 깊이 논의할 것입니다.\n--release 플래그를 사용하여 릴리스 모드에서 컴파일할 때, Rust는 패닉을 유발하는 정수 오버플로 검사를 포함 하지 않습니다. 대신, 오버플로가 발생하면 Rust는 2의 보수 래핑을 수행합니다. 간단히 말해서, 타입이 보유할 수 있는 최대값보다 큰 값은, 타입이 보유할 수 있는 최소값으로 랩 어라운드됩니다. u8의 경우 값 256은 0이 되고 값 257은 1이 됩니다. 프로그램은 패닉을 일으키지 않지만 변수는 예상했던 것과 다른 값을 갖게 됩니다. 정수 오버플로의 래핑 동작에 의존하는 것은 오류로 간주됩니다.\n오버플로 가능성을 명시적으로 처리하기 위해 기본 숫자 타입에 대해 표준 라이브러리에서 제공하는 다음 메서드 계열을 사용할 수 있습니다.\n\nwrapping_add와 같은 wrapping_* 메서드를 사용하여 모든 모드에서 래핑합니다.\nchecked_* 메서드에 오버플로가 있는 경우 None 값을 반환합니다.\noverflowing_* 메서드로 오버플로가 발생했는지 여부를 나타내는 부울 값과 값을 반환합니다.\nsaturating_* 방법을 사용하여 값의 최소값 또는 최대값에서 포화시킵니다.\n\n\n부동 소수점 타입(Floating-Point Types)\nRust에는 소수점을 가진 숫자인 부동 소수점 숫자를 위한 두 가지 기본 타입이 있습니다. Rust의 부동 소수점 타입은 각각 크기가 32비트와 64비트인 f32와 f64입니다. 기본 타입은 f64입니다. 최신 CPU에서는 f32와 거의 같은 속도이지만, 더 정밀할 수 있기 때문입니다. 모든 부동 소수점 타입은 부호가 있습니다.\n다음은 실제 부동 소수점 숫자를 보여주는 예입니다.\n파일 이름: src/main.rs\nfn main() {\n    let x = 2.0; // f64\n\n    let y: f32 = 3.0; // f32\n}\n\n부동 소수점 숫자는 IEEE-754 표준에 따라 표현됩니다. f32 타입은 1배수의 정밀도인 부동소수점이고, f64는 2배수의 정밀도인 부동소수점입니다.\n수치 연산\nRust는 더하기, 빼기, 곱하기, 나누기 및 나머지와 같은 모든 숫자 타입에 대해 예상할 수 있는 기본 수학 연산을 지원합니다. 정수 나눗셈은 0을 향해 가장 가까운 정수로 자릅니다 (소수점을 버린다). 다음 코드는 let 문에서 각 숫자 연산을 사용하는 방법을 보여줍니다.\n파일 이름: src/main.rs\nfn main() {\n    // addition\n    let sum = 5 + 10;\n\n    // subtraction\n    let difference = 95.5 - 4.3;\n\n    // multiplication\n    let product = 4 * 30;\n\n    // division\n    let quotient = 56.7 / 32.2;\n    let truncated = -5 / 3; // Results in -1\n\n    // remainder\n    let remainder = 43 % 5;\n}\n\n이러한 문의 각 식은 수학 연산자를 사용하고 단일 값으로 계산된 다음 변수에 바인딩됩니다. 부록 B 에는 Rust가 제공하는 모든 연산자 목록이 포함되어 있습니다.\nBoolean 타입\n대부분의 다른 프로그래밍 언어와 마찬가지로 Rust의 boolean 타입에는 true와 false의 두 가지 값이 있습니다. boolean은 크기가 1바이트입니다. Rust의 boolean 타입은 bool을 사용하여 지정됩니다. 예를 들어:\n파일 이름: src/main.rs\nfn main() {\n    let t = true;\n\n    let f: bool = false; // with explicit type annotation\n}\n\nboolean 값을 사용하는 주요 방법은 if 식과 같은 조건을 사용하는 것입니다. 제어 흐름 섹션 에서 Rust에서 if 표현식이 작동하는 방식을 다룰 것입니다.\n문자 타입\nRust의 char 타입은 언어의 가장 근본적인 알파벳 타입입니다. 다음은 char 값을 선언하는 몇 가지 예입니다.\n파일 이름: src/main.rs\nfn main() {\n    let c = 'z';\n    let z: char = 'ℤ'; // with explicit type annotation\n    let heart_eyed_cat = '😻';\n}\n\n큰따옴표를 사용하는 문자열 리터럴과 달리, 작은따옴표로 char 리터럴을 지정합니다. Rust의 char 타입은 크기가 4바이트이고 유니코드 스칼라 값을 나타냅니다. 즉, ASCII보다 훨씬 더 많은 것을 나타낼 수 있습니다. 악센트 문자; 중국어, 일본어 및 한국어 문자; 이모티콘; 너비가 0인 공백은 모두 Rust에서 유효한 char 값입니다. 유니코드 스칼라 값의 범위는 U+0000에서 U+D7FF까지, U+E000에서 U+10FFFF까지입니다. 그러나 문자는 실제로 유니코드의 개념이 아니므로, 인간으로서 문자가 무엇인지에 생각하는 직감과 Rust의 char가 무엇인지는 일치하지 않을 수 있습니다. 8장의 \"UTF-8 인코딩된 텍스트를 문자열과 함께 저장\" 에서 이 주제에 대해 자세히 설명합니다.\n\n복합 타입\n복합 타입은 여러 값을 하나의 타입으로 그룹화할 수 있습니다. Rust에는 튜플과 배열이라는 두 가지 복합 타입이 있습니다.\n튜플 타입\n튜플은 다양한 타입의 여러 값을 하나의 복합 타입으로 그룹화하는 일반적인 방법입니다. 튜플의 길이는 고정되어 있습니다. 일단 선언되면 크기가 늘어나거나 줄어들 수 없습니다.\n괄호 안에 쉼표로 구분된 값 목록을 작성하여 튜플을 만듭니다. 튜플의 각 위치에는 타입이 있으며 튜플의 서로 다른 값의 타입이 동일할 필요는 없습니다. 이 예에서는 선택적 타입 주석을 추가했습니다.\n파일 이름: src/main.rs\nfn main() {\n    let tup: (i32, f64, u8) = (500, 6.4, 1);\n}\n\n\n변수 tup은 튜플이 단일 복합 요소로 간주되기 때문에 전체 튜플에 바인딩됩니다. 튜플에서 개별 값을 가져오려면 다음과 같이 패턴 일치를 사용하여 튜플 값을 분해할 수 있습니다.\n파일 이름: src/main.rs\nfn main() {\n    let tup = (500, 6.4, 1);\n\n    let (x, y, z) = tup;\n\n    println!(`The value of y is: {y}`);\n}\n\n이 프로그램은 먼저 튜플을 만들고 변수 tup에 바인딩합니다. 그런 다음 let이 포함된 패턴을 사용하여 tup을 가져오고 x, y 및 z의 세 가지 개별 변수로 변환합니다. 단일 튜플을 세 부분으로 나누기 때문에 이를 구조 분해(destructuring) 라고 합니다. 마지막으로 프로그램은 y의 값인 6.4를 출력합니다.\n\n튜플 요소에 직접 액세스할 수도 있습니다. 방법은 마침표(.) 다음에 액세스하려는 값의 인덱스를 사용합니다. 예를 들어:\n파일 이름: src/main.rs\nfn main() {\n    let x: (i32, f64, u8) = (500, 6.4, 1);\n\n    let five_hundred = x.0;\n\n    let six_point_four = x.1;\n\n    let one = x.2;\n}\n\n이 프로그램은 튜플 x를 만든 다음 해당 인덱스를 사용하여 튜플의 각 요소에 액세스합니다. 대부분의 프로그래밍 언어와 마찬가지로 튜플의 첫 번째 인덱스는 0입니다.\n\n값이 없는 튜플은 특별한 이름인 unit 을 가집니다. 이 값과 해당 타입은 모두 ()로 작성되며 빈 값 또는 빈 반환 타입을 나타냅니다. 식은 다른 값을 반환하지 않는 경우 암시적으로 단위 값을 반환합니다.\n배열 타입\n여러 값의 모음을 갖는 또 다른 방법은 배열 을 사용하는 것입니다. 튜플과 달리 배열의 모든 요소는 동일한 타입을 가져야 합니다. 다른 언어의 배열과 달리 Rust의 배열은 길이가 고정되어 있습니다.\n대괄호 안에 쉼표로 구분된 목록으로 배열의 값을 씁니다.\n파일 이름: src/main.rs\nfn main() {\n    let a = [1, 2, 3, 4, 5];\n}\n\n\n배열은 데이터를 힙이 아닌 스택에 할당하려는 경우(스택과 힙에 대해서는 4장 에서 자세히 설명함 ) 또는 항상 고정된 수의 요소를 갖도록 하려는 경우에 유용합니다. 그러나 배열은 벡터 타입만큼 유연하지 않습니다. 벡터는 크기를 늘리거나 줄일 수 있는 표준 라이브러리에서 제공하는 유사한 컬렉션 타입입니다. 배열을 사용할지 벡터를 사용할지 확실하지 않은 경우 벡터를 사용해야 할 가능성이 있습니다. 8장 에서는 벡터에 대해 자세히 설명합니다.\n\n배열은 요소의 수를 변경할 필요가 없다는 것을 알고 있을 때 더 유용합니다. 예를 들어 프로그램에서 월 이름을 사용하는 경우 벡터가 항상 12개의 요소를 포함한다는 것을 알기 때문에 벡터 대신 배열을 사용할 것입니다.\nlet months = [`January`, `February`, `March`, `April`, `May`, `June`, `July`,\n              `August`, `September`, `October`, `November`, `December`];\n\n\n다음과 같이 각 요소의 타입, 세미콜론, 배열의 요소 수와 함께 대괄호를 사용하여 배열의 타입을 작성합니다.\nlet a: [i32; 5] = [1, 2, 3, 4, 5];\n\n여기서 i32는 각 요소의 타입입니다. 세미콜론 뒤의 숫자 5는 배열에 5개의 요소가 포함되어 있음을 나타냅니다.\n\n다음과 같이 초기 값, 세미콜론, 대괄호 안에 배열 길이를 지정하여 각 요소에 대해 동일한 값을 포함하도록 배열을 초기화할 수도 있습니다.\nlet a = [3; 5];\n\na라는 이름의 배열에는 처음에 값 3으로 모두 설정되는 5 요소가 포함됩니다. 이것은 let a = [3, 3, 3, 3, 3];이라고 쓰는 것과 같습니다. 그러나 더 간결한 방법입니다.\n배열 요소에 액세스\n배열은 스택에 단일 메모리 뭉치로 할당됩니다.  다음과 같이 인덱싱을 사용하여 배열의 요소에 액세스할 수 있습니다.\n파일 이름: src/main.rs\nfn main() {\n    let a = [1, 2, 3, 4, 5];\n\n    let first = a[0];\n    let second = a[1];\n}\n\n이 예에서 first라는 변수는 배열의 인덱스 [0]에 있는 값이기 때문에 값 1을 가져옵니다. second라는 변수는 배열의 인덱스 [1]에서 값 2를 가져옵니다.\n잘못된 배열 요소 액세스\n배열의 끝을 지난 배열의 요소에 액세스하려고 하면 어떤 일이 발생하는지 살펴보겠습니다. 사용자로부터 배열 인덱스를 얻기 위해 2장의 추측 게임과 유사한 이 코드를 실행한다고 가정해 보겠습니다.\n파일 이름: src/main.rs\nuse std::io;\n\nfn main() {\n    let a = [1, 2, 3, 4, 5];\n\n    println!(`Please enter an array index.`);\n\n    let mut index = String::new();\n\n    io::stdin()\n        .read_line(&amp;mut index)\n        .expect(`Failed to read line`);\n\n    let index: usize = index\n        .trim()\n        .parse()\n        .expect(`Index entered was not a number`);\n\n    let element = a[index];\n\n    println!(`The value of the element at index {index} is: {element}`);\n}\n\n이 코드는 성공적으로 컴파일됩니다. cargo run을 사용하여 이 코드를 실행하고 0, 1, 2, 3 또는 4를 입력하면 프로그램이 배열의 해당 인덱스에서 해당 값을 인쇄합니다.\n\n대신 10과 같이 배열의 끝을 지나 숫자를 입력하면 다음과 같은 출력이 표시됩니다.\nthread 'main' panicked at 'index out of bounds: the len is 5 but the index is 10', src/main.rs:19:19\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n프로그램은 인덱싱 작업에서 유효하지 않은 값을 사용하는 시점에서 런타임 오류가 발생했습니다. 프로그램이 오류 메시지와 함께 종료되었고 마지막 println!은 실행하지 못했습니다. 인덱싱을 사용하여 요소에 액세스하려고 하면 Rust는 지정한 인덱스가 배열 길이보다 작은지 확인합니다. 인덱스가 길이보다 크거나 같으면 Rust는 패닉 상태가 됩니다. 이 검사는 런타임 시 수행되어야 합니다. 왜냐하면 컴파일러는 사용자가 나중에 코드를 실행할 때 어떤 값을 입력할지 알 수 없기 때문입니다.\n이것은 실행 중인 Rust의 메모리 안전 원칙의 예입니다. 많은 저수준 언어에서는 이러한 종류의 검사가 수행되지 않으며 잘못된 인덱스를 제공하면 잘못된 메모리에 액세스할 수 있습니다. Rust는 메모리 액세스를 허용하고 계속하는 대신, 즉시 종료하여 이러한 종류의 오류로부터 사용자를 보호합니다. 9장에서는 Rust의 오류 처리에 대해 자세히 설명합니다. 패닉이 발생하지 않고, 유효하지 않은 메모리 액세스를 허용하지 않는, 읽기 쉽고 안전한 코드를 작성하는 방법에 대해 설명합니다.\n","id":"https://hwjskt.github.io/rust/chapter3/2-data-types/","title":"Data Types"},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"body":"요약\n\n\n함수,변수 이름은 소문자와 _를 사용하는 스네이크 케이스 형식을 따름\n\n\n사용할 함수를 정의하는 위치는 main 함수 전,후 모두 가능\n\n\n구문과 표현식\n\n구문(Statements)은 어떤 작업을 수행하고, 값은 반환하지 않음.(예: 변수선언, 함수정의)\n표현식(Expressions)은 결과값을 반환.(예: 수학연산, 함수호출, 매크로호출, 새 범위를 만드는 {})\n\n\n\n함수\n함수는 Rust 코드에서 널리 사용됩니다. 당신은 이미 rust 언어에서 가장 중요한 함수 중 하나인 main 함수를 보았습니다. 이것은 많은 프로그램의 시작점입니다. 또한 새 함수를 선언할 수 있는 fn 키워드도 보았습니다.\nRust는 함수 및 변수 이름에 대한 일반적인 스타일로 스네이크 케이스를 사용합니다. 여기서 모든 문자는 소문자이고 밑줄은 별도의 단어입니다.\n다음 프로그램은 함수를 정의하는 예시입니다.\n파일 이름: src/main.rs\nfn main() {\n    println!(`Hello, world!`);\n\n    another_function();\n}\n\nfn another_function() {\n    println!(`Another function.`);\n}\n\nRust 에서 fn 뒤에 함수 이름과 괄호를 입력하여 함수를 정의합니다. 중괄호는 컴파일러에게 함수 본문이 시작되고 끝나는 위치를 알려줍니다.\n\n함수를 호출하는 방법은 함수 이름 뒤에 괄호를 입력하는 것 입니다. another_function은 프로그램에 정의되어 있기 때문에 main 함수 내부에서 호출할 수 있습니다. 소스 코드에서 main 함수 다음에 another_function을 정의했습니다. main 함수 전에도 정의할 수 있었습니다. Rust는 당신이 당신의 함수를 정의하는 곳을 신경쓰지 않습니다. 어디든 호출자가 볼 수 있는 범위에 정의되어 있으면 됩니다.\n\n함수를 더 자세히 살펴보기 위해 functions 라는 이름의 새 binary 프로젝트를 시작하겠습니다. src/main.rs 에 위 예제를 작성하고 실행합니다. 결과는 다음과 같아야 합니다.\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.28s\n     Running `target/debug/functions`\nHello, world!\nAnother function.\n\n행은 main 함수에 나타나는 순서대로 실행됩니다. 먼저 Hello, world! 메시지가 출력된 다음, another_function이 호출되고 해당 메시지가 출력됩니다.\n매개변수(Parameters)\n함수는 매개변수를 갖는 형식으로 정의할 수 있습니다. 함수에 매개변수가 있는 경우 해당 매개변수에 대한 구체적인 값을 함수에 제공할 수 있습니다. 기술적으로는 구체적인 값을 전달인자(arguments)라고 부르지만, 일상적인 대화에서 사람들은 함수의 정의나 호출에서 매개변수와 전달인자라는 단어를 같은 의미로 사용하는 경향이 있습니다.\n\n전달인자(arguments): 함수를 호출할 때 전달되는 구체적인 값\n매개변수(Parameters): 함수를 정의할 때 사용되는 변수이름\n\n이 버전의 another_function에서는 매개변수를 추가합니다.\n파일 이름: src/main.rs\nfn main() {\n    another_function(5);\n}\n\nfn another_function(x: i32) {\n    println!(`The value of x is: {x}`);\n}\n\n이 프로그램을 실행해 보십시오. 다음 출력을 얻어야 합니다.\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.21s\n     Running `target/debug/functions`\nThe value of x is: 5\n\nanother_function 선언에는 x라는 매개변수가 하나 있습니다. x의 유형은 i32로 지정됩니다. another_function에 5를 전달하면 println! 매크로는 x를 포함하는 중괄호 쌍이 형식 문자열에 있던 곳에 5를 넣습니다.\n함수를 선언할 때, 각 매개변수의 타입을 선언해야 합니다. 이는 Rust의 설계에서 신중한 결정입니다. 함수 정의에 타입 주석을 요구한다는 것은, 컴파일러가 타입을 파악하기 위해 코드의 다른 곳에서 우리가 사용하는 것을 통해 타입을 추측할 필요가 없어진다는 것을 의미합니다. 또한 컴파일러는 함수가 기대하는 타입을 알고 있는 경우 더 유용한 오류 메시지를 제공할 수 있습니다.\n\n여러개의 매개변수를 정의하려면, 다음과 같이 매개변수 사이를 쉼표로 구분합니다.\n파일 이름: src/main.rs\nfn main() {\n    print_labeled_measurement(5, `h`);\n}\n\nfn print_labeled_measurement(value: i32, unit_label: char) {\n    println!(`The measurement is: {value}{unit_label}`);\n}\n\n이 예제에서는 두 개의 매개변수를 사용하여 print_labeled_measurement라는 함수를 생성합니다. 첫 번째 매개변수의 이름은 value이고 i32 타입입니다. 두 번째는 unit_label이라는 이름이고 char 타입입니다. 이 후 이 함수는 value와 unit_label을 모두 포함하는 텍스트를 인쇄합니다.\n이 코드를 실행해 봅시다. 현재 함수 프로젝트의 src/main.rs 파일 에 있는 프로그램을 이전 예제로 바꾸고 cargo run을 사용하여 실행합니다.\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/functions`\nThe measurement is: 5h\n\nvalue의 값이 5이고 unit_label의 값이 h인 함수를 호출했기 때문에 프로그램 출력에는 해당 값이 포함됩니다.\n구문과 표현식(Statements and Expressions)\n함수 본문은 표현식으로 끝나는 명령문들로 구성됩니다. 지금까지 우리가 다룬 함수에는 종결 표현식이 포함되지 않았지만, 명령문의 일부로 표현식을 보았습니다. Rust는 표현식 기반 언어이기 때문에 이해해야 할 중요한 차이점입니다. 다른 언어에는 동일한 구분이 없으므로 명령문과 표현식이 무엇이며, 그 차이가 함수 본문에 어떤 영향을 미치는지 살펴보겠습니다.\n\n구문(Statements)은 어떤 작업을 수행하고, 값은 반환하지 않는 지침입니다.\n표현식(Expressions)은 결과값을 반환합니다.\n\n몇 가지 예를 살펴보겠습니다.\n우리는 이미 구문과 표현식을 사용했습니다. 변수를 만들고 let 키워드를 사용하여 값을 할당하는 것이 구문입니다. 목록 3-1에서 let y = 6;은 구문입니다.\n파일 이름: src/main.rs\nfn main() {\n    let y = 6;\n}\n\n목록 3-1: 하나의 명령문을 포함하는 main 함수 선언\n함수 정의도 구문입니다. 앞의 전체 예는 그 자체로 구문입니다.\n\n구문은 값을 반환하지 않습니다. 따라서 다음 코드와 같이 let 문을 다른 변수에 할당할 수 없습니다. 오류가 발생합니다.\n파일 이름: src/main.rs\nfn main() {\n    let x = (let y = 6);\n}\n\n이 프로그램을 실행하면 다음과 같은 오류가 발생합니다.\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\nerror: expected expression, found `let` statement\n --&gt; src/main.rs:2:14\n  |\n2 |     let x = (let y = 6);\n  |              ^^^\n\nerror: expected expression, found statement (`let`)\n --&gt; src/main.rs:2:14\n  |\n2 |     let x = (let y = 6);\n  |              ^^^^^^^^^\n  |\n  = note: variable declaration using `let` is a statement\n\nerror[E0658]: `let` expressions in this position are unstable\n --&gt; src/main.rs:2:14\n  |\n2 |     let x = (let y = 6);\n  |              ^^^^^^^^^\n  |\n  = note: see issue #53667 &lt;https://github.com/rust-lang/rust/issues/53667&gt; for more information\n\nwarning: unnecessary parentheses around assigned value\n --&gt; src/main.rs:2:13\n  |\n2 |     let x = (let y = 6);\n  |             ^         ^\n  |\n  = note: `#[warn(unused_parens)]` on by default\nhelp: remove these parentheses\n  |\n2 -     let x = (let y = 6);\n2 +     let x = let y = 6;\n  |\n\nFor more information about this error, try `rustc --explain E0658`.\nwarning: `functions` (bin `functions`) generated 1 warning\nerror: could not compile `functions` due to 3 previous errors; 1 warning emitted\n\nlet y = 6 문은 값을 반환하지 않으므로 x가 바인딩할 항목이 없습니다. C 및 Ruby 와 같은 언어와 다른 점입니다. 이러한 언어에서는 x = y = 6이라고 쓰고 x와 y 모두 값이 6이 되도록 할 수 있습니다. Rust에서는 그렇지 않습니다.\n\n표현식은 값으로 평가(반환)되며, Rust 코드 대부분이 표현식입니다. 5 + 6 과 같은 간단한 수학 연산을 살펴보면, 이는 11이란 값을 산출하는 표현식입니다. 표현식은 구문의 일부가 될 수 있습니다. Listing 3-1에서 let y = 6; 구문의 6은 값 6으로 평가되는 표현식입니다.\n함수 호출, 매크로 호출, 새로운 범위를 만드는 {} 은 모두 표현식입니다. 예를 들면 다음과 같습니다.\n파일 이름: src/main.rs\nfn main() {\n    let y = {\n        let x = 3;\n        x + 1\n    };\n\n    println!(`The value of y is: {y}`);\n}\n\n위 코드에서 아래 부분은 표현식입니다:\n{\n    let x = 3;\n    x + 1\n}\n\n이 경우 4로 평가되는 블록입니다. 해당 값은 let 문의 일부로 y에 바인딩됩니다. x + 1 행에는 지금까지 본 대부분의 행과 달리 끝에 세미콜론이 없습니다. 표현식에는 마지막에 세미콜론이 붙지 않습니다. 표현식 끝에 세미콜론을 추가하면 문장으로 바뀌고 값을 반환하지 않습니다. 이후에 함수의 반환 값과 표현식을 살펴볼 때 이 점을 유의하세요.\n반환 값이 있는 함수\n함수는 이를 호출하는 코드에 값을 반환할 수 있습니다. 반환 값의 이름은 지정하지 않지만 화살표(-&gt;) 다음에 반환 값의 유형을 선언해야 합니다. Rust에서 함수의 반환 값은 함수 본문 블록의 최종 표현식 값과 동의어입니다. 함수에서 return 키워드와 값을 사용하여 일찍 반환할 수 있지만, 대부분의 함수는 암시적으로 마지막 표현식을 반환합니다.\n다음은 값을 반환하는 함수의 예입니다.\n파일 이름: src/main.rs\nfn five() -&gt; i32 {\n    5\n}\n\nfn main() {\n    let x = five();\n\n    println!(`The value of x is: {x}`);\n}\n\nfive 함수에는 함수 호출, 매크로 또는 let 문이 없으며 숫자 5만 있습니다. 이것은 Rust에서 완벽하게 유효한 함수입니다. 함수의 반환 유형도 -&gt; i32로 지정됩니다. 이 코드를 실행해 보십시오. 출력은 다음과 같습니다.\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30s\n     Running `target/debug/functions`\nThe value of x is: 5\n\nfive의 5는 함수의 반환 값이며 반환 타입이 i32입니다. 이에 대해 자세히 살펴보겠습니다. 두 가지 중요한 부분이 있습니다.\n첫째, let x = five(); 줄입니다. 변수를 초기화하기 위해 함수의 반환 값을 사용하고 있음을 보여줍니다. 함수 five는 5를 반환하므로 해당 행은 다음과 동일합니다.\nlet x = 5;\n\n둘째, five 함수는 매개변수가 없고 반환 값의 유형을 정의하지만 함수의 본문은 우리가 반환하려는 값을 가진 표현식이기 때문에 세미콜론이 없는 외로운 5입니다.\n\n다른 예를 살펴보겠습니다.\n파일 이름: src/main.rs\nfn main() {\n    let x = plus_one(5);\n\n    println!(`The value of x is: {x}`);\n}\n\nfn plus_one(x: i32) -&gt; i32 {\n    x + 1\n}\n\n이 코드를 실행하면 The value of x is: 6이 인쇄됩니다.\n\n그러나 x + 1을 포함하는 줄 끝에 세미콜론을 배치하여 표현식에서 명령문으로 변경하면 오류가 발생합니다.\n파일 이름: src/main.rs\nfn main() {\n    let x = plus_one(5);\n\n    println!(`The value of x is: {x}`);\n}\n\nfn plus_one(x: i32) -&gt; i32 {\n    x + 1;\n}\n\n이 코드를 컴파일하면 다음과 같은 오류가 발생합니다.\n$ cargo run\n   Compiling functions v0.1.0 (file:///projects/functions)\nerror[E0308]: mismatched types\n --&gt; src/main.rs:7:24\n  |\n7 | fn plus_one(x: i32) -&gt; i32 {\n  |    --------            ^^^ expected `i32`, found `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n8 |     x + 1;\n  |          - help: remove this semicolon to return this value\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `functions` due to previous error\n\n기본 오류 메시지인 mismatched types은 이 코드의 핵심 문제를 나타냅니다. plus_one 함수의 정의는 i32를 반환한다고 하지만 x + 1; 구문은 값을 산출(반환)하지 않기 때문에, () 처럼 비어있는 튜플로 표현됩니다. 따라서 이 함수에서는 아무 것도 반환되지 않으며, 이는 함수 정의와 모순되고 오류가 발생합니다. 이 출력에서 ​​Rust는 이 문제를 수정하는 데 도움이 될 수 있는 메시지를 제공합니다. 오류를 수정하는 세미콜론을 제거할 것을 제안합니다.\n","id":"https://hwjskt.github.io/rust/chapter3/3-functions/","title":"Functions"},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"body":"요약\n\n\nRust 에서 주석은 // 뒤에 작성\n\n\n문서 주석 이라는 것도 있는데, /// 를 사용해서 HTML형식의 documentation 을 생성하는데 사용됨\n\n\n주석\n모든 프로그래머는 코드를 이해하기 쉽게 만들기 위해 노력하지만, 때로는 추가 설명이 필요합니다. 이 경우 프로그래머는 소스 코드에 컴파일러가 무시할 주석을 남기고, 이 주석들은 소스 코드를 읽는 사람들에게는 유용할 수 있습니다.\n다음은 간단한 주석입니다.\n// hello, world\n\nRust에서 주석 스타일은 두 개의 슬래시 // 로 주석을 시작하고, 주석은 줄 끝까지 계속됩니다.\n\n한 줄을 넘는 주석의 경우 다음과 같이 각 줄에 //를 포함해야 합니다.\n// So we’re doing something complicated here, long enough that we need\n// multiple lines of comments to do it! Whew! Hopefully, this comment will\n// explain what’s going on.\n\n\n주석은 코드를 포함하는 줄 끝에 배치할 수도 있습니다.\n파일 이름: src/main.rs\nfn main() {\n    let lucky_number = 7; // I’m feeling lucky today\n}\n\n\n그러나 주석을 코드 위에 있는 별도의 줄로 작성하는 형식을 더 자주 볼 수 있습니다.\n파일 이름: src/main.rs\nfn main() {\n    // I’m feeling lucky today\n    let lucky_number = 7;\n}\n\n\nRust에는 또 다른 종류의 주석인 문서 주석(documentation comments)이 있습니다.\n이에 대해서는 14장의 Crates.io에 크레이트 게시 섹션 에서 논의할 것입니다.\n","id":"https://hwjskt.github.io/rust/chapter3/4-comments/","title":"Comments"},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"body":"요약\n\n\nif 키워드 다음에 조건(조건을 arm이라고 한다) 다음에 {중괄호를 열고 실행할 코드} 를 작성\n\n\n조건은 반드시 bool 타입 이어야 함\n\n\nlet, if 를 이용해서, if 의 결과를 변수에 할당하려면, 모든 arm 의 결과값(반환값) 타입이 같아야\n\n\n세 종류의 반복문(loops)\n\nloop: 영원히 반복해서 실행하거나, 명시적으로 중지(break)하라고 지시할 때까지 실행\n\ncontinue: 현재 반복 건너뛰고, 다음 반복으로 이동\nbreak 표현식 뒤에 반환하려는 값을 추가 가능\n'레이블: loop {} 형식으로 loop 에 이름(레이블)을 지정하여, break, continue 와 함께 사용가능\n\n\nwhile: 조건이 참인 동안 반복문가 실행\nfor: while 보다 안전하고 빠르다\n\n\n\n제어문\n조건이 참인지 여부에 따라 일부 코드를 실행하고, 조건이 참인 동안 일부 코드를 반복적으로 실행하는 기능은 대부분의 프로그래밍 언어의 기본 구성 요소입니다. Rust 코드의 실행 흐름을 제어할 수 있는 가장 일반적인 구조는 if 표현식과 반복문 입니다.\nif 표현식\nif 식을 사용하면 조건에 따라 코드를 분기할 수 있습니다. 조건을 제공한 다음 이렇게 쓸 수 있습니다. “이 조건이 충족되면 이 코드 블록을 실행하십시오. 조건이 충족되지 않으면 이 코드 블록을 실행하지 마십시오.”\nif 식을 더 알아보기 위해 projects 디렉터리에 branches 라는 새 프로젝트를 만듭니다. src/main.rs 파일에 다음을 입력합니다.\n파일 이름: src/main.rs\nfn main() {\n    let number = 3;\n\n    if number &lt; 5 {\n        println!(`condition was true`);\n    } else {\n        println!(`condition was false`);\n    }\n}\n\n모든 if 표현식은 키워드 if로 시작하고 그 뒤에 조건이 옵니다. 이 경우 조건은 변수 number의 값이 5보다 작은지 여부를 확인합니다. 조건이 참이면 실행할 코드 블록을 조건 바로 뒤에 {중괄호로 된 블록} 안에 배치합니다.\n\nif 표현식의 조건과 관련된 코드 블록은 2장의 Programming a Guessing Game 섹션에서 논의한 match 표현식의 arm과 마찬가지로 arm이라고도 합니다.\n선택적으로, 조건이 false 인 경우 실행할 대체 코드 블록을 else 표현식으로 포함할 수도 있습니다. else 표현식을 제공하지 않았는데 조건이 false인 경우, 프로그램은 if 블록을 건너뛰고 다음 코드로 이동합니다.\n이 코드를 실행해 보십시오. 다음 출력이 표시되어야 합니다.\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/branches`\ncondition was true\n\n\nnumber 값을 조건을 거짓으로 만드는 값으로 변경하면 어떤 일이 발생하는지 보겠습니다.\n    let number = 7;\n\n프로그램을 다시 실행하고 출력을 확인합니다.\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/branches`\ncondition was false\n\n\n이 코드의 조건이 bool 이어야 한다는 점도 주목해야 합니다. 조건이 bool이 아니면 오류가 발생합니다. 예를 들어 다음 코드를 실행해 보십시오.\n파일 이름: src/main.rs\nfn main() {\n    let number = 3;\n\n    if number {\n        println!(`number was three`);\n    }\n}\n\nif 조건은 이번에 3의 값으로 평가되고 Rust는 오류를 발생시킵니다:\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\nerror[E0308]: mismatched types\n --&gt; src/main.rs:4:8\n  |\n4 |     if number {\n  |        ^^^^^^ expected `bool`, found integer\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `branches` due to previous error\n\n오류는 Rust가 bool을 예상했지만 정수를 얻었음을 나타냅니다.\n\nRuby 및 JavaScript와 같은 언어와 달리 Rust는 bool 이 아닌 유형을 bool 로 자동 변환하지 않습니다. 항상 if 의 조건을 bool 로 제공해야 합니다.\n예를 들어 숫자가 0이 아닌 경우에만 if 코드 블록을 실행하려면 if 식을 다음과 같이 변경할 수 있습니다.\n파일 이름: src/main.rs\nfn main() {\n    let number = 3;\n\n    if number != 0 {\n        println!(`number was something other than zero`);\n    }\n}\n\n이 코드를 실행하면 number was something other than zero가 출력됩니다.\nelse if 로 여러 조건 처리\nelse if 식에서 if와 else를 결합하여 여러 조건을 사용할 수 있습니다. 예를 들어:\n파일 이름: src/main.rs\nfn main() {\n    let number = 6;\n\n    if number % 4 == 0 {\n        println!(`number is divisible by 4`);\n    } else if number % 3 == 0 {\n        println!(`number is divisible by 3`);\n    } else if number % 2 == 0 {\n        println!(`number is divisible by 2`);\n    } else {\n        println!(`number is not divisible by 4, 3, or 2`);\n    }\n}\n\n이 프로그램에는 네 가지 가능한 경로가 있습니다. 실행하면 다음과 같은 출력이 표시됩니다.\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31s\n     Running `target/debug/branches`\nnumber is divisible by 3\n\n이 프로그램이 실행될 때 각 if 표현식을 차례로 확인하고, 조건이 true로 평가되는 첫 번째 본문을 실행합니다. 6은 2로 나눌 수 있지만 number is divisible by 2라는 출력이 표시되지 않으며 else 블록의 number is not divisible by 4, 3, or 2 텍스트도 표시되지 않습니다. 이는 Rust가 첫 번째 참 조건에 대해서만 블록을 실행하고, 일단 하나를 찾으면 나머지는 확인조차 하지 않기 때문입니다.\nelse if 식을 너무 많이 사용하면 코드가 복잡해질 수 있으므로 둘 이상의 식을 사용하는 경우 코드를 리팩터링해야 할 수 있습니다. 6장은 이러한 경우에 사용할 수 있는 match라고 하는 강력한 Rust 분기 구조를 설명합니다.\nlet 문에서 if 사용\nif는 (결과값을 반환하는) 표현식이기 때문에 목록 3-2에서와 같이 결과를 변수에 할당하기 위해 let 문의 오른쪽에 이를 사용할 수 있습니다.\n파일 이름: src/main.rs\nfn main() {\n    let condition = true;\n    let number = if condition { 5 } else { 6 };\n\n    println!(`The value of number is: {number}`);\n}\n\n목록 3-2: if 표현식의 결과를 변수에 할당\nnumber 변수는 if 식의 결과에 따라 값에 바인딩됩니다. 이 코드를 실행하여 무슨 일이 일어나는지 확인하십시오.\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30s\n     Running `target/debug/branches`\nThe value of number is: 5\n\n코드 블록은 코드 블록의 마지막 표현식으로 평가되며, 숫자 자체도 표현식이라는 점을 기억하십시오. 이 경우 전체 if 표현식의 값은 실행되는 코드 블록에 따라 다릅니다. 이는 if의 각 부분에서 결과가 될 가능성이 있는 값이 동일한 유형이어야 함을 의미합니다. 목록 3-2에서 if 팔과 else arm 모두의 결과는 i32 정수였습니다.\n\n다음 예와 같이 유형이 일치하지 않으면 오류가 발생합니다.\n파일 이름: src/main.rs\nfn main() {\n    let condition = true;\n\n    let number = if condition { 5 } else { `six` };\n\n    println!(`The value of number is: {number}`);\n}\n\n이 코드를 컴파일하려고 하면 오류가 발생합니다. if 및 else arm에는 호환되지 않는 값 유형이 있으며 Rust는 프로그램에서 문제를 찾을 위치를 정확히 나타냅니다.\n$ cargo run\n   Compiling branches v0.1.0 (file:///projects/branches)\nerror[E0308]: `if` and `else` have incompatible types\n --&gt; src/main.rs:4:44\n  |\n4 |     let number = if condition { 5 } else { `six` };\n  |                                 -          ^^^^^ expected integer, found `&amp;str`\n  |                                 |\n  |                                 expected because of this\n\nFor more information about this error, try `rustc --explain E0308`.\nerror: could not compile `branches` due to previous error\n\nif 블록의 식은 정수로 평가되고 else 블록의 식은 문자열로 평가됩니다. 이것은 변수가 단일 유형을 가져야 하기 때문에 작동하지 않으며, Rust는 컴파일 타임에 number 변수가 어떤 유형인지 확실히 알아야 합니다. number의 유형을 알면 컴파일러가 number를 사용하는 모든 곳에서 유형이 유효한지 확인할 수 있습니다. Rust는 number 의 타입을 실행 할 때 정의되도록 할 수 없습니다. 컴파일러가 모든 변수의 다양한 타입을 추적해서 알아내야 한다면 컴파일러는 보다 복잡해지고 보증할 수 있는 것은 적어지게 됩니다.\n반복문을 사용한 반복\n코드 블록을 두 번 이상 실행하는 것이 종종 유용합니다. 이 작업을 위해 Rust는 여러 반복문을 제공합니다. 이 반복문은 반복문 본문 내부의 코드를 통해 끝까지 실행된 다음 처음부터 다시 시작됩니다. 반복문를 실험하기 위해 loops 라는 새 프로젝트를 만들어 봅시다.\n\nRust에는 loop, while 및 for 이라는 세 종류의 반복문(loops)가 있습니다. 각각 시도해 봅시다.\nloop 를 사용하여 코드 반복\nloop 키워드는 Rust에게 코드 블록을 영원히 반복해서 실행하거나, 명시적으로 중지하라고 지시할 때까지 실행하라고 지시합니다.\n예를 들어 loops 디렉토리의 src/main.rs 파일을 다음과 같이 변경하십시오.\n파일 이름: src/main.rs\nfn main() {\n    loop {\n        println!(`again!`);\n    }\n}\n\n이 프로그램을 실행하면 프로그램을 수동으로 중지할 때까지 again! 를 계속 반복해서 출력합니다. 대부분의 터미널은 키보드 단축키 ctrl-c를 지원하여 연속 반복문에 빠진 프로그램을 중단합니다. 시도해 보세요:\n$ cargo run\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.29s\n     Running `target/debug/loops`\nagain!\nagain!\nagain!\nagain!\n^Cagain!\n\n^C 기호는 ctrl-c를 누른 위치를 나타냅니다. again!라는 단어가 표시될 수도 있고 표시되지 않을 수도 있습니다. 인터럽트 신호를 받았을 때 코드가 반복문에 있던 위치에 따라 ^C 다음에 인쇄됩니다.\n\n다행스럽게도 Rust는 코드를 사용하여 반복문에서 벗어날 수 있는 방법도 제공합니다. 반복문 내에 break 키워드를 배치하여 반복문 실행을 중지할 시기를 프로그램에 알릴 수 있습니다. 2장의 올바른 추측 후 종료 섹션에서 사용자가 올바른 숫자를 추측하여 게임에서 이겼을 때 프로그램을 종료하기 위해 이 작업을 수행한 것을 기억하십시오.\n우리는 또한 추측 게임에서 continue을 사용했는데, 이는 loop에서 이 반복의 나머지 코드를 건너뛰고 다음 반복으로 이동하도록 프로그램에 지시합니다.\nloop 에서 값 반환\nloop의 용도 중 하나는 스레드가 작업을 완료했는지 여부를 확인하는 것과 같이 실패할 수 있는 작업을 다시 시도하는 것입니다. 해당 작업의 결과를 반복문에서 나머지 코드로 전달해야 할 수도 있습니다. 이를 위해 반복문를 중지하는 데 사용하는 break 표현식 뒤에 반환하려는 값을 추가할 수 있습니다. 해당 값은 다음과 같이 사용할 수 있도록 반복문 외부로 반환됩니다.\nfn main() {\n    let mut counter = 0;\n\n    let result = loop {\n        counter += 1;\n\n        if counter == 10 {\n            break counter * 2;\n        }\n    };\n\n    println!(`The result is {result}`);\n}\n\n반복문 전에 counter라는 변수를 선언하고 0으로 초기화합니다. 그런 다음 반복문에서 반환된 값을 보유하기 위해 result라는 변수를 선언합니다. 반복문가 반복될 때마다 카운터 변수에 1을 추가한 다음 카운터가 10과 같은지 확인합니다. 그럴 때 counter * 2 값과 함께 break 키워드를 사용합니다. 반복문 다음에 세미콜론을 사용하여 result에 값을 할당하는 명령문을 종료합니다. 마지막으로 result에 값을 인쇄합니다. 이 경우에는 20입니다.\n여러 loop 가 있을 때, loop 를 명확히 지정하기 위한 \"반복문 레이블\"\n반복문 내에 반복문이 있는 경우 break 및 continue은 해당 지점에서 가장 안쪽 반복문에 적용됩니다.\n선택적으로 반복문에 반복문 레이블을 지정할 수 있는데, break 또는 continue 뒤에 레이블이 지정된 반복문을 지정하면, 해당 키워드가 가장 안쪽 반복문 대신 레이블이 지정된 반복문에 적용되도록 할 수 있습니다. 반복문 레이블은 작은따옴표(')로 시작해야 합니다. 다음은 두 개의 중첩 반복문가 있는 예입니다.\nfn main() {\n    let mut count = 0;\n    'counting_up: loop {\n        println!(`count = {count}`);\n        let mut remaining = 10;\n\n        loop {\n            println!(`remaining = {remaining}`);\n            if remaining == 9 {\n                break;\n            }\n            if count == 2 {\n                break 'counting_up;\n            }\n            remaining -= 1;\n        }\n\n        count += 1;\n    }\n    println!(`End count = {count}`);\n}\n\n외부 반복문에는 'counting_up 레이블이 있으며 0에서 2까지 카운트합니다. 레이블이 없는 내부 반복문는 10에서 9까지 카운트다운합니다. 레이블을 지정하지 않은 첫 번째 break은 내부 반복문를 종료합니다. break 'counting_up; 문은 외부 반복문만 종료합니다. 이 코드는 다음을 인쇄합니다.\n$ cargo run\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.58s\n     Running `target/debug/loops`\ncount = 0\nremaining = 10\nremaining = 9\ncount = 1\nremaining = 10\nremaining = 9\ncount = 2\nremaining = 10\nEnd count = 2\n\nwhile 이 있는 조건부 반복문\n프로그램은 종종 반복문 내에서 조건을 평가해야 합니다. 조건이 참인 동안 반복문가 실행됩니다. 조건이 참이 아니게 되면 프로그램은 break을 호출하여 반복문를 중지합니다.\nloop, if, else 및 break의 조합을 사용하여 이와 같은 동작을 구현할 수 있습니다. 원하는 경우 지금 프로그램에서 시도해 볼 수 있습니다. 그러나 이 패턴은 너무 보편적이어서 Rust에는 while 반복문라고 하는 내장 언어 구조가 있습니다.\nListing 3-3에서 우리는 while을 사용하여 프로그램을 세 번 반복하고 매번 카운트다운한 다음 반복문가 끝난 후 메시지를 인쇄하고 종료합니다.\n파일 이름: src/main.rs\nfn main() {\n    let mut number = 3;\n\n    while number != 0 {\n        println!(`{number}!`);\n\n        number -= 1;\n    }\n\n    println!(`LIFTOFF!!!`);\n}\n\n목록 3-3: while 반복문를 사용하여 조건이 참일 때 코드 실행\n이 구성은 loop, if, else 및 break를 사용하는 경우 필요한, 많은 중첩을 제거하고 더 명확합니다. 조건이 true로 평가되는 동안 코드가 실행됩니다. 그렇지 않으면 반복문를 종료합니다.\nfor 를 사용하여 컬렉션 반복\nwhile 구성을 사용하여 배열과 같은 컬렉션의 요소를 반복하도록 선택할 수 있습니다. 예를 들어 목록 3-4의 반복문는 배열 a의 각 요소를 인쇄합니다.\n파일 이름: src/main.rs\nfn main() {\n    let a = [10, 20, 30, 40, 50];\n    let mut index = 0;\n\n    while index &lt; 5 {\n        println!(`the value is: {}`, a[index]);\n\n        index += 1;\n    }\n}\n\nListing 3-4: while 반복문를 사용하여 컬렉션의 각 요소를 순환\n여기서 코드는 배열의 요소를 통해 계산됩니다. 인덱스 0에서 시작한 다음 배열의 마지막 인덱스에 도달할 때까지(즉, index &lt; 5가 더 이상 true가 아닌 경우) 반복합니다. 이 코드를 실행하면 배열의 모든 요소가 인쇄됩니다.\n$ cargo run\n   Compiling loops v0.1.0 (file:///projects/loops)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32s\n     Running `target/debug/loops`\nthe value is: 10\nthe value is: 20\nthe value is: 30\nthe value is: 40\nthe value is: 50\n\n5개의 배열 값이 모두 예상대로 터미널에 나타납니다. index가 어느 시점에서 5 값에 도달하더라도 반복문는 배열에서 6번째 값을 가져오려고 시도하기 전에 실행을 중지합니다.\n\n그러나 이 방법은 오류가 발생하기 쉽습니다. 인덱스 값이나 테스트 조건이 올바르지 않으면 프로그램이 패닉 상태가 될 수 있습니다. 예를 들어 a 배열의 정의를 4개의 요소를 갖도록 변경했지만 조건을 while index &lt; 4로 업데이트하는 것을 잊은 경우 코드가 패닉 상태가 됩니다.\n또한 컴파일러가 반복문를 통한 모든 반복에서 인덱스가 배열 범위 내에 있는지 여부에 대한 조건부 검사를 수행하기 위해 런타임 코드를 추가하기 때문에 속도가 느립니다.\n\n보다 간결한 대안으로 for 반복문를 사용하고 컬렉션의 각 항목에 대해 일부 코드를 실행할 수 있습니다. for 반복문는 Listing 3-5의 코드처럼 보입니다.\n파일 이름: src/main.rs\nfn main() {\n    let a = [10, 20, 30, 40, 50];\n\n    for element in a {\n        println!(`the value is: {element}`);\n    }\n}\n\nListing 3-5: for 반복문를 사용하여 컬렉션의 각 요소를 순환\n이 코드를 실행하면 목록 3-4와 동일한 출력이 표시됩니다. 더 중요한 것은 이제 코드의 안전성을 높이고 배열의 끝을 벗어나거나 충분히 멀리 가지 않고 일부 항목이 누락되어 발생할 수 있는 버그의 가능성을 제거했습니다.\nfor 반복문를 사용하면 Listing 3-4에서 사용된 방법과 같이 배열의 값 수를 변경한 경우 다른 코드를 변경할 필요가 없습니다.\nfor 반복문의 안전성과 간결함은 Rust에서 가장 일반적으로 사용되는 반복문 구조입니다. Listing 3-3에서 while 반복문를 사용한 카운트다운 예제와 같이 일부 코드를 특정 횟수만큼 실행하려는 상황에서도 대부분의 Rustacean은 for 반복문를 사용합니다. 이를 수행하는 방법은 표준 라이브러리에서 제공하는 Range를 사용하는 것입니다. 이 범위는 한 숫자에서 시작하여 다른 숫자 앞에서 끝나는 모든 숫자를 순서대로 생성합니다.\n카운트다운은 for 반복문와 아직 언급하지 않은 rev 방법을 사용하여 범위를 역전시키는 것과 같습니다.\n파일 이름: src/main.rs\nfn main() {\n    for number in (1..4).rev() {\n        println!(`{number}!`);\n    }\n    println!(`LIFTOFF!!!`);\n}\n\n이 코드가 좀 더 멋지죠?\n요약\n해냈어요! 변수, 스칼라 및 복합 데이터 유형, 함수, 주석, if 표현식 및 반복문에 대해 배웠습니다! 이 장에서 설명한 개념을 연습하려면 다음을 수행하는 프로그램을 작성해 보십시오.\n\n화씨와 섭씨 사이의 온도를 변환합니다.\nn 번째 피보나치 수를 생성합니다 .\n노래의 반복을 활용하여 크리스마스 캐롤 The Twelve Days of Christmas의 가사를 인쇄하세요.\n\n계속 진행할 준비가 되면 다른 프로그래밍 언어에는 일반적으로 존재하지 않는 Rust의 개념인 소유권에 대해 이야기하겠습니다.\n","id":"https://hwjskt.github.io/rust/chapter3/5-control-flow/","title":"Control Flow"},"https://hwjskt.github.io/rust/chapter4/":{"body":"요약\n\n소유권(ownership)\n빌림(borrowing)\n슬라이스(slices)\nRust가 메모리에 데이터를 배치하는 방법\n\n소유권 이해\n소유권은 Rust의 가장 고유한 기능이며, 언어의 나머지 부분에 깊은 영향을 미칩니다. 이를 통해 Rust는 가비지 콜렉터 없이 메모리 안전을 보장할 수 있으므로, 소유권이 작동하는 방식을 이해하는 것이 중요합니다. 이 장에서 우리는 소유권 뿐만아니라, 빌림(borrowing), 슬라이스(slices), Rust가 메모리에 데이터를 배치하는 방법과 같은 몇 가지 관련 기능에 대해 이야기할 것입니다.\n","id":"https://hwjskt.github.io/rust/chapter4/","title":"Understanding Ownership"},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"body":"요약\n\nRust 메모리 관리는 소유권 시스템이다. (가비지 컬렉터가 없다)\n하나의 값에는 하나의 소유자만 있다.\n범위를 벗어나면 값과 소유자는 메모리에서 지워진다. \n메모리에 데이터를 저장하는 2가지 방식\n\n\n스택 : 정해진 위치에 정해진 크기의 데이터\n\nlet s2 = s1;   // copy 된다. 변수 s1, s2 모두 사용가능\n\n\n\n힙 : 크기를 모르는 데이터\n\n\n별도의 공간에 값을 저장하고, 주소(포인터)만 메모해둔다.\n\n\n값을 얻으려면 주소를 얻고, 주소의 위치로 찾아간다.\n\n\nlet s2 = s1;   // move 된다. 변수 s1은 지워진다.\n\n\n\n\n\nstring 의 2가지 type\n\nstring literals : 스택, 불변\nString : 힙, 변경가능\n\n\n값을 복제(메모리의 2군데에 값을 저장하려면)\n\n스택 : 파이썬 처럼 복사하면됨\n힙 : clone() 으로 복사\n\n\n함수에 값을 전달하기\n\n변수에 값을 할당할 때와 비슷 (사용하면 소유권이 옮겨진다)\n소유권 옮기지 않고 여러번 사용하려면 참조(reference) 기능 사용 \n\n\n\n소유권이란 무엇입니까?\n소유권은 Rust 프로그램이 메모리를 관리하는 방식을 지배하는 일련의 규칙입니다. 모든 프로그램은 실행하는 동안 컴퓨터의 메모리를 사용하는 방식을 관리해야 합니다.\n\n일부 언어에는 프로그램이 실행될 때 더 이상 사용되지 않는 메모리를 정기적으로 찾는 가비지 수집 기능이 있습니다.\n다른 언어에서는 프로그래머가 명시적으로 메모리를 할당하고 해제해야 합니다.\nRust 에서 메모리는 소유권 시스템을 통해 관리됩니다. 컴파일러는 일련의 규칙을 확인하며, 규칙 중 하나라도 위반되면 프로그램이 컴파일되지 않습니다. 소유권 시스템은 프로그램이 실행되는 동안 느려지게 하지 않습니다. (가비지 수집기능은 수집이 진행되는 동안 프로그램이 느려지기도 합니다)\n\n소유권은 많은 프로그래머에게 새로운 개념이기 때문에 익숙해지는 데 시간이 걸립니다. 좋은 소식은 Rust와 소유권 시스템의 규칙에 대한 경험이 많을수록 안전하고 효율적인 코드를 자연스럽게 개발하는 것이 더 쉬워진다는 것입니다. 견뎌내세요!\n소유권을 이해하면 Rust 만의 기능을 이해하기 기초를 갖게 됩니다. 이 장에서는 매우 일반적인 데이터 구조인 문자열(String) 예제를 통해 소유권을 배웁니다.\n\n스택(Stack)과 힙(Heap)\n많은 프로그래밍 언어에서는 스택과 힙에 대해 자주 생각할 필요가 없습니다. 그러나 Rust와 같은 시스템 프로그래밍 언어에서는 값이 스택에 있는지 힙에 있는지에 따라 언어의 작동 방식과 특정 결정을 내려야 하는 이유가 달라집니다. 소유권의 일부는 이 장의 뒷부분에서 스택과 힙과 관련하여 설명할 것이므로 준비를 위해 간단히 설명합니다.\n스택과 힙은 모두 코드에서 런타임에 사용할 수 있는 메모리의 일부이지만 서로 다른 방식으로 구성됩니다. 스택은 값을 가져온 순서대로 저장하고 반대 순서로 값을 제거합니다. 이것을 last in, first out 이라고 합니다. 접시 더미를 생각해 보십시오. 접시를 더 추가하면 더미 위에 놓고 접시가 필요하면 위에서 하나를 치웁니다. 중간이나 바닥에서 접시를 추가하거나 제거하는 것은 허락되지 않습니다! 데이터를 추가하는 것을 스택에 pushing 하는 것을 , 데이터를 제거하는 것을 스택에서 popping 하는 것을 말합니다. 스택에 저장된 모든 데이터는 알려지고 고정된 크기를 가져야 합니다. 컴파일 시 크기를 알 수 없거나 크기가 변경될 수 있는 데이터는 대신 힙에 저장해야 합니다.\n힙은 덜 조직적입니다. 힙에 데이터를 넣을 때 일정량의 공간을 요청합니다. 메모리 할당자는 힙에서 충분히 큰 빈 지점을 찾아 사용 중인 것으로 표시하고 해당 위치의 주소인 포인터를 반환합니다. 이 프로세스를 힙에 할당(allocating on the heap) 한다고 하며 때로는 그냥 할당(allocating) 으로 줄여서 이야기합니다. (스택에 값을 푸시하는 것은 할당으로 간주되지 않습니다). 힙에 대한 포인터는 알려지고, 고정된 크기이므로 포인터를 스택에 저장할 수 있습니다. 하지만 실제 데이터를 원할 때는 포인터를 따라 찾아가야 합니다. 식당에 앉아 있다고 생각해보세요. 들어갈 때 그룹의 인원수를 말하면 호스트가 모든 사람에게 맞는 빈 테이블을 찾아 그곳으로 안내합니다. 그룹의 누군가가 늦게 오면 그들은 당신을 찾기 위해 당신이 어디에 앉았는지 물어볼 수 있습니다.\n할당자가 새 데이터를 저장할 위치를 검색할 필요가 없기 때문에 스택에 푸시하는 것이 힙에 할당하는 것보다 빠릅니다. 해당 위치는 항상 스택의 맨 위에 있습니다. 상대적으로 힙에 공간을 할당하려면 할당자가 먼저 데이터를 보유할 수 있을 만큼 충분히 큰 공간을 찾은 다음 다음 할당을 준비하기 위해 기록을 수행해야 하기 때문에 더 많은 작업이 필요합니다.\n힙에 있는 데이터에 액세스하려면 스택에 있는 포인터(주소)를 알아내고, 그 위치로 찾아가야 합니다. 그래서 힙에 있는 데이터에 액세스하는 것이 스택에 있는 데이터에 액세스하는 것보다 느립니다. 최신 프로세서가 메모리 안에서 점프를 적게하면 더 빠릅니다. 비유를 계속해서 많은 테이블에서 주문을 받는 식당의 서버를 생각해 보십시오. 다음 테이블로 이동하기 전에 한 테이블에서 모든 주문을 받는 것이 가장 효율적입니다. 테이블 A에서 주문을 받은 다음 테이블 B에서 주문을 받고, 다시 A에서 주문을 받고, 다시 B에서 주문을 받는 것은 훨씬 더 느린 프로세스입니다. 마찬가지로, 프로세서는 다른 데이터와 멀리 떨어져 있는 데이터(힙에 있을 수 있으므로)보다, 가까운 데이터(스택에 있는 데이터)에 대해 작업하는 경우 작업을 더 잘 수행할 수 있습니다.\n코드가 함수를 호출하면, 함수에 값이 전달 됩니다. 이 값은 힙의 데이터에 대한 포인터 일수도 있습니다. 그리고 함수의 로컬 변수가 스택으로 푸시됩니다. 함수가 끝나면 해당 값이 스택에서 제거됩니다.\n코드의 어떤 부분이 힙에서 어떤 데이터를 사용하는지 추적하고, 힙에서 중복 데이터의 양을 최소화하고, 공간이 부족하지 않도록 힙에서 사용하지 않는 데이터를 정리하는 것은 모두 소유권이 해결하는 문제입니다. 소유권을 이해하면 스택과 힙에 대해 자주 생각할 필요가 없지만 소유권의 주요 목적이 힙 데이터를 관리하는 것임을 알면 소유권이 작동하는 방식을 설명하는 데 도움이 될 수 있습니다.\n\n소유권 규칙\n먼저 소유권 규정을 살펴보겠습니다. 이러한 규칙을 설명하는 예제를 통해 작업할 때 이러한 규칙을 염두에 두십시오.\n\nRust의 각 값에는 소유자가 있습니다.\n한 번에 한 명의 소유자만 있을 수 있습니다.\n소유자가 범위를 벗어나면 값이 삭제됩니다.\n\n변수 범위\n우리는 Rust 의 기본 구문을 이미 배웠기때문에, 이제부터 예제에  fn main() { 코드를 생략하겠습니다. 따라서 다음 예제를  main 함수 안에 넣어야 합니다.  결과적으로 우리의 예제는 좀 더 간결해지고 실제 세부 사항에 집중할 수 있습니다.\n소유권의 첫 번째 예로서 일부 변수의 *범위(scope)*를 살펴보겠습니다. 범위(scope)는 아이템이 유효한, 프로그램 내의 범위입니다. 다음 변수를 사용하십시오.\nlet s = `hello`;\n\n변수 s는 문자열 리터럴을 참조하며, 문자열 값은 프로그램의 텍스트에 하드코딩됩니다. 변수는 선언된 시점부터 현재 범위가 끝날 때까지 유효합니다. 목록 4-1은 변수 s가 유효한 위치에 주석이 달린 프로그램을 보여줍니다.\n    {                      // s is not valid here, it’s not yet declared\n        let s = `hello`;   // s is valid from this point forward\n\n        // do stuff with s\n    }                      // this scope is now over, and s is no longer valid\n\n목록 4-1: 변수와 변수가 유효한 범위\n즉, 여기에는 두 가지 중요한 시점이 있습니다.\n\ns가 범위에 포함 되면 유효합니다.\n범위를 벗어날 때까지 유효합니다.\n\n이 시점에서 범위와 변수가 유효한 시기는 다른 프로그래밍 언어와 유사합니다. 이제 문자열(String) 유형을 도입하여 이러한 이해를 바탕으로 빌드하겠습니다.\n문자열 유형\n소유권 규칙을 설명하려면 3장의 데이터 유형 섹션에서 다룬 것보다 더 복잡한 데이터 유형이 필요합니다. 이전에 다룬 유형은 알려진 크기이며, 스택에 저장(store)하고 꺼내기(pop)를 할 수 있었습니다. 코드의 다른 부분에 있는 다른 범위(scope)에서, 동일한 값을 사용해야 하는 경우, 새롭고 독립적인 인스턴스를 만들기 위해 신속하고 간단하게 복사할 수 있습니다. \n그러나 우리는 힙에 저장된 데이터를 살펴보고 Rust가 해당 데이터를 정리할 시기를 어떻게 아는지 살펴보고자 합니다. 문자열(String) 유형이 좋은 예입니다.\n소유권과 관련된 문자열(String) 부분에 집중하겠습니다. 이러한 측면은 다른 복합 데이터 유형에도 적용됩니다. (복합 데이터 유형은 표준 라이브러리에서 제공하기도 하고 사용자가 생성할 수 도 있습니다. ) 8장에서 문자열(String)에 대해 더 깊이 논의할 것입니다.\n우리는 문자열 값이 우리 프로그램에 하드코딩되는 문자열 리터럴(string literals)을 이미 보았습니다. 문자열 리터럴은 편리하지만 텍스트를 사용하려는 모든 상황에 적합하지는 않습니다. 한 가지 이유는 그것들이 불변이라는 것입니다. 다른 하나는 코드를 작성할 때 모든 문자열 값을 알 수 있는 것은 아니라는 것입니다. 예를 들어 사용자 입력을 받아 저장하려면 어떻게 해야 할까요? \n이러한 상황을 위해 Rust에는 두 번째 문자열 유형인 String이 있습니다. 이 유형은 힙에 할당된 데이터를 관리하므로 컴파일 시 알 수 없는 양의 텍스트를 저장할 수 있습니다. 다음과 같이 from 함수를 사용하여 문자열 리터럴에서 문자열(String)을 만들 수 있습니다.\nlet s = String::from(`hello`);\n\n이중 콜론 :: 연산자를 사용하면, string_from과 같은 일종의 이름을 사용하는 대신, String 유형 아래에서 이 특정 from 함수의 이름을 지정할 수 있습니다. 이 구문은 5장의 메서드 구문 섹션과 7장의 모듈 트리에서 항목을 참조하기 위한 경로 에서 모듈의 네임스페이스에 대해 설명할 때 더 자세히 설명합니다.\n이러한 종류의 문자열은 변경될 수 있습니다 .\n    let mut s = String::from(`hello`);\n\n    s.push_str(`, world!`); // push_str() appends a literal to a String\n\n    println!(`{}`, s); // This will print `hello, world!`\n\n차이점은 무엇입니까? 문자열(String)은 변경할 수 있지만 리터럴은 변경할 수 없는 이유는 무엇입니까? 차이점은 이 두 가지 유형이 메모리를 처리하는 방식입니다.\n메모리와 할당\n문자열 리터럴의 경우 컴파일 시간에 내용을 알기 때문에 텍스트가 최종 실행 파일에 직접 하드코딩됩니다. 이것이 문자열 리터럴이 빠르고 효율적인 이유입니다. 그러나 이러한 속성은 문자열 리터럴이 불변(immutable)하기 때문에 가능합니다. 불행하게도 우리는 컴파일 타임에 크기를 알 수 없고 프로그램을 실행하는 동안 크기가 변경될 수 있는 각 텍스트 조각에 대한 메모리 덩어리를 바이너리에 넣을 수 없습니다.\n문자열(String) 유형을 사용하여 변경 가능하고 크기 변경이 가능한 텍스트 조각을 지원하려면, 컴파일 시간에 알 수 없는 내용을 보관할 메모리 양을 힙에 할당해야 합니다. 이는 다음을 의미합니다.\n\n런타임 시 메모리 할당자에서 메모리를 요청해야 합니다.\n문자열(String) 작업이 완료되면 이 메모리를 할당자에게 반환하는 방법이 필요합니다.\n\n첫 번째 부분은 우리가 수행합니다. String::from을 호출하면 필요한 메모리를 요청합니다. 이것은 프로그래밍 언어에서 거의 보편적입니다.\n그러나 두 번째 부분은 다릅니다. 가비지 컬렉터(garbage collector) 가 있는 언어에서 가비지 컬렉터는 더 이상 사용되지 않는 메모리를 추적하고 정리하므로 우리는 그것에 대해 생각할 필요가 없습니다. 반면에 가비지 컬렉터가 없는 대부분의 언어에서는 메모리를 더 이상 사용하지 않는 시기를 식별하고, 메모리를 해제하는 코드를 호출하는 것은 우리의 책임입니다. 이를 올바르게 수행하는 것은 역사적으로 어려운 프로그래밍 문제였습니다. 잊어버리면 메모리를 낭비하게 됩니다. 너무 일찍 수행하면 유효하지 않은 변수가 생깁니다. 두 번 하면 그것도 버그입니다. 정확히 하나의 할당(allocate)과 정확히 하나의 자유(free)를 쌍으로 연결해야 합니다.\nRust는 다른 경로를 취합니다. 메모리를 소유한 변수가 범위를 벗어나면 메모리가 자동으로 반환(free)됩니다. 다음은 문자열 리터럴 대신 문자열(String)을 사용하는 Listing 4-1의 범위 예제 버전입니다.\n    {\n        let s = String::from(`hello`); // s is valid from this point forward\n\n        // do stuff with s\n    }                                  // this scope is now over, and s is no\n                                       // longer valid\n\nString이 필요로 하는 메모리를 할당자에게 반환할 수 있는 자연스러운 지점이 있습니다. s가 범위를 벗어날 때입니다. 변수가 범위를 벗어나면 Rust는 우리를 위해 특별한 함수를 호출합니다. 이 함수를 drop 이라고 하며 String의 작성자가 메모리를 반환하는 코드를 넣을 수 있는 곳입니다. Rust는 닫는 중괄호에서 자동으로 drop을 호출합니다.\n\n참고: C++에서 항목의 수명이 끝날 때 리소스 할당을 취소하는 이 패턴을 *리소스 획득이 초기화(Resource Acquisition Is Initialization, RAII) 라고도 합니다. Rust의 드롭 기능은 RAII 패턴을 사용해 본 적이 있다면 익숙할 것입니다.\n\n이 패턴은 Rust 코드 작성 방식에 지대한 영향을 미칩니다. 지금 당장은 간단해 보일 수 있지만, 힙에 할당한 데이터를 여러 변수가 사용하도록 하려는 복잡한 상황에서는 코드가 예상치 못한 방식으로 작동할 수 있습니다. 이제 그러한 상황 중 일부를 살펴보겠습니다.\nMove와 상호 작용하는 변수 및 데이터\n여러 변수는 Rust에서 다른 방식으로 동일한 데이터와 상호 작용할 수 있습니다. 목록 4-2에서 정수를 사용하는 예를 살펴보겠습니다.\n    let x = 5;\n    let y = x;\n\n목록 4-2: 변수 x의 정수 값을 y에 할당\n이것이 무엇을 하는지 짐작할 수 있을 것입니다. 값 5를 x에 바인딩합니다. 그런 다음 x의 값을 복사하여 y에 바인딩합니다. 이제 두 개의 변수 x와 y가 있고 둘 다 5입니다. 정수는 알려지고 고정된 크기를 가진 단순한 값이고, 이 두 5 값이 스택에 푸시되기 때문에 이것이 실제로 일어나고 있는 일입니다.\n이제 문자열(String) 버전을 살펴보겠습니다.\n    let s1 = String::from(`hello`);\n    let s2 = s1;\n\n이것은 매우 유사해 보이기 때문에 작동 방식이 동일할 것이라고 가정할 수 있습니다. 즉, 두 번째 줄은 s1의 값을 복사하여 s2에 바인딩합니다. 그러나 이것은 실제로 일어나는 일이 아닙니다.\n문자열(String)에 무슨 일이 일어나고 있는지 보려면 그림 4-1을 살펴보십시오. 문자열(String)은 왼쪽에 표시된 것처럼 세 부분으로 구성됩니다. 문자열의 내용을 보유하는 메모리에 대한 포인터, 길이 및 용량입니다. 이 데이터 그룹은 스택에 저장됩니다. 오른쪽에는 내용을 보유하는 힙의 메모리가 있습니다.\n\n그림 4-1: s1에 바인딩된 hello 값을 보유하는 문자열(String)의 메모리 표현\n길이(length)는 문자열(String)의 내용이 현재 사용 중인 메모리 양(바이트)입니다. 용량(capacity)은 문자열(String)이 할당자로부터 받은 총 메모리 양(바이트)입니다. 길이와 용량의 차이는 중요하지만 이 맥락에서는 중요하지 않으므로 지금은 용량을 무시해도 됩니다.\ns1을 s2에 할당하면 문자열(String) 데이터가 복사됩니다. 즉, 스택에 있는 포인터, 길이 및 용량을 복사합니다. (포인터가 참조하는) 힙에 있는 데이터를 복사하지 않습니다. 즉, 메모리의 데이터 표현은 그림 4-2와 같습니다.\n\n그림 4-2: s1의 포인터, 길이 및 용량의 복사본이 있는 변수 s2의 메모리 표현\n표현은 그림 4-3처럼 보이지 않습니다 . Rust가 힙 데이터도 복사했다면 메모리는 그림 4-3처럼 생겼을 것입니다. Rust가 이렇게 하면 힙의 데이터가 큰 경우 s2 = s1 작업은 런타임 성능을 떨어뜨립니다. \n\n그림 4-3: Rust가 힙 데이터도 복사한 경우 s2 = s1이 무엇을 할 수 있는지에 대한 또 다른 가능성\n이전에 우리는 변수가 범위를 벗어나면 Rust가 자동으로 drop 함수를 호출하고 해당 변수에 대한 힙 메모리를 정리한다고 말했습니다. 그러나 그림 4-2는 동일한 위치를 가리키는 두 데이터 포인터를 보여줍니다. 이것은 문제입니다. s2와 s1이 범위를 벗어나면 둘 다 동일한 메모리를 해제하려고 합니다. 이것은 *이중 자유 오류(double free error)*로 알려져 있으며 이전에 언급한 메모리 안전 버그 중 하나입니다. 메모리를 두 번 해제하면 메모리 손상이 발생하여 잠재적으로 보안 취약성이 발생할 수 있습니다.\n메모리 안전을 보장하기 위해 let s2 = s1; 줄 다음에 Rust는 s1을 더 이상 유효하지 않은 것으로 간주합니다. 따라서 Rust는 s1이 범위를 벗어날 때 아무것도 해제할 필요가 없습니다. s2가 생성된 후 s1을 사용하려고 하면 어떤 일이 발생하는지 확인하십시오. 작동하지 않습니다:\n    let s1 = String::from(`hello`);\n    let s2 = s1;\n\n    println!(`{}, world!`, s1);\n\nRust가 무효화된 참조를 사용하지 못하게 하기 때문에 다음과 같은 오류가 발생합니다.\n$ cargo run\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0382]: borrow of moved value: `s1`\n --&gt; src/main.rs:5:28\n  |\n2 |     let s1 = String::from(`hello`);\n  |         -- move occurs because `s1` has type `String`, which does not implement the `Copy` trait\n3 |     let s2 = s1;\n  |              -- value moved here\n4 |\n5 |     println!(`{}, world!`, s1);\n  |                            ^^ value borrowed here after move\n  |\n  = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\nhelp: consider cloning the value if the performance cost is acceptable\n  |\n3 |     let s2 = s1.clone();\n  |                ++++++++\n\nFor more information about this error, try `rustc --explain E0382`.\nerror: could not compile `ownership` due to previous error\n\n다른 언어로 작업하면서 얕은 복사(shallow copy) 와 깊은 복사(deep copy) 용어를 들어본 적이 있다면, 데이터를 복사하지 않고 포인터, 길이, 용량을 복사한다는 개념은 아마도 얕은 복사를 하는 것처럼 들릴 것입니다. 그러나 Rust는 첫 번째 변수도 무효화하기 때문에 얕은 복사본이라고 하는 대신 이동(move) 이라고 합니다 . 이 예에서는 s1이 s2로 이동되었다고 말합니다. 따라서 실제로 일어나는 일은 그림 4-4에 나와 있습니다.\n\n그림 4-4: s1이 무효화된 후 메모리의 표현\n이중 자유 오류(double free error)가 해결되었습니다! s2만 유효하면 범위를 벗어나면 단독으로 메모리를 해제하고 완료됩니다.\n추가로 이것이 암시하는 디자인 선택이 있습니다: Rust는 데이터의 깊은 복사본을 자동으로 생성하지 않습니다. 따라서 자동 복사는 런타임 성능 측면에서 저렴하다고 가정할 수 있습니다.\n클론과 상호 작용하는 변수 및 데이터\n스택 데이터뿐만 아니라 String의 힙 데이터를 깊이 복사하려는 경우 복제(clone)이라는 일반적인 방법을 사용할 수 있습니다 . 5장에서 메서드 구문에 대해 논의하겠지만 메서드는 많은 프로그래밍 언어에서 공통적인 기능이기 때문에 이전에 본 적이 있을 것입니다.\n다음은 작동 중인 복제 방법의 예입니다.\n    let s1 = String::from(`hello`);\n    let s2 = s1.clone();\n\n    println!(`s1 = {}, s2 = {}`, s1, s2);\n\n이것은 잘 작동하며 힙 데이터가 복사 되는 그림 4-3에 표시된 동작을 명시적으로 생성합니다.\n복제(clone)에 대한 호출을 보면 임의의 코드가 실행되고 있고, 해당 코드가 비쌀 수 있음을 알 수 있습니다. 뭔가 다른 일이 벌어지고 있다는 시각적 지표입니다.\n스택 전용 데이터: 복사\n우리가 아직 이야기하지 않은 또 다른 주름이 있습니다. 정수를 사용하는 이 코드(목록 4-2에 그 일부가 표시됨)는 작동하고 유효합니다.\n    let x = 5;\n    let y = x;\n\n    println!(`x = {}, y = {}`, x, y);\n\n그러나 이 코드는 우리가 방금 배운 것과 모순되는 것 같습니다. 복제(clone) 함수를 사용하지 않았지만  x는 여전히 유효하고 y로 이동(move)되지 않았습니다.\n그 이유는 정수는 컴파일 타임에 알려진 크기를 가지고, 스택에 완전히 저장되기 때문에 실제 값의 복사본을 빠르게 만들 수 있기 때문입니다. 즉, 변수 y를 만든 후에 x가 유효하지 않도록 할 이유가 없습니다. 즉, 여기에서는 깊은 복사와 얕은 복사 사이에 차이가 없으므로, clone은 일반적인 얕은 복사와 다른 작업을 수행하지 않으며 생략할 수 있습니다.\nRust에는 복사(copy) 특성이라는 특수 주석이 있습니다. 정수와 마찬가지로 스택에 저장된 유형에 배치할 수 있습니다(특성에 대한 자세한 내용은 10장 에서 설명 ). 유형이 복사 특성을 구현하는 경우 이를 사용하는 변수는 이동하지 않고 복사되어 다른 변수에 할당된 후에도 여전히 유효합니다.\n러스트는 타입 또는 그 부분이 Drop 특성을 구현한 경우, Copy로 타입 주석을 달지 못하게 합니다. 값이 범위를 벗어나고 해당 타입에 복사 주석을 추가할 때 유형에 특별한 일이 발생해야 하는 경우 컴파일 타임 오류가 발생합니다. 특성을 구현하기 위해 유형에 복사 주석을 추가하는 방법에 대해 알아보려면 부록 C의 파생 가능한 특성을 참조하세요.\n그렇다면 복사 특성을 구현하는 타입은 무엇입니까? 지정된 유형에 대한 설명서를 확인하여 확인할 수 있지만, 일반적으로 간단한 스칼라 값 그룹은 복사를 구현할 수 있으며, 할당이 필요하거나 리소스의 일부 형식은 복사를 구현할 수 없습니다. 다음은 복사를 구현하는 몇 가지 유형입니다.\n\nu32와 같은 모든 정수 유형.\n값이 true 및 false인 부울 유형 bool.\nf64와 같은 모든 부동 소수점 유형.\n문자 유형 char.\n튜플(복사도 구현하는 유형만 포함하는 경우). 예를 들어 (i32, i32)는 복사를 구현하지만 (i32, String)은 구현하지 않습니다.\n\n소유권 및 함수\n함수에 값을 전달하는 메커니즘은, 변수에 값을 할당할 때와 비슷합니다. 변수를 함수에 전달하면 할당과 마찬가지로 이동하거나 복사합니다. 목록 4-3에는 변수가 범위에 들어가고 나가는 위치를 보여주는 몇 가지 주석이 있는 예제가 있습니다.\n파일 이름: src/main.rs\nfn main() {\n    let s = String::from(`hello`);  // s comes into scope\n\n    takes_ownership(s);             // s's value moves into the function...\n                                    // ... and so is no longer valid here\n\n    let x = 5;                      // x comes into scope\n\n    makes_copy(x);                  // x would move into the function,\n                                    // but i32 is Copy, so it's okay to still\n                                    // use x afterward\n\n} // Here, x goes out of scope, then s. But because s's value was moved, nothing\n  // special happens.\n\nfn takes_ownership(some_string: String) { // some_string comes into scope\n    println!(`{}`, some_string);\n} // Here, some_string goes out of scope and `drop` is called. The backing\n  // memory is freed.\n\nfn makes_copy(some_integer: i32) { // some_integer comes into scope\n    println!(`{}`, some_integer);\n} // Here, some_integer goes out of scope. Nothing special happens.\n\n목록 4-3: 소유권과 범위가 주석으로 표시된 함수\ntakes_ownership을 호출한 후에 s를 사용하려고 하면 Rust에서 컴파일 타임 오류가 발생합니다. 이러한 정적 검사는 실수로부터 우리를 보호합니다. s 및 x를 사용하는 코드를 main에 추가하여 사용할 수 있는 위치와 소유권 규칙에 따라 사용할 수 없는 위치를 확인하십시오.\n반환 값 및 범위\n반환 값은 소유권을 이전할 수도 있습니다. Listing 4-4는 Listing 4-3과 유사한 주석을 사용하여 일부 값을 반환하는 함수의 예를 보여줍니다.\n파일 이름: src/main.rs\nfn main() {\n    let s1 = gives_ownership();         // gives_ownership moves its return\n                                        // value into s1\n\n    let s2 = String::from(`hello`);     // s2 comes into scope\n\n    let s3 = takes_and_gives_back(s2);  // s2 is moved into\n                                        // takes_and_gives_back, which also\n                                        // moves its return value into s3\n} // Here, s3 goes out of scope and is dropped. s2 was moved, so nothing\n  // happens. s1 goes out of scope and is dropped.\n\nfn gives_ownership() -&gt; String {             // gives_ownership will move its\n                                             // return value into the function\n                                             // that calls it\n\n    let some_string = String::from(`yours`); // some_string comes into scope\n\n    some_string                              // some_string is returned and\n                                             // moves out to the calling\n                                             // function\n}\n\n// This function takes a String and returns one\nfn takes_and_gives_back(a_string: String) -&gt; String { // a_string comes into\n                                                      // scope\n\n    a_string  // a_string is returned and moves out to the calling function\n}\n\nListing 4-4: 반환 값의 소유권 이전\n변수의 소유권은 매번 동일한 패턴을 따릅니다. 다른 변수에 값을 할당하면 변수가 이동합니다. 힙에 데이터를 포함하는 변수가 범위를 벗어나면 데이터의 소유권이 다른 변수로 이동되지 않는 한 삭제로 값이 정리됩니다.\n이것이 작동하는 동안 소유권을 가져간 다음 모든 기능에 대한 소유권을 반환하는 것은 약간 지루합니다. 함수가 값을 사용하지만 소유권은 가지지 않으려면 어떻게 해야 할까요? 반환하려는 함수 본문의 결과 데이터 외에도 다시 사용하려는 경우 전달하는 모든 항목도 다시 전달해야 한다는 점은 매우 성가신 일입니다.\nRust는 Listing 4-5에 표시된 것처럼 튜플을 사용하여 여러 값을 반환할 수 있습니다.\n파일 이름: src/main.rs\nfn main() {\n    let s1 = String::from(`hello`);\n\n    let (s2, len) = calculate_length(s1);\n\n    println!(`The length of '{}' is {}.`, s2, len);\n}\n\nfn calculate_length(s: String) -&gt; (String, usize) {\n    let length = s.len(); // len() returns the length of a String\n\n    (s, length)\n}\n\n목록 4-5: 매개변수 소유권 반환\n그러나 이것은 일반적이어야 하는 개념에 대해 너무 많은 의식과 많은 작업입니다. 운 좋게도 Rust에는 소유권을 이전하지 않고 값을 사용하는 참조(references)라는 기능이 있습니다 .\n","id":"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/","title":"What is Ownership?"},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"body":"요약\n\n참조를 하면 소유하지 않고 변수를 사용할 수 있다.\n원래 변수가 불변이면, borrowing 해와도 불변이다\n값에 대한 가변 참조는 하나만 가능하다.\n값에 대한 불변 참조는 여러개 만들 수 있다. \n값에 대한 불변 참조가 있으면, 가변 참조를 가질 수 없습니다.\n\n참조(reference) 및 차용(borrowing)\nFilename: src/main.rs\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let (s2, len) = calculate_length(s1);\n\n    println!(\"The length of '{}' is {}.\", s2, len);\n}\n\nfn calculate_length(s: String) -&gt; (String, usize) {\n    let length = s.len(); // len() returns the length of a String\n\n    (s, length)\n}\n\n목록 4-5: 매개변수 소유권 반환\nListing 4-5에 있는 튜플 코드의 문제는 calculate_length를 호출한 후에 String을 계속 사용하려면 호출 함수에서 String을 반환해야 한다는 것입니다. 왜냐하면 String 이 calculate_length 함수로 이동했기 때문입니다.\n대신 String값에 대한 참조(reference)를 사용할 수 있습니다. 참조는 해당 주소에 저장된 데이터에 액세스하기 위한 주소라는 점에서 포인터와 같습니다. 해당 데이터는 다른 변수가 소유합니다. 포인터와 달리 참조는 해당 참조의 수명 동안 특정 유형의 유효한 값을 가리키도록 보장됩니다.\n아래 코드는 값의 소유권을 가져오는 대신, 개체에 대한 참조를 매개 변수로 포함하는 calculate_length 함수를 정의하고 사용하는 방법입니다.\n파일 이름: src/main.rs\nfn main() {\n    let s1 = String::from(`hello`);\n\n    let len = calculate_length(&amp;s1);\n\n    println!(`The length of '{}' is {}.`, s1, len);\n}\n\nfn calculate_length(s: &amp;String) -&gt; usize {\n    s.len()\n}\n\n먼저, 변수 선언의 모든 튜플 코드와 함수 반환 값이 사라진 것을 확인하십시오. 둘째, &amp;s1을 calculate_length에 전달하고 정의에서 String이 아닌 &amp;String을 사용합니다. 이러한 앰퍼샌드는 참조를 나타내며, 소유권을 갖지 않고 일부 값을 참조할 수 있습니다. 그림 4-5는 이 개념을 보여줍니다.\n\n그림 4-5: String s1을 가리키는 &amp;String s 다이어그램\n\n참고: &amp;를 사용한 참조의 반대는 역 참조 연산자 *를 사용하는 역참조입니다. 8장에서 역참조 연산자의 일부 사용법을 살펴보고 15장에서 역참조에 대한 자세한 내용을 논의합니다.\n\n여기서 함수 호출을 자세히 살펴보겠습니다.\n    let s1 = String::from(`hello`);\n\n    let len = calculate_length(&amp;s1);\n\n&amp;s1 구문을 사용하면 s1 값을 참조하지만 소유하지는 않는 참조 를 만들 수 있습니다. 소유하지 않기 때문에 참조가 사용을 중지해도 가리키는 값은 삭제되지 않습니다.\n마찬가지로 함수의 시그니처는 &amp;를 사용하여 매개변수 s의 유형이 참조임을 나타냅니다. 몇 가지 설명 주석을 추가해 보겠습니다.\nfn calculate_length(s: &amp;String) -&gt; usize { // s is a reference to a String\n    s.len()\n} // Here, s goes out of scope. But because it does not have ownership of what\n  // it refers to, it is not dropped.\n\n변수 s가 유효한 범위는 모든 함수 매개 변수의 범위와 동일하지만 s는 소유권이 없기 때문에 s가 사용 중지될 때 참조가 가리키는 값은 삭제되지 않습니다. 함수에 실제 값 대신 매개 변수로 참조가 있으면 소유권을 가져본 적이 없기 때문에 소유권을 돌려주기 위해 값을 반환할 필요가 없습니다.\n참조 차용(reference borrowing) 을 만드는 작업을 호출합니다. 실생활에서와 마찬가지로 사람이 무언가를 소유하고 있으면 그 사람에게서 빌릴 수 있습니다. 끝나면 돌려줘야 합니다. 당신은 그것을 소유하지 않습니다.\n그렇다면 빌린 것을 수정하려고 하면 어떻게 될까요? 목록 4-6의 코드를 사용해 보십시오. 이 코드는 작동하지 않습니다!\n파일 이름: src/main.rs\nfn main() {\n    let s = String::from(`hello`);\n\n    change(&amp;s);\n}\n\nfn change(some_string: &amp;String) {\n    some_string.push_str(`, world`);\n}\n\n목록 4-6: 빌린 값 수정 시도\n오류는 다음과 같습니다.\n$ cargo run\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0596]: cannot borrow `*some_string` as mutable, as it is behind a `&amp;` reference\n --&gt; src/main.rs:8:5\n  |\n7 | fn change(some_string: &amp;String) {\n  |                        ------- help: consider changing this to be a mutable reference: `&amp;mut String`\n8 |     some_string.push_str(`, world`);\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `some_string` is a `&amp;` reference, so the data it refers to cannot be borrowed as mutable\n\nFor more information about this error, try `rustc --explain E0596`.\nerror: could not compile `ownership` due to previous error\n\n변수가 기본적으로 불변인 것처럼 참조도 마찬가지입니다. 우리는 우리가 참조하는 것을 수정할 수 없습니다.\n변경 가능한 참조\n목록 4-6의 코드를 수정하여 변경 가능한 참조 대신 사용하는 몇 가지 작은 조정만으로 빌린 값을 수정할 수 있습니다.\n파일 이름: src/main.rs\nfn main() {\n    let mut s = String::from(`hello`);\n\n    change(&amp;mut s);\n}\n\nfn change(some_string: &amp;mut String) {\n    some_string.push_str(`, world`);\n}\n\n먼저 s를 mut로 변경합니다. 그런 다음 change 함수를 호출할 때 &amp;mut s로 변경 가능한 참조를 사용합니다. 그리고 change 함수 정의에서 변경 가능한 참조를 허용하도록   some_string: &amp;mut String 으로 함수 시그니처를 업데이트합니다. 이것은 change 함수가 빌린 값을 변경한다는 것을 매우 분명하게 합니다.\n변경 가능한 참조에는 한 가지 큰 제한이 있습니다. 값에 대한 변경 가능한 참조가 이미 있는 경우, 해당 값에 대한 다른 참조를 가질 수 없습니다. s에 대한 두 개의 변경 가능한 참조를 만들려고 시도하는 이 코드는 실패합니다.\n파일 이름: src/main.rs\n    let mut s = String::from(`hello`);\n\n    let r1 = &amp;mut s;\n    let r2 = &amp;mut s;\n\n    println!(`{}, {}`, r1, r2);\n\n오류는 다음과 같습니다.\n$ cargo run\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0499]: cannot borrow `s` as mutable more than once at a time\n --&gt; src/main.rs:5:14\n  |\n4 |     let r1 = &amp;mut s;\n  |              ------ first mutable borrow occurs here\n5 |     let r2 = &amp;mut s;\n  |              ^^^^^^ second mutable borrow occurs here\n6 |\n7 |     println!(`{}, {}`, r1, r2);\n  |                        -- first borrow later used here\n\nFor more information about this error, try `rustc --explain E0499`.\nerror: could not compile `ownership` due to previous error\n\n이 오류는 s를 한 번에 두 번 이상 가변(mutable)으로 빌릴 수 없기 때문에 이 코드가 유효하지 않다고 말합니다. 첫 번째 변경 가능한 차용은 r1에 있으며 println!에서 사용될 때까지 지속되어야 합니다. 그런데 변경 가능한 참조의 생성과 사용 사이에 r2 라는 가변 참조(mutable references)를 만들었고, 이것은 r1과 동일한 데이터를 빌린 것입니다. \n동일한 데이터에 대한 여러 가변 참조를 동시에 금지하는 것은 매우 통제된 방식으로 변형을 허용합니다. 대부분의 언어에서는 원할 때마다 변경할 수 있기 때문에 새로운 Rustacean이 어려움을 겪고 있습니다. 이 제한을 갖는 이점은 Rust가 컴파일 시간에 데이터 경쟁(data race)을 방지할 수 있다는 것입니다. 데이터 경쟁은 경쟁 조건과 유사하며, 다음 세 가지 동작이 발생할 때 발생합니다.\n\n두 개 이상의 포인터가 동시에 동일한 데이터에 액세스합니다.\n적어도 하나의 포인터가 데이터에 쓰는 데 사용되고 있습니다.\n데이터에 대한 액세스를 동기화하는 데 사용되는 메커니즘이 없습니다.\n\n데이터 경쟁은 정의되지 않은 동작을 유발하며 런타임 시 추적하려고 할 때 진단 및 수정이 어려울 수 있습니다. Rust는 데이터 경쟁으로 코드를 컴파일하는 것을 거부함으로써 이 문제를 방지합니다!\n항상 그렇듯이 중괄호를 사용하여 새 스코프를 생성할 수 있으므로 동시 참조가 아닌 여러 변경 가능한 참조를 허용할 수 있습니다.\n    let mut s = String::from(`hello`);\n\n    {\n        let r1 = &amp;mut s;\n    } // r1 goes out of scope here, so we can make a new reference with no problems.\n\n    let r2 = &amp;mut s;\n\nRust는 변경 가능한 참조와 변경 불가능한 참조를 결합하기 위해 유사한 규칙을 적용합니다. 이 코드는 오류를 발생시킵니다.\n    let mut s = String::from(`hello`);\n\n    let r1 = &amp;s; // no problem\n    let r2 = &amp;s; // no problem\n    let r3 = &amp;mut s; // BIG PROBLEM\n\n    println!(`{}, {}, and {}`, r1, r2, r3);\n\n오류는 다음과 같습니다.\n$ cargo run\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable\n --&gt; src/main.rs:6:14\n  |\n4 |     let r1 = &amp;s; // no problem\n  |              -- immutable borrow occurs here\n5 |     let r2 = &amp;s; // no problem\n6 |     let r3 = &amp;mut s; // BIG PROBLEM\n  |              ^^^^^^ mutable borrow occurs here\n7 |\n8 |     println!(`{}, {}, and {}`, r1, r2, r3);\n  |                                -- immutable borrow later used here\n\nFor more information about this error, try `rustc --explain E0502`.\nerror: could not compile `ownership` due to previous error\n\n아휴! 또한 동일한 값에 대한 불변 참조가 있는 동안에는 가변 참조를 가질 수 없습니다.\n불변 참조의 사용자는 값이 갑자기 변경될 것이라고 기대하지 않습니다! 그러나 데이터를 읽기만 하는 사람은 다른 사람의 데이터 읽기에 영향을 줄 수 없기 때문에 여러 불변 참조가 허용됩니다.\n참조의 범위는 도입된 위치에서 시작하여 해당 참조가 마지막으로 사용된 시간까지 계속됩니다. 예를 들어, 이 코드는 가변 참조가 도입되기 전에 불변 참조의 마지막 사용인 println!이 발생하기 때문에 컴파일됩니다.\n    let mut s = String::from(`hello`);\n\n    let r1 = &amp;s; // no problem\n    let r2 = &amp;s; // no problem\n    println!(`{} and {}`, r1, r2);\n    // variables r1 and r2 will not be used after this point\n\n    let r3 = &amp;mut s; // no problem\n    println!(`{}`, r3);\n\n불변 참조 r1 및 r2의 범위는 println! 다음에 끝납니다. 변경 가능한 참조 r3이 생성되기 전 마지막으로 사용되는 위치입니다. 이러한 범위는 겹치지 않으므로 이 코드가 허용됩니다. 컴파일러는 범위가 끝나기 전 지점에서 참조가 더 이상 사용되지 않는다는 것을 알 수 있습니다.\n차용 오류가 때때로 실망스러울 수 있지만, 잠재적인 버그를 일찍(런타임이 아닌 컴파일 타임에) 지적하고 문제가 있는 곳을 정확히 보여주는 것은 Rust 컴파일러라는 점을 기억하십시오. 그러면 데이터가 생각했던 것과 다른 이유를 추적할 필요가 없습니다.\n매달린 참조(Dangling References)\n포인터가 있는 언어에서는 해당 메모리에 대한 포인터를 유지하면서 일부 메모리를 해제하여 댕글링 포인터 (다른 사람에게 제공되었을 수 있는 메모리의 위치를 참조하는 포인터)를 잘못 생성하기 쉽습니다. 대조적으로 Rust에서 컴파일러는 참조가 댕글링 참조가 되지 않도록 보장합니다. 일부 데이터에 대한 참조가 있는 경우 컴파일러는 데이터에 대한 참조가 범위를 벗어나기 전에 데이터가 범위를 벗어나지 않도록 합니다.\n러스트가 어떻게 컴파일 타임 오류를 방지하는지 알아보기 위해 댕글링 참조를 생성해 봅시다:\n파일 이름: src/main.rs\nfn main() {\n    let reference_to_nothing = dangle();\n}\n\nfn dangle() -&gt; &amp;String {\n    let s = String::from(`hello`);\n\n    &amp;s\n}\n\n오류는 다음과 같습니다.\n$ cargo run\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0106]: missing lifetime specifier\n --&gt; src/main.rs:5:16\n  |\n5 | fn dangle() -&gt; &amp;String {\n  |                ^ expected named lifetime parameter\n  |\n  = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\nhelp: consider using the `'static` lifetime\n  |\n5 | fn dangle() -&gt; &amp;'static String {\n  |                 +++++++\n\nFor more information about this error, try `rustc --explain E0106`.\nerror: could not compile `ownership` due to previous error\n\n이 오류 메시지는 아직 다루지 않은 기능인 수명을 나타냅니다. 10장에서 수명에 대해 자세히 논의할 것입니다. 그러나 수명에 대한 부분을 무시하면 메시지에는 이 코드가 문제인 이유에 대한 핵심이 포함되어 있습니다.\nthis function's return type contains a borrowed value, but there is no value\nfor it to be borrowed from\n\ndangle 코드의 각 단계에서 정확히 어떤 일이 발생하는지 자세히 살펴보겠습니다.\n파일 이름: src/main.rs\nfn dangle() -&gt; &amp;String { // dangle returns a reference to a String\n\n    let s = String::from(`hello`); // s is a new String\n\n    &amp;s // we return a reference to the String, s\n} // Here, s goes out of scope, and is dropped. Its memory goes away.\n  // Danger!\n\ndangle 내부에 s가 생성되기 때문에 dangle의 코드가 완료되면 s가 할당 해제됩니다. 그러나 우리는 그것에 대한 참조를 반환하려고 했습니다. 이는 이 참조가 잘못된 문자열을 가리키고 있음을 의미합니다. 좋지 않아! Rust는 우리가 이것을 하도록 허용하지 않을 것입니다.\n여기서 해결책은 문자열을 직접 반환하는 것입니다.\nfn no_dangle() -&gt; String {\n    let s = String::from(`hello`);\n\n    s\n}\n\n아무 문제 없이 작동합니다. 소유권이 이동되고 할당이 취소되지 않습니다.\n참조 규칙\n참조에 대해 논의한 내용을 요약해 보겠습니다.\n\n주어진 시간에 하나 의 가변 참조 또는 여러 불변 참조를 가질 수 있습니다.\n참조는 항상 유효해야 합니다.\n\n다음으로 다른 종류의 참조인 슬라이스를 살펴보겠습니다.\n","id":"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/","title":"References and Borrowing"},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"body":"요약\n\n문자열을 슬라이스 할 수 있다.\n문자열은 UTF-8 형식이어야 한다.\narray 도 슬라이스 할 수 있다.\n\n슬라이스 타입\n슬라이스를 사용하면 전체 컬렉션이 아닌, 컬렉션의 연속적인 요소 시퀀스를 참조할 수 있습니다. 슬라이스는 일종의 참조이므로 소유권이 없습니다.\n여기에 작은 프로그래밍 문제가 있습니다. 여러 단어들로 구성된 문자열을 공백으로 분리한 다음, 첫 번째 단어를 반환하는 함수를 작성하세요. 함수가 문자열에서 공백을 찾지 못하면 전체 문자열이 한 단어여야 하므로 전체 문자열이 반환되어야 합니다.\n슬라이스가 해결하는 문제를 이해하기 위해 슬라이스를 사용하지 않고 이 함수의 시그니처를 작성하는 방법을 살펴보겠습니다.\nfn first_word(s: &amp;String) -&gt; ?\n\nfirst_word 함수는 매개변수로 &amp;String을 가집니다. 우리는 소유권을 원하지 않으므로 여기까지는 괜찮습니다. 그러나 우리는 무엇을 반환해야 합니까? 문자열의 일부 에 대해 말할 방법이 없습니다. 그러나 공백으로 표시된 단어 끝의 인덱스를 반환할 수 있습니다. Listing 4-7과 같이 시도해 봅시다.\n파일 이름: src/main.rs\nfn first_word(s: &amp;String) -&gt; usize {\n    let bytes = s.as_bytes();\n\n    for (i, &amp;item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return i;\n        }\n    }\n\n    s.len()\n}\n\n목록 4-7: 바이트 인덱스 값을 String 매개변수로 반환하는 first_word 함수\n요소별로 문자열 요소를 살펴보고 값이 공백인지 확인해야 하므로 as_bytes 메서드를 사용하여 문자열을 바이트 배열로 변환합니다.\n    let bytes = s.as_bytes();\n\n다음으로 iter 메서드를 사용하여 바이트 배열에 대한 반복자를 만듭니다.\n    for (i, &amp;item) in bytes.iter().enumerate() {\n\n13장 에서 이터레이터에 대해 더 자세히 논의할 것입니다. 지금은 iter가 컬렉션의 각 요소를 반환하는 메서드이고 enumerate가 iter의 결과를 래핑하고 대신 튜플의 일부로 각 요소를 반환한다는 것을 알아두세요. enumerate에서 반환된 튜플의 첫 번째 요소는 인덱스이고 두 번째 요소는 요소에 대한 참조입니다. 지수를 직접 계산하는 것보다 조금 더 편리합니다.\nenumerate 메서드는 튜플을 반환하기 때문에 패턴을 사용하여 해당 튜플을 분해할 수 있습니다. 6장 에서 패턴에 대해 더 논의할 것입니다. for 루프에서 튜플의 인덱스에 i가 있고 튜플의 단일 바이트에 &amp;item이 있는 패턴을 지정합니다. .iter().enumerate()에서 요소에 대한 참조를 가져오므로 패턴에서 &amp;를 사용합니다.\nfor 루프 내에서 바이트 리터럴 구문을 사용하여 공백을 나타내는 바이트를 검색합니다. 공백을 찾으면 위치를 반환합니다. 그렇지 않으면 s.len()을 사용하여 문자열의 길이를 반환합니다.\n        if item == b' ' {\n            return i;\n        }\n    }\n\n    s.len()\n\n이제 문자열에서 첫 번째 단어의 끝 인덱스를 찾을 수 있는 방법이 있지만 문제가 있습니다. 자체적으로 usize를 반환하지만 &amp;String 컨텍스트에서 의미 있는 숫자일 뿐입니다. 즉, 문자열과는 별개의 값이기 때문에 앞으로도 유효하다는 보장이 없습니다. 목록 4-7의 first_word 함수를 사용하는 목록 4-8의 프로그램을 고려하십시오.\n파일 이름: src/main.rs\nfn main() {\n    let mut s = String::from(`hello world`);\n\n    let word = first_word(&amp;s); // word will get the value 5\n\n    s.clear(); // this empties the String, making it equal to ``\n\n    // word still has the value 5 here, but there's no more string that\n    // we could meaningfully use the value 5 with. word is now totally invalid!\n}\n\n목록 4-8: first_word 함수 호출 결과 저장 및 문자열 내용 변경\n이 프로그램은 오류 없이 컴파일되며 s.clear()를 호출한 후 word를 사용해도 오류가 발생하지 않습니다.  word는 s의 상태와 전혀 연결되어 있지 않기 때문에 word는 여전히 값 5를 포함합니다. 변수 s와 함께 값 5를 사용하여 첫 번째 단어를 추출하려고 시도할 수 있지만 word에 5를 저장한 이후로 s의 내용이 변경되었기 때문에 이것은 버그가 됩니다.\nword의 인덱스가 s의 데이터와 동기화되지 않는 것에 대해 걱정하는 것은 지루하고 오류가 발생하기 쉽습니다! second_word 함수를 작성하면 이러한 인덱스를 관리하기가 훨씬 더 어려워집니다. 시그니쳐는 다음과 같아야 합니다.\nfn second_word(s: &amp;String) -&gt; (usize, usize) {\n\n이제 우리는 시작 및 종료 인덱스를 추적하고 있으며, 특정 상태의 데이터에서 계산되었지만 해당 상태에 전혀 연결되지 않은 더 많은 값을 가지고 있습니다. 동기화를 유지해야 하는 세 개의 관련 없는 변수가 떠다니고 있습니다.\n운 좋게도 Rust는 이 문제에 대한 해결책을 가지고 있습니다: 스트링 슬라이스(string slices)입니다.\n스트링 슬라이스\n스트링 슬라이스은 문자열의 일부에 대한 참조이며 다음과 같습니다.\n    let s = String::from(`hello world`);\n\n    let hello = &amp;s[0..5];\n    let world = &amp;s[6..11];\n\nhello는 전체 문자열에 대한 참조가 아니라,  [0..5] 비트에 지정된 문자열 부분에 대한 참조입니다. [starting_index..ending_index]를 지정하여 괄호 안의 범위를 사용하여 슬라이스를 만듭니다. 여기서 starting_index는 슬라이스의 첫 번째 위치이고 ending_index는 슬라이스의 마지막 위치보다 하나 더 많습니다. 내부적으로 슬라이스 데이터 구조는 ending_index에서 starting_index를 뺀 값에 해당하는 슬라이스의 시작 위치와 길이를 저장합니다. 따라서 let world = &amp;s[6..11];의 경우, world는 s의 인덱스 6에 있는 바이트에 대한 포인터에 길이 값(length)이 5인 하는 슬라이스입니다.\n그림 4-6은 이를 다이어그램으로 보여줍니다.\n\n그림 4-6: 문자열의 일부를 참조하는 문자열 슬라이스\nRust의 .. 범위 구문을 사용할 때, 인덱스 0에서 시작하려면 .. 앞에 있는 값을 생략할 수 있습니다. \nlet s = String::from(`hello`);\n\nlet slice = &amp;s[0..2];\nlet slice = &amp;s[..2];\n\n마찬가지로 슬라이스에 문자열의 마지막 바이트가 포함되어 있으면 뒤에 있는 숫자를 삭제할 수 있습니다. 즉, 다음과 같이 동일합니다.\nlet s = String::from(`hello`);\n\nlet len = s.len();\n\nlet slice = &amp;s[3..len];\nlet slice = &amp;s[3..];\n\n두 값을 모두 삭제하여 전체 문자열의 조각을 가져올 수도 있습니다. 따라서 이들은 동일합니다.\nlet s = String::from(`hello`);\n\nlet len = s.len();\n\nlet slice = &amp;s[0..len];\nlet slice = &amp;s[..];\n\n\n참고: 문자열 슬라이스 범위 인덱스는 유효한 UTF-8 문자 경계에서 발생해야 합니다. 멀티바이트 문자 중간에 문자열 조각을 만들려고 하면 프로그램이 오류와 함께 종료됩니다. 문자열 슬라이스를 소개하기 위해 이 섹션에서는 ASCII만 가정합니다. UTF-8 처리에 대한 자세한 내용은 8장의 UTF-8 인코딩된 텍스트를 문자열로 저장 섹션에 있습니다.\n\n이 모든 정보를 염두에 두고 슬라이스를 반환하도록 first_word를 다시 작성해 보겠습니다. 문자열 조각을 나타내는 유형은 &amp;str로 작성됩니다.\n파일 이름: src/main.rs\nfn first_word(s: &amp;String) -&gt; &amp;str {\n    let bytes = s.as_bytes();\n\n    for (i, &amp;item) in bytes.iter().enumerate() {\n        if item == b' ' {\n            return &amp;s[0..i];\n        }\n    }\n\n    &amp;s[..]\n}\n\n우리는 Listing 4-7에서 했던 것과 같은 방법으로 단어의 끝에 대한 색인을 얻습니다. 공백의 첫 번째 항목을 찾는 것입니다. 공백을 찾으면 문자열의 시작과 공백의 인덱스를 시작 및 끝 인덱스로 사용하여 문자열 슬라이스를 반환합니다.\n이제 first_word를 호출하면 기본 데이터에 연결된 단일 값을 반환합니다. 값은 슬라이스의 시작점에 대한 참조와 슬라이스의 요소 수로 구성됩니다.\n슬라이스를 반환하는 것은 second_word 함수에서도 작동합니다.\nfn second_word(s: &amp;String) -&gt; &amp;str {\n\n이제 컴파일러가 문자열에 대한 참조가 유효한지 확인하기 때문에 엉망으로 만들기 훨씬 더 어려운 간단한 API가 있습니다. Listing 4-8에 있는 프로그램의 버그를 기억하십니까? 첫 번째 단어의 끝에 인덱스를 얻었지만 문자열을 지워서 인덱스가 유효하지 않게 되었을 때의 버그를 기억하십니까? 해당 코드는 논리적으로 잘못되었지만 즉각적인 오류는 표시되지 않았습니다. 빈 문자열과 함께 첫 번째 단어 색인을 계속 사용하려고 하면 나중에 문제가 나타납니다. 슬라이스는 이 버그를 불가능하게 만들고 코드에 문제가 있음을 훨씬 빨리 알려줍니다. first_word의 슬라이스 버전을 사용하면 컴파일 타임 오류가 발생합니다.\n파일 이름: src/main.rs\nfn main() {\n    let mut s = String::from(`hello world`);\n\n    let word = first_word(&amp;s);\n\n    s.clear(); // error!\n\n    println!(`the first word is: {}`, word);\n}\n\n다음은 컴파일러 오류입니다.\n$ cargo run\n   Compiling ownership v0.1.0 (file:///projects/ownership)\nerror[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable\n  --&gt; src/main.rs:18:5\n   |\n16 |     let word = first_word(&amp;s);\n   |                           -- immutable borrow occurs here\n17 |\n18 |     s.clear(); // error!\n   |     ^^^^^^^^^ mutable borrow occurs here\n19 |\n20 |     println!(`the first word is: {}`, word);\n   |                                       ---- immutable borrow later used here\n\nFor more information about this error, try `rustc --explain E0502`.\nerror: could not compile `ownership` due to previous error\n\n무언가에 대한 불변 참조가 있으면 가변 참조도 사용할 수 없다는 차용 규칙을 상기하십시오. clear는 String을 잘라야(변경) 하기 때문에 가변  참조를 가져와야 합니다. clear를 호출하고 나서 사용한 println!은  word의 참조를 사용합니다. 그래서 불변 참조가 해당 시점에서 여전히 활성 상태여야 합니다. Rust는 clear의 가변 참조와 word의 불변 참조가 동시에 존재하는 것을 허용하지 않기 때문에 컴파일이 실패합니다. Rust는 API를 사용하기 쉽게 만들었을 뿐만 아니라 컴파일 시간에 전체 오류 클래스를 제거했습니다!\n슬라이스로서의 문자열 리터럴\n바이너리 내부에 저장되는 문자열 리터럴에 대해 이야기했던 것을 기억하십시오. 이제 슬라이스에 대해 알았으므로 문자열 리터럴을 제대로 이해할 수 있습니다.\nlet s = `Hello, world!`;\n\n여기서 s의 유형은 &amp;str입니다. 바이너리의 특정 지점을 가리키는 슬라이스입니다. 이것이 문자열 리터럴이 불변인 이유이기도 합니다. &amp;str은 불변 참조입니다.\n문자열 조각을 매개변수로\n리터럴과 문자열 값의 조각을 사용할 수 있다는 사실을 알면 first_word에서 한 가지 더 개선할 수 있으며, 이것이 시그니처입니다.\nfn first_word(s: &amp;String) -&gt; &amp;str {\n\n더 경험이 많은 Rustacean은 &amp;String 값과 &amp;str 값 모두에 대해 동일한 함수를 사용할 수 있기 때문에 목록 4-9에 표시된 서명을 대신 작성할 것입니다.\nfn first_word(s: &amp;str) -&gt; &amp;str {\n\nListing 4-9: s 매개변수 유형에 문자열 슬라이스를 사용하여 first_word 함수 개선\n문자열 슬라이스가 있으면 직접 전달할 수 있습니다. 문자열이 있는 경우 문자열 조각이나 문자열에 대한 참조를 전달할 수 있습니다. 이러한 유연성은 15장의 암시적 역참조 강제 변환 섹션 에서 다룰 기능인 역참조 강제를 활용합니다.\n문자열에 대한 참조 대신, 문자열 슬라이스를 사용하도록 함수를 정의하면 기능 손실 없이 API가 더 일반적이고 유용해집니다.\n파일 이름: src/main.rs\nfn main() {\n    let my_string = String::from(`hello world`);\n\n    // `first_word` works on slices of `String`s, whether partial or whole\n    let word = first_word(&amp;my_string[0..6]);\n    let word = first_word(&amp;my_string[..]);\n    // `first_word` also works on references to `String`s, which are equivalent\n    // to whole slices of `String`s\n    let word = first_word(&amp;my_string);\n\n    let my_string_literal = `hello world`;\n\n    // `first_word` works on slices of string literals, whether partial or whole\n    let word = first_word(&amp;my_string_literal[0..6]);\n    let word = first_word(&amp;my_string_literal[..]);\n\n    // Because string literals *are* string slices already,\n    // this works too, without the slice syntax!\n    let word = first_word(my_string_literal);\n}\n\n다른 슬라이스들\n상상할 수 있듯이 스트링 슬라이스는 스트링에 관한 내용입니다. 그러나 보다 일반적인 슬라이스 유형도 있습니다. 다음 배열을 고려하십시오.\nlet a = [1, 2, 3, 4, 5];\n\n문자열의 일부를 참조하려는 것처럼 배열의 일부를 참조하고 싶을 수도 있습니다. 우리는 이렇게 할 것입니다:\nlet a = [1, 2, 3, 4, 5];\n\nlet slice = &amp;a[1..3];\n\nassert_eq!(slice, &amp;[2, 3]);\n\n이 슬라이스의 유형은 &amp;[i32]입니다. 첫 번째 요소에 대한 참조와 길이를 저장하여 스트링 슬라이스와 동일한 방식으로 작동합니다. 모든 종류의 다른 컬렉션에 대해 이러한 종류의 슬라이스를 사용하게 됩니다. 8장에서 벡터에 대해 이야기할 때 이러한 모음에 대해 자세히 논의할 것입니다.\n요약\n소유권, 차용 및 슬라이스의 개념은 컴파일 타임에 Rust 프로그램의 메모리 안전을 보장합니다. Rust 언어는 다른 시스템 프로그래밍 언어와 같은 방식으로 메모리 사용을 제어할 수 있지만, 데이터 소유자가 범위를 벗어날 때 데이터 소유자가 해당 데이터를 자동으로 정리하면 추가 코드를 작성하고 디버깅할 필요가 없습니다. 이 컨트롤을 얻으려면.\n소유권은 Rust의 다른 많은 부분이 작동하는 방식에 영향을 미치므로 책의 나머지 부분에서 이러한 개념에 대해 더 자세히 이야기할 것입니다. 5장으로 이동하여 구조체(struct)에서 데이터 조각을 함께 그룹화하는 방법을 살펴보겠습니다.\n","id":"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/","title":"The Slice Type"},"https://hwjskt.github.io/rust/chapter5/":{"body":"요약\n구조체를 사용하여 관련 데이터 구조화\nstruct 또는 *structure 는 사용자 정의 데이터 유형입니다. 이것으로 값들을 함께 모으고(패키징하고)  이 값들의 이름을 지정해서 의미 있는 그룹을 구성할 수 있습니다. 객체 지향 언어에 익숙하다면 구조체는 객체의 데이터 속성과 같습니다. 이 장에서는 튜플과 구조체를 비교해보고, 어떨때 구조체가 데이터를 그룹화하는데 더  좋은지 보여줍니다.\n구조체를 정의하고 인스턴스화하는 방법을 보여줍니다. 구조체 유형과 관련된 동작을 지정하기 위해 관련 함수를 정의하는 방법에 대해 설명합니다. 이 함수를 특별히 methods 라고 합니다. 구조체와 열거형(enums)(6장에서 논의)은 Rust가 컴파일 할때 하는 유형 검사를 최대한 활용하기 위해 사용하는 것으로, 프로그램 도메인에서 새 유형을 생성하기 위한 빌딩 블록입니다.\n","id":"https://hwjskt.github.io/rust/chapter5/","title":"Using Structs to Structure Related Data"},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"body":"요약\n\n구조체 \n\n파이썬의 딕셔너리와 비슷한 형태\n우선 구조체를 정의해서 템플릿을 만든다. {} 내부에 field (데이터 이름과 타입)을 적는 방식\n정의할 때 구조체가 가변,불변인지 정한다. 데이터 별로 지정할 수는 없다.\n사용은 인스턴스를 만들고 내용을 채운다. 내용을 채우는 방식은 딕셔너리와 동일하게 key : value 형태이다. \n\n\n구조체 업데이트\n\nfield 에 .. 를 사용해서 일부만 다른 구조체를 쉽게 만들수 있다. \n원본 구조체는 사용 못하게 되는 경우가 있다.\n\n\n튜플 구조체(tuple structs)\n\n구조체와 비슷한데 key 정의 없이 value 의 type 만 정의한다.\n\n\n단위 유사 구조체(unit-like structs)\n\nfield 가 없는 구조체 (데이터가 없다)\n\n\n\n구조체 정의 및 인스턴스화\n구조체는 튜플 타입 섹션 에서 논의한 튜플과 유사하며, 둘 다 여러 관련 값을 보유합니다. 튜플과 마찬가지로, 구조체의 조각은 다른 유형일 수 있습니다. 튜플과 달리 구조체에서는 값이 의미하는 바가 명확하도록 각 데이터 조각의 이름을 지정합니다. 이러한 이름을 추가한다는 것은 구조체가 튜플보다 더 유연하다는 것을 의미합니다. 인스턴스 값을 지정하거나 액세스하기 위해 데이터 순서에 의존할 필요가 없습니다.\n구조체를 정의하려면 키워드 struct를 입력하고 전체 구조체의 이름을 지정합니다. 구조체의 이름은 함께 그룹화되는 데이터 조각의 중요성을 설명해야 합니다. 그런 다음 {}중괄호 안에 필드(fields)라고 하는 데이터 조각의 이름과 유형을 정의합니다 . 예를 들어 Listing 5-1은 사용자 계정에 대한 정보를 저장하는 구조체를 보여줍니다.\n파일 이름: src/main.rs\nstruct User {\n    active: bool,\n    username: String,\n    email: String,\n    sign_in_count: u64,\n}\n\n목록 5-1: user 구조체 정의\n구조체를 정의한 후 사용하려면 각 필드에 구체적인 값을 지정하여 해당 구조체의 인스턴스를 만듭니다. 구조체의 이름을 명시하여 인스턴스를 생성한 다음 key: value 쌍을 포함하는 중괄호를 추가합니다. 여기서 키는 필드의 이름이고 값은 해당 필드에 저장하려는 데이터입니다. 구조체에서 선언한 것과 동일한 순서로 필드를 지정할 필요가 없습니다. 즉, 구조체 정의는 유형에 대한 일반적인 템플릿과 같으며 인스턴스는 유형의 값을 생성하기 위해 특정 데이터로 해당 템플릿을 채웁니다. 예를 들어 Listing 5-2와 같이 특정 사용자를 선언할 수 있습니다.\n파일 이름: src/main.rs\nfn main() {\n    let user1 = User {\n        active: true,\n        username: String::from(`someusername123`),\n        email: String::from(`someone@example.com`),\n        sign_in_count: 1,\n    };\n}\n\n목록 5-2: User 구조체의 인스턴스 만들기\n구조체에서 특정 값을 얻으려면 점 표기법을 사용합니다. 예를 들어 이 사용자의 이메일 주소에 액세스하려면 user1.email을 사용합니다. 인스턴스가 변경 가능한 경우 점 표기법을 사용하고 특정 필드에 할당하여 값을 변경할 수 있습니다. Listing 5-3은 변경 가능한 User 인스턴스의 email 필드 값을 변경하는 방법을 보여줍니다.\n파일 이름: src/main.rs\nfn main() {\n    let mut user1 = User {\n        active: true,\n        username: String::from(`someusername123`),\n        email: String::from(`someone@example.com`),\n        sign_in_count: 1,\n    };\n\n    user1.email = String::from(`anotheremail@example.com`);\n}\n\nListing 5-3: User 인스턴스의 email 필드 값 변경\n전체 인스턴스는 변경 가능해야 합니다. Rust는 특정 필드만 가변으로 표시하는 것을 허용하지 않습니다. 모든 표현식과 마찬가지로 구조체의 새 인스턴스를 함수 본문의 마지막 표현식으로 구성하여 해당 새 인스턴스를 암시적으로 반환할 수 있습니다.\nListing 5-4는 주어진 이메일과 사용자 이름으로 User 인스턴스를 반환하는 build_user 함수를 보여줍니다. 활성 필드는 true 값을 가져오고 sign_in_count는 1 값을 가져옵니다.\n파일 이름: src/main.rs\nfn build_user(email: String, username: String) -&gt; User {\n    User {\n        active: true,\n        username: username,\n        email: email,\n        sign_in_count: 1,\n    }\n}\n\nListing 5-4: 이메일과 사용자 이름을 받아 User 인스턴스를 반환하는 build_user 함수\nusername: username 처럼 구조체 필드와 같은 이름으로 함수 매개변수의 이름을 지정하는 것은 의미가 있지만 email 및 username 필드 이름과 변수를 반복해야 하는 것은 약간 지루합니다. 구조체에 더 많은 필드가 있는 경우 각 이름을 반복하면 훨씬 더 짜증이 날 것입니다. 다행히도 편리한 속기가 있습니다!\n필드 초기화 약어 사용\n목록 5-4에서 매개변수 이름과 구조체 필드 이름이 정확히 동일하기 때문에 필드 초기화 약식 구문을 사용하여 build_user를 다시 작성할 수 있습니다. Listing 5-5와 같이 하면 정확히 동일하게 작동하지만 username 및 email을 반복하진 않습니다.\n파일 이름: src/main.rs\nfn build_user(email: String, username: String) -&gt; User {\n    User {\n        active: true,\n        username,\n        email,\n        sign_in_count: 1,\n    }\n}\n\n목록 5-5: username 및 email 매개변수가 구조체 필드와 이름이 같기 때문에 필드 초기화 약어를 사용하는 build_user 함수\n여기서는 email이라는 필드가 있는 User 구조체의 새 인스턴스를 만듭니다. email 필드의 값을 build_user 함수의 email 매개변수 값으로 설정하려고 합니다. email 필드와 email 매개변수의 이름이 같기 때문에 email: email이 아닌 email만 작성하면 됩니다.\n구조체 업데이트 구문을 사용하여 다른 인스턴스에서 인스턴스 생성\n구조체에서 다른 인스턴스의 값 대부분을 포함하지만 일부만 변경된 새 인스턴스를 만드는 것이 종종 유용합니다. 구조체 업데이트 구문을 사용하여 이 작업을 수행할 수 있습니다.\n먼저 Listing 5-6에서 업데이트 구문 없이 정기적으로 user2에 새 User 인스턴스를 생성하는 방법을 보여줍니다. email에 새 값을 설정하지만 그 외에는 Listing 5-2에서 생성한 user1의 동일한 값을 사용합니다.\n파일 이름: src/main.rs\nfn main() {\n    // --snip--\n\n    let user2 = User {\n        active: user1.active,\n        username: user1.username,\n        email: String::from(`another@example.com`),\n        sign_in_count: user1.sign_in_count,\n    };\n}\n\n목록 5-6: user1의 값 중 하나를 사용하여 새 User 인스턴스 만들기\n구조체 업데이트 구문을 사용하면 Listing 5-7과 같이 더 적은 코드로 동일한 효과를 얻을 수 있습니다. 구문 ..은 명시되지 않은 나머지 필드가 .. 뒤에 지정된 인스턴스의 필드와 동일한 값을 갖도록 지정합니다.\n파일 이름: src/main.rs\nfn main() {\n    // --snip--\n\n    let user2 = User {\n        email: String::from(`another@example.com`),\n        ..user1\n    };\n}\n\n목록 5-7: 구조체 업데이트 구문을 사용하여 User 인스턴스에 대한 새 email 값을 설정하지만 user1의 나머지 값을 사용\n목록 5-7의 코드는 또한 이메일에 대해 다른 값을 갖지만 user1의 username, active 및 sign_in_count 필드에 대해 동일한 값을 갖는 user2에 인스턴스를 생성합니다. ..user1은 나머지 필드가 user1의 해당 필드에서 값을 가져와야 함을 지정하기 위해 마지막에 와야 하지만,구조체 정의에 있는 필드의 순서에 상관없이 원하는 만큼 많은 필드에 대한 값을 지정하도록 선택할 수 있습니다. \n구조체 업데이트 구문은 할당처럼 =를 사용합니다. 이동과 상호 작용하는 변수 및 데이터 섹션 에서 본 것처럼 데이터를 이동하기 때문입니다. 이 예제에서는 user1의 username 필드에 있는 String이 user2로 이동되었기 때문에 user2를 생성한 후 더 이상 user1을 전체적으로 사용할 수 없습니다. 만약 user2에 email과 username 에 대해 새 String 값을 지정하고,  user1에서 active 및 sign_in_count 값만 가져와 사용한 경우, user1은  user2생성 후에도 여전히 유효합니다. active 및 sign_in_count는 모두 Copy 특성을 구현하는 유형입이기 때문입니다. \n명명된 필드 없이 튜플 구조체를 사용하여 다른 유형 만들기\nRust는 튜플 구조체(tuple structs) 라고 하는 튜플과 비슷하게 보이는 구조체를 지원합니다. 튜플 구조체에는 구조체 이름이 제공하는 추가 의미가 있지만 해당 필드와 연결된 이름은 없습니다. 오히려 그들은 단지 필드의 유형을 가지고 있습니다. 튜플 구조체는 전체 튜플에 이름을 지정하고 튜플을 다른 튜플과 다른 유형으로 만들고 싶을 때 그리고 일반 구조체에서와 같이 각 필드의 이름을 지정하는 것이 장황하거나 중복될 때 유용합니다.\n튜플 구조체를 정의하려면 struct 키워드로 시작하고 구조체 이름 뒤에 튜플의 유형이 옵니다. 예를 들어 여기에서는 Color와 Point라는 두 개의 튜플 구조체를 정의하고 사용합니다.\n파일 이름: src/main.rs\nstruct Color(i32, i32, i32);\nstruct Point(i32, i32, i32);\n\nfn main() {\n    let black = Color(0, 0, 0);\n    let origin = Point(0, 0, 0);\n}\n\nblack 및 origin 값은 서로 다른 튜플 구조체의 인스턴스이기 때문에 서로 다른 유형입니다. 정의하는 각 구조체는 구조체 내의 필드가 동일한 유형을 가질 수 있더라도 고유한 유형입니다. 예를 들어 Color 유형의 매개변수를 사용하는 함수는 두 유형 모두 세 개의 i32 값으로 구성되어 있어도 Point을 인수로 사용할 수 없습니다. 그렇지 않으면 튜플 구조체 인스턴스는 개별 조각으로 분해할 수 있고 .를 사용할 수 있다는 점에서 튜플과 유사합니다. 개별 값에 액세스하기 위한 인덱스가 뒤따릅니다.\n필드가 없는 단위 유사 구조체\n필드가 없는 구조체를 정의할 수도 있습니다! 이들은 튜플 타입 섹션 에서 언급한 단위 유형인 ()와 유사하게 동작하기 때문에 단위 유사 구조체(unit-like structs) 라고 합니다. 단위와 같은 구조체는 일부 유형에 특성을 구현해야 하지만 유형 자체에 저장하려는 데이터가 없을 때 유용할 수 있습니다. 특성에 대해서는 10장에서 논의할 것입니다. 다음은 AlwaysEqual이라는 단위 구조체를 선언하고 인스턴스화하는 예입니다.\n파일 이름: src/main.rs\nstruct AlwaysEqual;\n\nfn main() {\n    let subject = AlwaysEqual;\n}\n\nAlwaysEqual을 정의하려면 struct 키워드, 원하는 이름, 세미콜론을 사용합니다. 중괄호나 괄호가 필요하지 않습니다! 그런 다음 유사한 방식으로 subject 변수에서 AlwaysEqual 인스턴스를 얻을 수 있습니다. 중괄호나 괄호 없이 정의한 이름을 사용합니다. 나중에 AlwaysEqual의 모든 인스턴스가 항상 다른 유형의 모든 인스턴스와 동일하도록 이 유형에 대한 동작을 구현하여 테스트 목적으로 알려진 결과를 가질 것이라고 상상해 보십시오. 해당 동작을 구현하는 데 데이터가 필요하지 않습니다! 10장에서 특성을 정의하고 유닛과 같은 구조체를 포함하여 모든 유형에서 구현하는 방법을 볼 수 있습니다.\n\n구조체 데이터의 소유권\nListing 5-1의 User 구조체 정의에서 우리는 &amp;str 문자열 슬라이스 유형이 아닌 소유된 String 유형을 사용했습니다. 이것은 이 구조체의 각 인스턴스가 모든 데이터를 소유하고 전체 구조체가 유효한 한 해당 데이터가 유효하기를 원하기 때문에 의도적인 선택입니다.\n구조체가 다른 것이 소유한 데이터에 대한 참조를 저장하는 것도 가능하지만 그렇게 하려면 10장에서 논의할 Rust 기능인 lifetimes 를 사용해야 합니다. 수명은 구조체가 있는 동안 구조체가 참조하는 데이터가 유효하도록 보장합니다. 다음과 같이 수명을 지정하지 않고 구조체에 참조를 저장하려고 한다고 가정해 보겠습니다. 이것은 작동하지 않습니다:\n파일 이름: src/main.rs\nstruct User {\n    active: bool,\n    username: &amp;str,\n    email: &amp;str,\n    sign_in_count: u64,\n}\n\nfn main() {\n    let user1 = User {\n        active: true,\n        username: `someusername123`,\n        email: `someone@example.com`,\n        sign_in_count: 1,\n    };\n}\n\n컴파일러는 수명 지정자가 필요하다고 불평합니다.\n$ cargo run\n   Compiling structs v0.1.0 (file:///projects/structs)\nerror[E0106]: missing lifetime specifier\n --&gt; src/main.rs:3:15\n  |\n3 |     username: &amp;str,\n  |               ^ expected named lifetime parameter\n  |\nhelp: consider introducing a named lifetime parameter\n  |\n1 ~ struct User&lt;'a&gt; {\n2 |     active: bool,\n3 ~     username: &amp;'a str,\n  |\n\nerror[E0106]: missing lifetime specifier\n --&gt; src/main.rs:4:12\n  |\n4 |     email: &amp;str,\n  |            ^ expected named lifetime parameter\n  |\nhelp: consider introducing a named lifetime parameter\n  |\n1 ~ struct User&lt;'a&gt; {\n2 |     active: bool,\n3 |     username: &amp;str,\n4 ~     email: &amp;'a str,\n  |\n\nFor more information about this error, try `rustc --explain E0106`.\nerror: could not compile `structs` due to 2 previous errors\n\n10장에서 구조체에 참조를 저장할 수 있도록 이러한 오류를 수정하는 방법에 대해 논의하지만 지금은 &amp;str과 같은 참조 대신 String과 같은 소유 유형을 사용하여 이러한 오류를 수정합니다.\n\n","id":"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/","title":"Defining and Instantiating Structs"},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"body":"요약\n\n\n구조체 출력 방법1.  println! 와 Debug trait 을 사용\n\n구조체 정의 앞에 #[derive(Debug)] 를 붙이고, \n출력할때  println! 의 {} 대신 다른 걸 사용한다\n{:?} : 한줄로 출력\n{:#?} : 여러줄로 출력\n\n\n\n구조체 출력 방법2.  dbg! 사용\n\n\n구조체 정의 앞에 #[derive(Debug)] 를 붙이고, \n\n\n파일이름, 위치까지 같이 출력\n\n\n값을 반환한다\n\n\n\n\n구조체를 사용한 예제 프로그램\n언제 구조체를 사용해야 하는지 이해하기 위해 직사각형의 면적을 계산하는 프로그램을 작성해 봅시다. 단일 변수를 사용하여 시작한 다음, 구조체를 대신 사용할 때까지 프로그램을 리팩터링합니다.\n픽셀로 지정된 직사각형의 너비와 높이를 가져오고 직사각형의 면적을 계산하는 rectangles 이라는 Cargo로 새로운 바이너리 프로젝트를 만들어 봅시다. Listing 5-8은 우리 프로젝트의 src/main.rs 에서 정확히 그것을 수행하는 한 가지 방법이 있는 짧은 프로그램을 보여줍니다.\n파일 이름: src/main.rs\nfn main() {\n    let width1 = 30;\n    let height1 = 50;\n\n    println!(\n        `The area of the rectangle is {} square pixels.`,\n        area(width1, height1)\n    );\n}\n\nfn area(width: u32, height: u32) -&gt; u32 {\n    width * height\n}\n\n목록 5-8: 별도의 너비 및 높이 변수로 지정된 사각형의 면적 계산\n이제 cargo run을 사용하여 이 프로그램을 실행합니다.\n$ cargo run\n   Compiling rectangles v0.1.0 (file:///projects/rectangles)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.42s\n     Running `target/debug/rectangles`\nThe area of the rectangle is 1500 square pixels.\n\n이 코드는 각 치수와 함께 area 함수를 호출하여 사각형의 면적을 파악하는 데 성공했지만 이 코드를 명확하고 읽기 쉽게 만들기 위해 더 많은 작업을 수행할 수 있습니다.\n이 코드의 문제는 area의 시그니쳐에서 잘 보입니다.\nfn area(width: u32, height: u32) -&gt; u32 {\n\narea 함수는 하나의 직사각형의 면적을 계산하기로 되어 있지만, 우리가 작성한 함수에는 두 개의 매개변수가 있고 매개변수가 관련되어 있다는 것이 우리 프로그램의 어느 곳에서도 명확하지 않습니다. 너비와 높이를 함께 그룹화하는 것이 더 읽기 쉽고 관리하기 쉽습니다. 우리는 이미 3장의 튜플 타입 섹션에서 튜플을 사용하여 이를 수행할 수 있는 한 가지 방법에 대해 논의했습니다.\n튜플로 리팩토링\n목록 5-9는 튜플을 사용하는 프로그램의 다른 버전을 보여줍니다.\n파일 이름: src/main.rs\nfn main() {\n    let rect1 = (30, 50);\n\n    println!(\n        `The area of the rectangle is {} square pixels.`,\n        area(rect1)\n    );\n}\n\nfn area(dimensions: (u32, u32)) -&gt; u32 {\n    dimensions.0 * dimensions.1\n}\n\n목록 5-9: 튜플로 사각형의 너비와 높이 지정하기\n어떤 면에서는 이 프로그램이 더 좋습니다. 튜플을 사용하면 약간의 구조를 추가할 수 있으며 이제 하나의 인수만 전달합니다. 그러나 어떤면에서 이 버전은 덜 명확합니다. 튜플은 요소의 이름을 지정하지 않으므로 튜플의 일부를 인덱싱해야 하므로 계산이 덜 명확해집니다.\n너비와 높이를 섞는 것은 면적 계산에 문제가 되지 않지만 화면에 사각형을 그리려면 중요합니다! width는 튜플 인덱스 0이고 height는 튜플 인덱스 1이라는 점을 기억해야 하기 때문에 불편합니다. 이것은 다른 사람이 우리 코드를 사용한다면 훨씬 더 어려울 것입니다. 코드에서 데이터의 의미를 전달하지 않았기 때문에 이제 오류가 생기기 더 쉽습니다.\n구조체로 리팩토링: 더 많은 의미 추가\n구조체를 사용하여 데이터에 레이블을 지정하여 의미를 추가합니다. Listing 5-10에 표시된 것처럼 사용 중인 튜플을 전체 이름과 부분 이름이 있는 구조체로 변환할 수 있습니다.\n파일 이름: src/main.rs\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\n        `The area of the rectangle is {} square pixels.`,\n        area(&amp;rect1)\n    );\n}\n\nfn area(rectangle: &amp;Rectangle) -&gt; u32 {\n    rectangle.width * rectangle.height\n}\n\nListing 5-10: Rectangle 구조체 정의하기\n여기서 우리는 구조체를 정의하고 이름을 Rectangle로 지정했습니다. 중괄호 안에 width 및 height 필드를 정의했으며 둘 다 u32 유형을 가집니다. 그런 다음 main에서 너비가 30이고 높이가 50인 Rectangle의 특정 인스턴스를 만들었습니다.\n우리의 area 함수는 이제 rectangle이라는 이름의 매개변수 하나를 사용하여 정의되며, 그 유형은 Rectangle 구조체 인스턴스의 불변 차용(immutable borrow)입니다. 4장에서 언급했듯이 소유권을 갖기보다 구조체를 빌리고 싶습니다. 이런 식으로 main은 소유권을 유지하고 rect1을 계속 사용할 수 있습니다. 이것이 우리가 함수 서명에서 &amp;를 사용하고 함수를 호출하는 이유입니다.\narea 함수는 Rectangle 인스턴스의 width 및 height 필드에 액세스합니다(차용한 구조체 인스턴스의 필드에 액세스해도 필드 값이 이동하지 않으므로 구조체 차용을 자주 볼 수 있습니다). area에 대한 함수 시그니쳐는 이제 정확히 width 및 height 필드를 사용하여 Rectangle의 면적을 계산합니다. 이것은 너비와 높이가 서로 관련되어 있음을 전달하고 0과 1의 튜플 인덱스 값을 사용하는 대신 값에 설명적인 이름을 부여합니다. 이것은 명확성이라는 측면에서 승리입니다.\n파생 특성으로 유용한 기능 추가\n프로그램을 디버깅하고 모든 필드의 값을 보는 동안 Rectangle의 인스턴스를 인쇄할 수 있다면 유용할 것입니다. Listing 5-11은 println! 매크로는 이전 장에서 사용한 것과 같습니다. 그러나 이것은 작동하지 않습니다.\n파일 이름: src/main.rs\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(`rect1 is {}`, rect1);\n}\n\nListing 5-11: Rectangle 인스턴스 인쇄 시도\n이 코드를 컴파일하면 다음 핵심 메시지와 함께 오류가 발생합니다.\nerror[E0277]: `Rectangle` doesn't implement `std::fmt::Display`\n\nprintln! 매크로는 많은 종류의 서식을 지정할 수 있으며, 기본적으로 중괄호는 println! 에게 Display로 알려진 형식 사용한다고 이야기합니다. Display 형식은 최종 사용자가 직접 사용하기 위한 결과물입니다. 지금까지 본 기본 유형은 기본적으로 Display를 구현합니다. 왜냐하면 사용자에게 1 또는 다른 기본 유형을 표시하려는 방법은 한 가지뿐이기 때문입니다. 그러나 구조체를 사용하면 더 많은 표시 가능성이 있기 때문에 println!의 출력 형식이 명확하지 않습니다. 쉼표를 원하십니까? 중괄호를 인쇄하시겠습니까? 모든 필드를 표시해야 합니까? 이러한 모호성으로 인해 Rust는 우리가 원하는 것을 추측하려고 시도하지 않으며, 구조체에는 println! 및 {} 자리 표시자를 함께 사용할 Display 구현이 제공되지 않습니다. \n오류를 계속 읽으면 다음과 같은 유용한 메모를 찾을 수 있습니다.\n   = help: the trait `std::fmt::Display` is not implemented for `Rectangle`\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n\n고쳐봅시다! println! 매크로 호출은 이제 println!(rect1 is {:?}, rect1);처럼 보입니다. 중괄호 안에 지정자 :?를 넣으면  println!에게 Debug라는 출력 형식을 사용하게 합니다.  Debug 특성을 사용하면 개발자에게 유용한 방식으로 구조체를 인쇄할 수 있으므로 코드를 디버깅하는 동안 해당 값을 볼 수 있습니다.\n이 변경으로 코드를 컴파일합니다. 드랏! 여전히 오류가 발생합니다.\nerror[E0277]: `Rectangle` doesn't implement `Debug`\n\n그러나 다시 컴파일러는 다음과 같은 유용한 정보를 제공합니다.\n   = help: the trait `Debug` is not implemented for `Rectangle`\n   = note: add `#[derive(Debug)]` to `Rectangle` or manually `impl Debug for Rectangle`\n\nRust에는 디버깅 정보를 출력하는 기능이 포함되어 있지만 구조체에서 해당 기능을 사용할 수 있도록 명시적으로 선택해야 합니다. 이를 위해 Listing 5-12에 표시된 것처럼 구조체 정의 바로 앞에 외부 속성 #[derive(Debug)]를 추가합니다.\n파일 이름: src/main.rs\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(`rect1 is {:?}`, rect1);\n}\n\nListing 5-12: Debug 트레이트를 유도하기 위한 속성 추가 및 디버그 포매팅을 사용하여 Rectangle 인스턴스 인쇄\n이제 프로그램을 실행하면 오류가 발생하지 않으며 다음과 같은 결과가 표시됩니다.\n$ cargo run\n   Compiling rectangles v0.1.0 (file:///projects/rectangles)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.48s\n     Running `target/debug/rectangles`\nrect1 is Rectangle { width: 30, height: 50 }\n\n멋진! 가장 예쁜 출력은 아니지만 이 인스턴스에 대한 모든 필드의 값을 표시하므로 디버깅 중에 확실히 도움이 됩니다. 더 큰 구조체가 있는 경우 좀 더 읽기 쉬운 출력을 갖는 것이 유용합니다. 이 경우 println!에서 {:?} 대신 {:#?}를 사용할 수 있습니다. 예시에서 {:#?} 스타일을 사용하면 다음이 출력됩니다.\n$ cargo run\n   Compiling rectangles v0.1.0 (file:///projects/rectangles)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.48s\n     Running `target/debug/rectangles`\nrect1 is Rectangle {\n    width: 30,\n    height: 50,\n}\n\nDebug 형식을 사용하여 값을 출력하는 또 다른 방법은 dbg! 매크로를 사용하는 것입니다. 이것은 식의 소유권을 갖는데, 참조를 취하는 println!와는 반대입니다. dbg! 매크로 호출은 파일이름, 코드의 위치(줄 번호), 해당 식의 결과 값을 출력하고, 값의 소유권을 반환합니다.\n\n참고: dbg! 매크로는 표준 오류 콘솔 스트림(stderr)에 출력합니다. 표준 출력 콘솔 스트림(stdout)에 인쇄하는 println!과 차이가 있습니다. 12장의 표준 출력 대신 표준 오류에 오류 메시지 쓰기  섹션에서 stderr 및 stdout에 대해 자세히 설명합니다.\n\n다음은 rect1의 전체 구조체 값뿐만 아니라 width 필드에 할당되는 값에 관심이 있는 예입니다.\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let scale = 2;\n    let rect1 = Rectangle {\n        width: dbg!(30 * scale), // 값이 (30 * scale) 과 같다\n        height: 50,\n    };\n\n    dbg!(&amp;rect1);\n}\n\n30 * scale이라는 식에 dbg!를 넣을 수 있습니다. 그리고 dbg! 가 표현식 값의 소유권을 반환하기 때문에  width 필드는 dbg!를 호출하지 않은것과 같은 값을 얻습니다.    우리는 dbg! 가 rect1의 소유권을 가지는 것을 원하지 않습니다. 그래서 다음 호출에서 rect1에 대한 참조를 사용합니다. 이 예제의 출력은 다음과 같습니다.\n$ cargo run\n   Compiling rectangles v0.1.0 (file:///projects/rectangles)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.61s\n     Running `target/debug/rectangles`\n[src/main.rs:10] 30 * scale = 60\n[src/main.rs:14] &amp;rect1 = Rectangle {\n    width: 60,\n    height: 50,\n}\n\n첫 번째 출력 비트는 src/main.rs 라인 10에서 30 * scale 표현식을 디버깅하고 있으며 결과 값은 60입니다(정수에 대해 구현된 디버그 형식은 값만 출력). src/main.rs 의 14번째 줄에 있는 dbg! 호출은 Rectangle 구조체인 &amp;rect1의 값을 출력합니다. 이 출력은 Rectangle 타입의 예쁜 디버그 포매팅을 사용합니다. dbg! 매크로는 코드가 수행하는 작업을 파악하려고 할 때 정말 유용할 수 있습니다!\nRust는 Debug 특성 외에도 사용자 지정 유형에 유용한 동작을 추가할 수 있는 derive 특성과 함께 사용할 여러 특성을 제공했습니다. 이러한 특성과 행동은 부록 C 에 나열되어 있습니다. 10장에서 사용자 지정 동작으로 이러한 특성을 구현하는 방법과 고유한 특성을 만드는 방법을 다룰 것입니다. derive 이외의 많은 특성도 있습니다. 자세한 정보는 Rust 참조 문서의 속성 섹션을 참조하세요 .\n우리의 area 함수는 매우 구체적입니다. 직사각형의 면적만 계산합니다. 다른 유형에서는 작동하지 않으므로 이 동작을 Rectangle 구조체에 더 밀접하게 연결하는 것이 도움이 될 것입니다. area 함수를, Rectangle 유형에 정의된 area 메서드 로 전환하여 이 코드를 계속 리팩터링하는 방법을 살펴보겠습니다.\n","id":"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/","title":"An Example Program Using Structs"},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"body":"요약\n\n구조체를 이용해서 사용자 지정 타입을 만들 수 있다.\nimpl(implementation, 구현) 블록 안에 메서드, 연관함수 만들수있다\n\n메서드\n\n첫번째 인자가 self 이다\n사용형식 : 인스턴스.메서드() \n\n\n연관함수\n\n첫번째 인자가 self 아니다\n사용형식 : 구조체이름::연관함수()\n\n\n\n\n\n메서드 구문\n메서드는 함수와 유사합니다. fn 키워드와 이름으로 메서드를 선언하고, 매개 변수와 반환 값을 가질 수 있으며, 메서드가 다른 곳에서 호출될 때 실행되는 일부 코드를 포함합니다. 함수와 달리 메서드는 구조체( 각각 6장 과 17장 에서 다루는 열거형 또는 특성 개체 )의 컨텍스트 내에서 정의되며 첫 번째 매개변수는 항상 self입니다. self 는 메서드가 호출되는 구조체의 인스턴스를 나타냅니다. \n메서드 정의\n목록 5-13과 같이 Rectangle 인스턴스를 매개변수로 갖는 area 함수를 변경해서, Rectangle 구조체에 정의된 area 메서드를 대신 만들어 보겠습니다.\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\n        \"The area of the rectangle is {} square pixels.\",\n        area(&amp;rect1)\n    );\n}\n\nfn area(rectangle: &amp;Rectangle) -&gt; u32 {\n    rectangle.width * rectangle.height\n}\n\n원래 코드\n파일 이름: src/main.rs\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle {\n    fn area(&amp;self) -&gt; u32 {\n        self.width * self.height\n    }\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\n        `The area of the rectangle is {} square pixels.`,\n        rect1.area()\n    );\n}\n\nListing 5-13: Rectangle 구조체에 area 메서드 정의하기\nRectangle 컨텍스트 내에서 함수를 정의하기 위해 Rectangle에 대한 impl(implementation, 구현) 블록을 시작합니다. 이 impl 블록 내의 모든 것은 Rectangle 유형과 연결됩니다. 그런 다음 area 함수를 impl 중괄호 내로 이동하고 서명 및 본문 내의 모든 위치에서 첫 번째(이 경우에만) 매개 변수를 self로 변경합니다. main에서 area 함수를 호출하고 rect1을 인수로 전달했었는데, 메서드 구문을 대신 사용하여 Rectangle 인스턴스에서 area 메서드를 호출할 수 있습니다. 메서드 구문은 인스턴스 다음에 옵니다. 점을 추가하고 그 뒤에 메서드 이름, 괄호 및 인수를 추가합니다.\narea의 시그니처에서 rectangle: &amp;Rectangle 대신 &amp;self를 사용합니다. &amp;self는 실제로 self: &amp;Self의 줄임말입니다. impl 블록 내에서 Self 유형은 impl 블록이 있는 유형의 별칭입니다. 메소드는 첫 번째 매개변수에 대해 Self 유형의 self라는 이름의 매개변수를 가져야 합니다. 그래서 Rust는 첫 번째 매개변수 자리에 self라는 이름으로 이것을 축약할 수 있게 합니다. rectangle: &amp;Rectangle에서 했던 것처럼 이 메서드가 Self 인스턴스를 빌린다는 것을 나타내기 위해 self 속기 앞에 &amp;를 사용해야 합니다. 메서드는 Self의 소유권을 가져갈 수 있고 Self를 불변으로 빌릴 수 있습니다.\n함수 버전에서 &amp;Rectangle을 사용한 것과 같은 이유로 여기에서 &amp;self를 선택했습니다. 소유권을 갖고 싶지 않고 구조체의 데이터를 쓰는 것이 아니라 읽기만 원합니다. 메소드가 수행하는 작업의 일부로 메소드를 호출한 인스턴스를 변경하려면 첫 번째 매개변수로 &amp;mut self를 사용합니다. 첫 번째 매개 변수로 self만 사용하여 인스턴스 소유권을 가져오는 메서드는 거의 없습니다. 이 기술은 일반적으로 메서드가 self를 다른 것으로 변환하고 변환 후 호출자가 원래 인스턴스를 사용하지 못하게 하려는 경우에 사용됩니다.\n함수 대신 메서드를 사용하면, 메서드 구문을 제공할 수 있고 모든 메서드 서명에서 self 유형을 반복하지 않아도 됩니다. 하지만 주된 이유는 구성(organization)을 하기 위한 것입니다. 우리는 미래의 코드 사용자가 우리가 제공하는 라이브러리의 다양한 위치에서 Rectangle의 기능을 검색하도록 하는 대신, 타입의 인스턴스로 수행할 수 있는 모든 작업을 하나의 impl 블록에 넣었습니다.\n구조체의 필드 중 하나와 동일한 이름을 메서드에 지정하도록 선택할 수 있습니다. 예를 들어, width라는 이름을 가진 Rectangle에 메소드를 정의할 수 있습니다.\n파일 이름: src/main.rs\nimpl Rectangle {\n    fn width(&amp;self) -&gt; bool {\n        self.width &gt; 0\n    }\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    if rect1.width() {\n        println!(`The rectangle has a nonzero width; it is {}`, rect1.width);\n    }\n}\n\n여기서 인스턴스의 width 필드 값이 0보다 크면 true를 반환하고 값이 0이면 false를 반환하도록 width 메서드를 선택합니다. 어떤 목적으로든 동일한 이름의 메서드 내에서 필드를 사용할 수 있습니다. main에서 rect1.width 뒤에 괄호가 있으면 Rust는 width 메서드를 의미한다는 것을 압니다. 우리가 괄호를 사용하지 않을 때 Rust는 우리가 width 필드를 의미한다는 것을 압니다.\n항상 그런 것은 아니지만, 종종 메서드에 필드와 동일한 이름을 지정하면 필드의 값만 반환하고 다른 작업은 수행하지 않기를 원합니다. 이와 같은 메서드를 getters 라고 하며 Rust는 일부 다른 언어처럼 구조체 필드에 자동으로 구현하지 않습니다. Getter는 필드를 비공개로 만들면서 메서드는 공개할 수 있습니다. 그래서 타입의 공개 API의 일부로 필드가 있으면, 해당 필드를 읽기 전용으로 활성화할 수 있기 때문에 유용합니다. 7장 에서 public과 private이 무엇인지, 필드나 메서드를 public 또는 private으로 지정하는 방법에 대해 설명합니다.\n\n-&gt; 연산자는 어디에 있습니까?\nC 및 C++에서는 메서드를 호출하는 데 두 가지 다른 연산자가 사용됩니다. .를 사용합니다. 개체에 대한 메서드를 직접 호출하는 경우 -&gt; 개체에 대한 포인터에서 메서드를 호출하고 먼저 포인터를 역참조해야 하는 경우. 즉, object가 포인터라면 object-&gt;something()은 (*object).something()과 유사하다.\nRust에는 -&gt; 연산자와 동등한 것이 없습니다. 대신 Rust에는 자동 참조 및 역참조 라는 기능이 있습니다. 메소드를 호출하는 것은 러스트에서 이러한 동작을 하는 몇 안 되는 위치 중 하나입니다.\n작동 방식은 다음과 같습니다: object.something()으로 메서드를 호출하면 Rust는 자동으로 &amp;, &amp;mut 또는 *를 추가하여 object가 메서드의 시그니처와 일치하도록 합니다. 즉, 다음은 동일합니다.\np1.distance(&amp;p2);\n(&amp;p1).distance(&amp;p2);\n\n첫 번째 것이 훨씬 깨끗해 보입니다. 이 자동 참조 동작은 메서드에 명확한 수신자(self 유형)가 있기 때문에 작동합니다. 메서드의 리시버와 이름이 주어지면 Rust는 메서드가 읽기(&amp;self)인지, 변경(&amp;mut self)인지, 소모(self)인지 확실히 파악할 수 있습니다. Rust가 메서드 리시버에 대한 차용을 암시적으로 만든다는 사실은 실제로 소유권을 인체 공학적으로 만드는 데 큰 부분을 차지합니다.\n\n매개변수가 더 많은 메서드\nRectangle 구조체에 두 번째 메서드를 구현하여 메서드 사용을 연습해 봅시다. 이번에는 Rectangle의 인스턴스가 Rectangle의 다른 인스턴스를 가져오고 두 번째 Rectangle이 self(첫 번째 Rectangle)에 안에 들어갈 수 있는 크기이면 true를 반환하도록 합니다. 그렇지 않으면 false를 반환해야 합니다. 즉, 일단 can_hold 메소드를 정의하면 Listing 5-14에 표시된 프로그램을 작성할 수 있기를 원합니다.\n파일 이름: src/main.rs\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n    let rect2 = Rectangle {\n        width: 10,\n        height: 40,\n    };\n    let rect3 = Rectangle {\n        width: 60,\n        height: 45,\n    };\n\n    println!(`Can rect1 hold rect2? {}`, rect1.can_hold(&amp;rect2));\n    println!(`Can rect1 hold rect3? {}`, rect1.can_hold(&amp;rect3));\n}\n\n목록 5-14: 아직 작성되지 않은 can_hold 메서드 사용\nrect2의 두 치수가 rect1의 치수보다 작지만 rect3이 rect1보다 넓기 때문에 예상 출력은 다음과 같습니다.\nCan rect1 hold rect2? true\nCan rect1 hold rect3? false\n\n우리는 메서드를 정의하고 싶다는 것을 알고 있으므로 impl Rectangle 블록 내에 있을 것입니다. 메서드 이름은 can_hold이고 다른 Rectangle의 불변 차용을 매개변수로 사용합니다. 메서드를 호출하는 코드를 보면 매개변수의 유형이 무엇인지 알 수 있습니다. rect1.can_hold(&amp;rect2)는 &amp;rect2를 전달하는데, &amp;rect2 는 rect2 를 불변 차용(immutable borrow) 합니다. 우리는 rect2를 읽기만 하면 되고(변경 가능한 빌림이 필요한 \"쓰기\"가 필요하지 않음), main이 rect2의 소유권을 유지하여 can_hold 메서드 호출 후 다시 사용할 수 있기를 원하기 때문에 이는 의미가 있습니다.  can_hold의 반환 값은 부울입니다. 구현 시 self의 너비와 높이가 각각 다른 Rectangle의 너비와 높이보다 큰지 여부를 확인합니다. Listing 5-15에 표시된 Listing 5-13의 impl 블록에 새로운 can_hold 메소드를 추가해 보겠습니다.\n파일 이름: src/main.rs\nimpl Rectangle {\n    fn area(&amp;self) -&gt; u32 {\n        self.width * self.height\n    }\n\n    fn can_hold(&amp;self, other: &amp;Rectangle) -&gt; bool {\n        self.width &gt; other.width &amp;&amp; self.height &gt; other.height\n    }\n}\n\nListing 5-15: 다른 Rectangle 인스턴스를 매개변수로 사용하는 Rectangle의 can_hold 메서드 구현\n목록 5-14의 main 함수로 이 코드를 실행하면 원하는 출력을 얻을 수 있습니다. 메서드는 시그니쳐에서 self 매개변수 뒤에 추가하는 여러 매개변수를 사용할 수 있으며, 이러한 매개변수는 함수의 매개변수처럼 작동합니다.\n관련 함수\nimpl 블록 내에서 정의된 모든 함수는 impl 다음에 이름이 지정된 유형과 연관되기 때문에 연관된 함수 라고 합니다. 작업할 유형의 인스턴스가 필요하지 않기 때문에 첫 번째 매개변수로 self가 없는(따라서 메소드가 아닌) 연관된 함수를 정의할 수 있습니다. 우리는 이미 String 유형에 정의된 String::from 함수와 같은 하나의 함수를 사용했습니다.\n메서드가 아닌 관련 함수는 구조체의 새 인스턴스를 반환하는 생성자에 자주 사용됩니다. 이들은 종종 new라고 불리지만 new는 특별한 이름이 아니며 언어에 내장되어 있지 않습니다. 예를 들어, 하나의 치수 매개변수를 갖고, 너비와 높이 모두 그 값을 사용하는 square라는 관련 함수를 만들 수 있습니다. 이것은 동일한 값을 두 번 지정하지 않고 정사각형 Rectangle을 더 쉽게 만들 수 있습니다. :\n파일 이름: src/main.rs\nimpl Rectangle {\n    fn square(size: u32) -&gt; Self {\n        Self {\n            width: size,\n            height: size,\n        }\n    }\n}\n\n반환 타입과 함수 본문에 있는 Self 키워드는 impl 키워드 뒤에 나타나는 유형의 별칭이며 이 경우에는 Rectangle입니다.\n이 관련 함수를 호출하려면 구조체 이름과 함께 :: 구문을 사용합니다. 예를 들면 let sq = Rectangle::square(3); 입니다. 이 함수는 구조체에 의해 네임스페이스가 지정됩니다. :: 구문은 관련 함수와 모듈에서 생성된 네임스페이스 모두에 사용됩니다. 7장 에서 모듈에 대해 논의할 것입니다.\n다중 impl 블록\n각 구조체는 여러 impl 블록을 가질 수 있습니다. 예를 들어, Listing 5-15는 Listing 5-16에 표시된 코드와 동일하며 각 메소드는 자체 impl 블록에 있습니다.\nimpl Rectangle {\n    fn area(&amp;self) -&gt; u32 {\n        self.width * self.height\n    }\n}\n\nimpl Rectangle {\n    fn can_hold(&amp;self, other: &amp;Rectangle) -&gt; bool {\n        self.width &gt; other.width &amp;&amp; self.height &gt; other.height\n    }\n}\n\nListing 5-16: 여러 impl 블록을 사용하여 Listing 5-15 재작성\n여기서는 이러한 메서드를 여러 impl 블록으로 분리할 이유가 없지만 유효한 구문입니다. 제네릭 타입과 특성에 대해 논의하는 10장에서 여러 개의 impl 블록이 유용한 경우를 보게 될 것입니다.\n요약\n구조체를 사용하면 도메인에 의미 있는 사용자 지정 타입을 만들 수 있습니다. 구조체를 사용하면 연결된 데이터 조각을 서로 연결하고 각 조각의 이름을 지정하여 코드를 명확하게 만들 수 있습니다. impl 블록에서 타입과 연결된 함수를 정의할 수 있으며 메서드는 구조체 인스턴스의 동작을 지정할 수 있는 일종의 연결된 함수입니다.\n그러나 구조체가 사용자 지정 유형을 생성할 수 있는 유일한 방법은 아닙니다. Rust의 열거형(enum) 기능을 사용하여 도구 상자에 다른 도구를 추가해 보겠습니다.\n","id":"https://hwjskt.github.io/rust/chapter5/3-method-syntax/","title":"Method Syntax"},"https://hwjskt.github.io/rust/chapter6/":{"body":"요약\n열거형 및 패턴 일치\n이 장에서는 enums이라고도 하는 열거형(enumerations) 에 대해 살펴보겠습니다. 열거형을 사용하면 가능한 변형(variants)을 열거하여 유형을 정의할 수 있습니다. 먼저 열거형을 정의하고 사용합니다. 그렇게 열거형이 데이터와 함께 의미를 인코딩하는 방법을 보여줍니다. 다음으로 Option이라는 특히 유용한 열거형을 살펴보겠습니다. Option은 값이 무언가가 될 수도 있고 아무것도 아닐 수 있음을 나타냅니다. 그런 다음 match 식을 이용한 패턴 매칭를 통해 열거형의 값이 달라짐에 따라 다른 코드를 실행하는 쉬운 방법을 살펴보겠습니다. 마지막으로 코드에서 열거형을 처리하는 데 사용할 수 있는 또 다른 편리하고 간결한 관용구인 if let 구문을 다룰 것입니다.\n","id":"https://hwjskt.github.io/rust/chapter6/","title":"Enums and Pattern Matching"},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"body":"요약\n\n열거형은 가능한 값들(변형, variant)을 열거해두고 그 중 하나만 선택하는 것\n구조체 대신 열거형을 사용하면 좋은점\n\n데이터를 각 열거형 변형에 직접 넣으면 더 간결\n각 변형에는 연결된 데이터의 타입과 양이 다를 수 있다. (구조체는 필드(key)가 같으면 타입도 같아야 한다.)\n열거형 변형 내에 모든 종류의 데이터(예: 문자열, 숫자, 구조체, 다른 열거형 등 )를 넣을 수 있음\n\n\n구조체처럼 impl을 사용하여  대한 메서드를 정의할 수 있다.\nOption 열거형\n\nNone 과 Some 변형을 가지고 있다.\n변형을 사용할 때, Option::Some 아니고, Some 으로 사용가능\nmatch 식을 함께 사용해서 각 변형에 따른 코드를 실행가능\n\n\n\n열거형 정의\n구조체(structs)는 관련 필드와 데이터를 함께 그룹화하는 방법을 제공합니다. width와 height가 있는 Rectangle이 예입니다. 열거형은 값이 가능한 값 집합 중 하나라고 말하는 방법을 제공합니다. 예를 들어, 직사각형은 원과 삼각형을 포함하는 가능한 도형 세트 중 하나라고 말하고 싶을 수 있습니다. 이를 위해 Rust는 이러한 가능성을 열거형으로 인코딩할 수 있도록 합니다.\n코드로 표현하고 싶은 상황을 살펴보고 이 경우 열거형이 구조체보다 유용하고 더 적합한 이유를 살펴보겠습니다. IP 주소로 작업해야 한다고 가정해 보겠습니다. 현재 IP 주소에는 버전 4와 버전 6의 두 가지 주요 표준이 사용됩니다. 이것이 우리 프로그램이 접하게 될 IP 주소에 대한 유일한 가능성이기 때문에 가능한 모든 변형을 열거 할 수 있습니다.\n모든 IP 주소는 버전 4 또는 버전 6 주소일 수 있지만 동시에 둘 다일 수는 없습니다. IP 주소의 이러한 속성 때문에 enum 데이터 구조가 적절합니다. enum 값은 변형들 중 하나일 수 밖에 없기 때문입니다.  버전 4 및 버전 6 주소는 여전히 기본적으로 IP 주소이므로, 코드가 모든 종류의 IP 주소에 적용되는 상황을 처리할 때 동일한 유형으로 취급되어야 합니다.\nIpAddrKind 열거형을 정의하고 IP 주소가 될 수 있는 V4 및 V6 종류를 나열하여 이 개념을 코드로 표현할 수 있습니다. 열거형의 변형은 다음과 같습니다.\nenum IpAddrKind {\n    V4,\n    V6,\n}\n\nIpAddrKind는 이제 코드의 다른 곳에서 사용할 수 있는 사용자 정의 데이터 유형입니다.\n열거형 값(Enum values)\n다음과 같이 IpAddrKind의 두 변형 각각의 인스턴스를 만들 수 있습니다.\n    let four = IpAddrKind::V4;\n    let six = IpAddrKind::V6;\n\n열거형의 변형은 해당 식별자 아래에 네임스페이스가 지정되며 이중 콜론을 사용하여 둘을 구분합니다. 이제 IpAddrKind::V4 및 IpAddrKind::V6 값이 모두 IpAddrKind타입이기 때문에 유용합니다. 예를 들어, 이후 IpAddrKind를 사용하는 함수를 정의할 수 있습니다.\nfn route(ip_kind: IpAddrKind) {}\n\n그리고 우리는 이 함수를 두 변형으로 호출할 수 있습니다:\n    route(IpAddrKind::V4);\n    route(IpAddrKind::V6);\n\n열거형을 사용하면 더 많은 이점이 있습니다. IP 주소 유형에 대해 더 생각해 보면 현재 실제 IP 주소 데이터를 저장할 방법이 없습니다. 우리는 그것이 어떤 종류 인지 만 알고 있습니다. 5장에서 구조체에 대해 방금 배웠다면 목록 6-1에 표시된 대로 구조체를 사용하여 이 문제를 해결하고 싶은 유혹을 느낄 수 있습니다.\n    enum IpAddrKind {\n        V4,\n        V6,\n    }\n\n    struct IpAddr {\n        kind: IpAddrKind,\n        address: String,\n    }\n\n    let home = IpAddr {\n        kind: IpAddrKind::V4,\n        address: String::from(`127.0.0.1`),\n    };\n\n    let loopback = IpAddr {\n        kind: IpAddrKind::V6,\n        address: String::from(`::1`),\n    };\n\n목록 6-1: struct를 사용하여 데이터 및 IP 주소의 IpAddrKind 변형 저장\n여기에서 IpAddrKind 유형의 kind 필드(이전에 정의한 enum)와 String 유형의 address 필드가 있는 구조체 IpAddr를 정의했습니다. 이 구조체에는 두 개의 인스턴스가 있습니다. 첫 번째는 home이며 127.0.0.1의 관련 주소 데이터와 함께 kind로 IpAddrKind::V4 값을 가집니다. 두 번째 인스턴스는 loopback입니다. kind 값인 V6으로 IpAddrKind의 다른 변형이 있으며 이와 연결된 주소 ::1이 있습니다. 구조체를 사용하여 kind 및 address 값을 함께 묶었으므로 이제 변형이 값과 연결됩니다.\n그러나 열거형만 사용하여 동일한 개념을 나타내는 것이 더 간결합니다. 구조체 내부에 열거형을 사용하는 것보다, 데이터를 각 열거형 변형에 직접 넣으면 더 간결합니다. 아래 코드에서 IpAddr 열거형의 이 새로운 정의는 V4 및 V6 변형 모두 연결된 문자열 값을 가질 것이라고 말합니다.\n    enum IpAddr {\n        V4(String),\n        V6(String),\n    }\n\n    let home = IpAddr::V4(String::from(`127.0.0.1`));\n\n    let loopback = IpAddr::V6(String::from(`::1`));\n\n열거형의 각 변형에 직접 데이터를 첨부하므로 추가 구조체가 필요하지 않습니다. 여기에서 열거형의 작동 방식에 대한 또 다른 세부 정보를 더 쉽게 볼 수 있습니다. 우리가 정의하는 각 열거형 변형의 이름도 열거형의 인스턴스를 구성하는 함수가 됩니다. 즉, IpAddr::V4()는 String 인수를 사용하고 IpAddr 유형의 인스턴스를 반환하는 함수 호출입니다. 열거형을 정의한 결과로 정의된 이 생성자 함수를 자동으로 얻습니다.\n구조체 대신 열거형을 사용하면 또 다른 이점이 있습니다. 각 변형에는 연결된 데이터의 유형과 양이 다를 수 있습니다. 버전 4 IP 주소에는 항상 0에서 255 사이의 값을 갖는 4개의 숫자 구성 요소가 있습니다. V4 주소를 4개의 u8 값으로 저장하고 싶지만 V6 주소를 하나의 String 값으로 표현하려면 구조체로는 할 수 없습니다. 열거형은 이 경우를 쉽게 처리합니다.\n    enum IpAddr {\n        V4(u8, u8, u8, u8),\n        V6(String),\n    }\n\n    let home = IpAddr::V4(127, 0, 0, 1);\n\n    let loopback = IpAddr::V6(String::from(`::1`));\n\n버전 4 및 버전 6 IP 주소를 저장하기 위해 데이터 구조를 정의하는 여러 가지 방법을 보여주었습니다. 그러나 밝혀진 바와 같이 IP 주소를 저장하고 어떤 종류인지 인코딩하려는 것은 너무 일반적이어서 표준 라이브러리에 우리가 사용할 수 있는 정의가 있습니다! 표준 라이브러리가 IpAddr을 정의하는 방법을 살펴보겠습니다. 여기에는 우리가 정의하고 사용한 정확한 열거형 및 변형이 있지만 각각에 대해 다르게 정의되는 두 개의 서로 다른 구조체의 형태로 변형 내부에 주소 데이터를 포함합니다. 변종:\nstruct Ipv4Addr {\n    // --snip--\n}\n\nstruct Ipv6Addr {\n    // --snip--\n}\n\nenum IpAddr {\n    V4(Ipv4Addr),\n    V6(Ipv6Addr),\n}\n\n이 코드는 열거형 변형 내에 모든 종류의 데이터(예를 들어 문자열, 숫자 유형 또는 구조체와 같은 )를 넣을 수 있음을 보여줍니다. 다른 열거형을 포함할 수도 있습니다! 또한 표준 라이브러리 유형은 종종 여러분이 생각하는 것보다 훨씬 더 복잡하지 않습니다.\n표준 라이브러리에 IpAddr에 대한 정의가 포함되어 있지만 표준 라이브러리의 정의를 범위로 가져오지 않았기 때문에 여전히 충돌 없이 자체 정의를 만들고 사용할 수 있습니다. 유형을 범위로 가져오는 방법에 대해서는 7장에서 자세히 설명합니다.\nListing 6-2에 있는 enum의 또 다른 예를 살펴보겠습니다. 이것은 변형에 다양한 유형이 내장되어 있습니다.\nenum Message {\n    Quit,\n    Move { x: i32, y: i32 },\n    Write(String),\n    ChangeColor(i32, i32, i32),\n}\n\n목록 6-2: 각각 다른 양과 유형의 값을 저장하는 변형이 있는 메시지 열거형\n이 열거형에는 유형이 다른 네 가지 변형이 있습니다.\n\nQuit에는 이와 관련된 데이터가 전혀 없습니다.\nMove에는 구조체와 마찬가지로 명명된 필드가 있습니다.\nWrite에는 단일 문자열이 포함됩니다.\nChangeColor에는 3개의 i32 값이 포함됩니다.\n\n목록 6-2에 있는 것과 같은 변형으로 열거형을 정의하는 것은 열거형이 struct 키워드를 사용하지 않고 모든 변형이 Message 유형 아래에 함께 그룹화된다는 점을 제외하면 다른 종류의 구조체 정의를 정의하는 것과 유사합니다. 다음 구조체는 이전 열거형 변형이 보유하는 것과 동일한 데이터를 보유할 수 있습니다.\nstruct QuitMessage; // unit struct\nstruct MoveMessage {\n    x: i32,\n    y: i32,\n}\nstruct WriteMessage(String); // tuple struct\nstruct ChangeColorMessage(i32, i32, i32); // tuple struct\n\n그러나 각각 고유한 유형이 있는 서로 다른 구조체를 사용하는 경우 Listing 6-2에 정의된 Message 열거형으로 할 수 있는 것처럼 이러한 종류의 메시지를 받는 함수를 쉽게 정의할 수 없습니다. 단일 유형입니다.\n열거형과 구조체 사이에는 또 다른 유사점이 있습니다. impl을 사용하여 구조체에 대한 메서드를 정의할 수 있는 것처럼 열거형에 대한 메서드도 정의할 수 있습니다. 다음은 Message 열거형에서 정의할 수 있는 call이라는 메서드입니다.\n    impl Message {\n        fn call(&amp;self) {\n            // method body would be defined here\n        }\n    }\n\n    let m = Message::Write(String::from(`hello`));\n    m.call();\n\n메서드 본문은 self를 사용하여 메서드를 호출한 값을 가져옵니다. 이 예에서 우리는 Message::Write(String::from(\"hello\")) 값을 갖는 변수 m을 생성했으며 이것이 m.call()이 실행될 때 호출 메서드의 본문에 있는 self입니다.\n매우 일반적이고 유용한 표준 라이브러리의 또 다른 열거형인 Option을 살펴보겠습니다.\nOption 열거형과 Null 값에 대한 이점\n이 섹션에서는 표준 라이브러리에서 정의한 또 다른 열거형인 Option의 사례 연구를 살펴봅니다. Option 유형은 값이 무언가가 될 수도 있고 아무것도 아닐 수도 있는 매우 일반적인 시나리오를 인코딩합니다.\n예를 들어 비어 있지 않은 목록의 첫 번째 항목을 요청하면 값을 받게 됩니다. 빈 목록의 첫 번째 항목을 요청하면 아무것도 얻지 못합니다. 유형 시스템 측면에서 이 개념을 표현하면 처리해야 하는 모든 사례를 처리했는지 여부를 컴파일러에서 확인할 수 있습니다. 이 기능은 다른 프로그래밍 언어에서 매우 일반적인 버그를 방지할 수 있습니다.\n프로그래밍 언어 설계는 종종 어떤 기능을 포함하는지에 따라 생각되지만 제외하는 기능도 중요합니다. Rust에는 다른 많은 언어에 있는 null 기능이 없습니다. Null 은 값이 없다는 의미의 값입니다. null이 있는 언어에서 변수는 항상 null 또는 null이 아닌 두 가지 상태 중 하나일 수 있습니다.\n2009년 프레젠테이션 Null References: The Billion Dollar Mistake에서 null의 발명가인 Tony Hoare는 다음과 같이 말했습니다.\n\n나는 그것을 나의 10억 달러짜리 실수라고 부른다. 그 당시 저는 객체 지향 언어의 참조를 위한 최초의 포괄적인 유형 시스템을 설계하고 있었습니다. 내 목표는 컴파일러가 자동으로 검사를 수행하여 모든 참조 사용이 절대적으로 안전하도록 하는 것이었습니다. 하지만 구현하기가 너무 쉽기 때문에 null 참조를 넣고 싶은 유혹을 뿌리칠 수 없었습니다. 이로 인해 수많은 오류, 취약성 및 시스템 충돌이 발생했으며 지난 40년 동안 아마도 10억 달러의 고통과 피해를 입혔을 것입니다.\n\nnull 값의 문제는 null 값을 null이 아닌 값으로 사용하려고 하면 일종의 오류가 발생한다는 것입니다. 이 null 또는 null이 아닌 속성은 널리 퍼져 있기 때문에 이러한 종류의 오류를 만들기가 매우 쉽습니다.\n그러나 null이 표현하려는 개념은 여전히 유용합니다. null은 현재 유효하지 않거나 어떤 이유로 없는 값입니다.\n문제는 실제로 개념이 아니라 특정 구현에 있습니다. 따라서 Rust에는 null이 없지만 존재하거나 존재하지 않는 값의 개념을 인코딩할 수 있는 열거형이 있습니다. 이 열거형은 Option&lt;T&gt;이며 표준 라이브러리 에 의해 다음과 같이 정의됩니다.\nenum Option&lt;T&gt; {\n    None,\n    Some(T),\n}\n\nOption&lt;T&gt; 열거형은 너무 유용해서 서문에 포함되어 있습니다. 명시적으로 범위로 가져올 필요가 없습니다. 해당 변형도 서문에 포함되어 있습니다. 접두어 Option:: 없이 Some 및 None을 직접 사용할 수 있습니다. Option&lt;T&gt; 열거형은 여전히 일반 열거형이며 Some(T) 및 None은 여전히 Option&lt;T&gt; 유형의 변형입니다.\n&lt;T&gt; 구문은 우리가 아직 이야기하지 않은 Rust의 기능입니다. 제네릭 유형 매개변수이며, 제네릭에 대해서는 10장에서 자세히 다룰 것입니다. 지금은 Option 열거형의 Some 변형이 어떤 타입의 데이터 한 조각을 보유할 수 있으며 &lt;T&gt; 대신 사용되는 각 구체적인 유형이 전체 Option&lt;T&gt;을 만든다는 것을 의미합니다. 다음은 Option 값을 사용하여 숫자 유형과 문자열 유형을 보유하는 몇 가지 예입니다.\n    let some_number = Some(5);\n    let some_char = Some('e');\n\n    let absent_number: Option&lt;i32&gt; = None;\n\nsome_number의 타입은 Option&lt;i32&gt;입니다. \nsome_char의 타입은 Option&lt;char&gt;, 이는 다른 타입입니다. Some 변형 내부에 값을 지정했기 때문에 Rust는 이러한 유형을 추론할 수 있습니다. \nabsent_number의 경우 Rust는 전체 Option 유형에 주석을 달도록 요구합니다. 컴파일러는 None 값만 보고 해당 Some 변형의 타입을 유추할 수 없습니다. 여기에서, 우리는 absent_number가 Option&lt;i32&gt; 유형임을 의미한다고 Rust에 알립니다.\nSome 값이 있을 때 값이 존재하고 그 값이 Some 내에 있음을 알 수 있습니다. None 값이 있는 경우 어떤 의미에서는 null과 같은 의미입니다. 즉, 유효한 값이 없습니다. 그렇다면 왜 Option&lt;T&gt; 가 null 보다 낫습니까?\n간단히 말하면, Option&lt;T&gt;와 T(여기서 T는 모든 유형일 수 있음)가 서로 다른 유형입니다. 그래서 컴파일러는 확실히 유효한 값인 것처럼 Option&lt;T&gt;을 사용하도록 허용하지 않습니다. 예를 들어 이 코드는 i8을 Option에 추가하려고 하기 때문에 컴파일되지 않습니다.\n    let x: i8 = 5;\n    let y: Option&lt;i8&gt; = Some(5);\n\n    let sum = x + y;\n\n이 코드를 실행하면 다음과 같은 오류 메시지가 나타납니다.\n$ cargo run\n   Compiling enums v0.1.0 (file:///projects/enums)\nerror[E0277]: cannot add `Option&lt;i8&gt;` to `i8`\n --&gt; src/main.rs:5:17\n  |\n5 |     let sum = x + y;\n  |                 ^ no implementation for `i8 + Option&lt;i8&gt;`\n  |\n  = help: the trait `Add&lt;Option&lt;i8&gt;&gt;` is not implemented for `i8`\n  = help: the following other types implement trait `Add&lt;Rhs&gt;`:\n            &lt;&amp;'a i8 as Add&lt;i8&gt;&gt;\n            &lt;&amp;i8 as Add&lt;&amp;i8&gt;&gt;\n            &lt;i8 as Add&lt;&amp;i8&gt;&gt;\n            &lt;i8 as Add&gt;\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `enums` due to previous error\n\n극심한! 사실상 이 오류 메시지는 Rust가 i8과 Option&lt;i8&gt;을 더하는 방법을 이해하지 못한다는 것을 의미합니다.서로 다른 유형이기 때문입니다. Rust에서 i8과 같은 유형의 값이 있을 때, 컴파일러는 항상 유효한 값을 가지고 있는지 확인합니다. 해당 값을 사용하기 전에 null을 확인하지 않고도 자신 있게 진행할 수 있습니다.  Option&lt;i8&gt;이 있는 경우에만(또는 우리가 작업 중인 어떤 유형의 값이든) 값이 없을 가능성에 대해 걱정해야 하며 컴파일러는 값을 사용하기 전에 해당 사례를 처리하는지 확인합니다.\n즉, 작업을 수행하기 전에 Option&lt;T&gt;을 T 로 변환해야 합니다.  일반적으로 이것은 null과 관련된 가장 일반적인 문제 중 하나를 파악하는 데 도움이 됩니다. 실제로 null이 아닐 때 null이 아니라고 가정합니다.\nnull이 아닌 값을 잘못 가정하는 위험을 제거하면 코드에 대한 확신을 가질 수 있습니다. null일 수 있는 값을 가지려면 해당 값의 유형을 Option&lt;T&gt;으로 만들어 명시적으로 옵트인해야 합니다. 그런 다음 해당 값을 사용할 때 값이 null인 경우를 명시적으로 처리해야 합니다. 값의 타입이 Option&lt;T&gt;가 아니라면, 값이 null이 아니라고 안전하게 가정할 수 있습니다. 이는 Rust가 null의 보급을 제한하고 Rust 코드의 안전성을 높이기 위한 의도적인 설계 결정이었습니다.\n그러면 Option&lt;T&gt; 타입의 값이 있을 때 Some 변형에서 T 값을 어떻게 얻어서 사용할까요?   Option&lt;T&gt; enum에는 다양한 상황에서 유용한 많은 메서드가 있습니다. 설명서 에서 확인할 수 있습니다. Option&lt;T&gt;의 메서드에 익숙해지면 Rust와의 여정에 매우 유용할 것입니다.\n일반적으로 Option&lt;T&gt; 값을 사용하려면 각 변형을 처리할 코드가 있어야 합니다. Some(T) 값이 있을 때만 실행되는 코드가 필요하고, 이 코드는 내부 T를 사용할 수 있습니다. None 값이 있는 경우에만 실행되는 코드를 원할 수 있습니다만, 이때는 T 값을 사용할 수 없습니다. match 식은 열거형과 함께 사용할 때 바로 이 작업을 수행하는 제어 흐름 구성입니다. 포함된 열거형의 변형에 따라 다른 코드를 실행하고, 해당 코드는 일치하는 값 안에 있는 데이터를 사용할 수 있습니다.\n","id":"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/","title":"Defining an Enum"},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"body":"요약\n\nmatch 다음에 표현식 위치\nmatch 내부의 arm 형식은 패턴 =&gt; 코드,\n코드는 {} 로 둘러싸도 된다.\narm의 패턴은 모든 가능성을 커버해야 합니다. \n범용 arm 을 사용할 수있는데 위치는 반드시 마지막\n범용 arm 에서 값을 사용하지 않을 예정이면 _ 를 사용\n아무것도 하지 않을 것이라는 코드는 빈 튜플 () 을 사용 \n\nmatch 제어 흐름 구성\nRust에는 일련의 패턴과 값을 비교한 다음, 패턴이 일치하는지에 따라 코드를 실행할 수 있는 match라는 매우 강력한 제어 흐름 구조가 있습니다. 패턴은 리터럴 값, 변수 이름, 와일드카드 및 기타 여러 항목으로 구성될 수 있습니다. 18장 에서는 모든 종류의 패턴과 그 기능을 다룹니다. match의 힘은 패턴의 표현력과 컴파일러가 가능한 모든 사례가 처리되었음을 확인한다는 것입니다.\nmatch 표현을 동전 분류 기계와 같다고 생각하십시오. 동전은 다양한 크기의 구멍이 있는 트랙을 따라 미끄러져 내려오고 ,각 동전은 맞는 첫 번째 구멍을 통해 떨어집니다. 같은 방식으로 값은 match의 각 패턴을 통과하고, 값이 매칭되는 첫 번째 패턴에 해당하는 코드로 이동합니다. \n동전이라고 하면 match를 사용하여 예를 들어 보겠습니다! Listing 6-3과 같이 미지의 미국 동전을 가져와 계수기와 유사한 방식으로 어떤 동전인지 결정하고 그 값을 센트 단위로 반환하는 함수를 작성할 수 있습니다.\nenum Coin {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter,\n}\n\nfn value_in_cents(coin: Coin) -&gt; u8 {\n    match coin {           // match 다음에 표현식 위치\n        Coin::Penny =&gt; 1,  // arm 은 패턴 =&gt; 코드, 형식\n        Coin::Nickel =&gt; 5,\n        Coin::Dime =&gt; 10,\n        Coin::Quarter =&gt; 25,\n    }\n}\n\n목록 6-3: 열거형(enum) 및 열거형의 변형(variant)을 패턴으로 갖는 match 식\nvalue_in_cents 함수에서 match를 분석해 보겠습니다. 먼저 match 키워드와 표현식을 나열합니다. 이 경우 값은 coin입니다. 이것은 if와 함께 사용되는 조건식과 매우 유사해 보이지만 큰 차이점이 있습니다. if를 사용하면 조건이 부울 값으로 평가되어야 하지만 여기서는 모든 유형이 될 수 있습니다. 이 예제에서 coin의 유형은 첫 번째 줄에서 정의한 Coin 열거형입니다.\n다음은 match arm입니다. arm은 패턴과 일부 코드의 두 부분으로 구성됩니다. 여기에서 첫 번째 팔에는 Coin::Penny 값인 패턴이 있고 패턴과 실행할 코드를 구분하는 =&gt; 연산자가 있습니다. 이 경우 코드는 값 1일 뿐입니다. 각 팔은 쉼표로 다음 팔과 구분됩니다.\nmatch 표현식이 실행되면 결과 값을 각 팔의 패턴과 순서대로 비교합니다. 패턴이 값과 일치하면 해당 패턴과 연결된 코드가 실행됩니다. 해당 패턴이 값과 일치하지 않으면, 동전 분류기에서와 같이 다음 팔로 이동해서 계속됩니다. 우리는 필요한 만큼 많은 arm을 가질 수 있습니다: Listing 6-3에서 match에는 4개의 팔이 있습니다.\n각 arm과 연관된 코드는 식(expression)이며 일치하는 arm에서 식의 결과 값은 전체 match 식에 대해 반환되는 값입니다.\nmatch arm 코드가 짧으면 일반적으로 중괄호를 사용하지 않습니다. Listing 6-3에서 각 arm은 값을 반환합니다. 매치 arm에서 여러 줄의 코드를 실행하려면 중괄호를 사용해야 하며 arm 다음에 오는 쉼표는 선택 사항입니다. 예를 들어 다음 코드는 Lucky penny!를 인쇄합니다. 메서드가 Coin::Penny로 호출될 때마다 블록의 마지막 값인 1을 반환합니다.\nfn value_in_cents(coin: Coin) -&gt; u8 {\n    match coin {\n        Coin::Penny =&gt; {\n            println!(\"Lucky penny!\");\n            1\n        }\n        Coin::Nickel =&gt; 5,\n        Coin::Dime =&gt; 10,\n        Coin::Quarter =&gt; 25,\n    }\n}\n\n값에 바인딩되는 패턴\n일치 arm의 또 다른 유용한 기능은 패턴과 일치하는 값 부분에 바인딩할 수 있다는 것입니다. 열거형 변형(enum variants)에서 값을 추출할 수 있는 방법입니다.\n예를 들어 열거형 변형 중 하나를 변경하여 내부에 데이터를 보관하도록 하겠습니다. 1999년부터 2008년까지 미국은 50개 주마다 한 면이  다른 디자인의 쿼터를 주조했습니다. 다른 주화에는 주 디자인이 없으므로, 쿼터에만 이 추가 값이 있습니다.  이 정보를 enum에 추가할 수 있습니다. Listing 6-4에서 수행한 것처럼, 내부에 UsState 값을 포함하도록 Quarter 변형을 변경합니다.\n#[derive(Debug)] // so we can inspect the state in a minute\nenum UsState {\n    Alabama,\n    Alaska,\n    // --snip--\n}\n\nenum Coin {\n    Penny,\n    Nickel,\n    Dime,\n    Quarter(UsState),  // 쿼터에 UsState 값을 포함\n}\n\n목록 6-4: Quarter 변형이 UsState 값도 포함하는 Coin 열거형\n친구가 50개의 주 쿼터를 모두 수집하려고 한다고 상상해 봅시다. 동전 유형별로 느슨한 거스름돈을 정렬하는 동안, 각 분기와 관련된 주 이름을 불러서 친구가 가지고 있지 않은 것이 있으면 컬렉션에 추가할 수 있습니다.\n이 코드의 일치 표현식에서 변형 Coin::Quarter의 값과 일치하는 패턴에 state라는 변수를 추가합니다. Coin::Quarter가 일치하면 state 변수는 해당 분기의 상태 값에 바인딩됩니다. 그런 다음 해당 arm의 코드에서 다음과 같이 상태를 사용할 수 있습니다.\nfn value_in_cents(coin: Coin) -&gt; u8 {\n    match coin {\n        Coin::Penny =&gt; 1,\n        Coin::Nickel =&gt; 5,\n        Coin::Dime =&gt; 10,\n        Coin::Quarter(state) =&gt; {\n            println!(\"State quarter from {:?}!\", state);\n            25\n        }\n    }\n}\n\nvalue_in_cents(Coin::Quarter(UsState::Alaska))를 호출하면 coin은 Coin::Quarter(UsState::Alaska)가 됩니다. 해당 값을 각 일치 부문과 비교할 때 Coin::Quarter(state)에 도달할 때까지 일치하는 항목이 없습니다. 이 시점에서 state에 대한 바인딩은 UsState::Alaska 값이 됩니다. 그런 다음 println!에서 해당 바인딩을 사용할 수 있습니다. Quarter에 대한 Coin 열거형 변형에서 내부 상태 값을 가져옵니다.\nOption과 일치\n이전 섹션에서 Option&lt;T&gt;을 사용할 때 Some 케이스에서 내부 T 값을 가져오고 싶었습니다. Coin 열거형과 마찬가지로 match를 사용해서 Option&lt;T&gt; 을 처리할 수도 있습니다. 동전을 비교하는 대신 Option&lt;T&gt;의 변형을 비교하겠습니다. match 표현식이 작동하는 방식은 동일하게 유지됩니다.\nOption&lt;i32&gt;을 받는 함수를 작성하고 싶다고 가정해 보겠습니다. 내부에 값이 있으면 해당 값에 1을 더합니다. 내부에 값이 없으면 함수는 None 값을 반환하고 어떤 작업도 수행하지 않아야 합니다.\n이 함수는 match 덕분에 작성하기가 매우 쉽고 Listing 6-5와 같습니다.\n    fn plus_one(x: Option&lt;i32&gt;) -&gt; Option&lt;i32&gt; {\n        match x {\n            None =&gt; None,\n            Some(i) =&gt; Some(i + 1),\n        }\n    }\n\n    let five = Some(5);\n    let six = plus_one(five);\n    let none = plus_one(None);\n\n목록 6-5: 옵션에 match 표현식을 사용하는 함수`\nplus_one의 첫 번째 실행을 자세히 살펴보겠습니다. plus_one(five)를 호출하면 plus_one 본문의 변수 x는 Some(5) 값을 갖게 됩니다. 그런 다음 이를 각 매치 부문과 비교합니다.\n            None =&gt; None,\n\nSome(5) 값은 패턴 None과 일치하지 않으므로 다음 단계로 계속 진행합니다.\n            Some(i) =&gt; Some(i + 1),\n\nSome(5)는 Some(i)와 일치합니까? 그렇습니다! 동일한 변형이 있습니다. i는 Some에 포함된 값에 바인딩되므로 i는 값 5를 사용합니다. 그런 다음 매치 arm의 코드가 실행되므로 i 값에 1을 더하고 총 6이 포함된 새로운 Some 값을 생성합니다.\n이제 Listing 6-5에서 x가 None인 plus_one의 두 번째 호출을 살펴보겠습니다. match를 입력하고 첫 번째 팔과 비교합니다.\n            None =&gt; None,\n\n일치합니다! 추가할 값이 없으므로 프로그램이 중지되고 =&gt; 오른쪽에 None 값이 반환됩니다. 첫 번째 arm이 일치했기 때문에 다른 arm은 비교되지 않습니다.\nmatch와 열거형을 결합하면 많은 상황에서 유용합니다. Rust 코드에서 이 패턴을 많이 볼 수 있습니다. 열거형과 match하고 변수를 내부 데이터에 바인딩한 다음 이를 기반으로 코드를 실행합니다. 처음에는 조금 까다롭지만 익숙해지면 모든 언어로 제공되기를 바랄 것입니다. 지속적으로 사용자가 선호하는 제품입니다.\nmatch는 철저합니다\n우리가 논의해야 할 match의 또 다른 측면이 있습니다. 팔의 패턴은 모든 가능성을 커버해야 합니다. 버그가 있고 컴파일되지 않는 plus_one 함수의 이 버전을 고려하십시오.\n    fn plus_one(x: Option&lt;i32&gt;) -&gt; Option&lt;i32&gt; {\n        match x {\n            Some(i) =&gt; Some(i + 1),\n        }\n    }\n\n우리는 None 인 경우를 처리하지 않았으므로 이 코드는 버그를 일으킬 것입니다. 운 좋게도 Rust가 잡는 방법을 알고 있는 버그입니다. 이 코드를 컴파일하려고 하면 다음 오류가 발생합니다.\n$ cargo run\n   Compiling enums v0.1.0 (file:///projects/enums)\nerror[E0004]: non-exhaustive patterns: `None` not covered\n --&gt; src/main.rs:3:15\n  |\n3 |         match x {\n  |               ^ pattern `None` not covered\n  |\nnote: `Option&lt;i32&gt;` defined here\n --&gt; /rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/core/src/option.rs:518:1\n  |\n  = note: \n/rustc/d5a82bbd26e1ad8b7401f6a718a9c57c96905483/library/core/src/option.rs:522:5: not covered\n  = note: the matched value is of type `Option&lt;i32&gt;`\nhelp: ensure that all possible cases are being handled by adding a match arm with a wildcard pattern or an explicit pattern as shown\n  |\n4 ~             Some(i) =&gt; Some(i + 1),\n5 ~             None =&gt; todo!(),\n  |\n\nFor more information about this error, try `rustc --explain E0004`.\nerror: could not compile `enums` due to previous error\n\n\nRust는 우리가 모든 가능한 경우를 다루지 않았다는 것과 우리가 어떤 패턴을 잊어버렸는지 알고 있습니다! Rust의 match는 철저 합니다. 코드가 유효하려면 모든 가능성을 처리해야 합니다. 특히 Option&lt;T&gt;의 경우, Rust는 우리가 None 사례를 명시적으로 처리하는 것을 잊는 것을 방지해줍니다. 이로써 null이 있을 수 있는 값을 가지고 있다고 가정하는 것을 방지하여 앞에서 논의한 수십억 달러의 실수를 불가능하게 만듭니다.\n범용 패턴 및 _ 자리 표시자\n열거형을 사용하면 몇 가지 특정 값에 대해 특별한 작업을 수행할 수도 있지만, 다른 모든 값에 대해서는 하나의 기본 작업을 수행합니다. 주사위 굴림에서 3을 굴리면 플레이어가 움직이지 않고, 대신 새 멋진 모자를 받는 게임을 구현한다고 상상해 보십시오. 주사위 굴림에서 7이 나오면 플레이어는 멋진 모자를 잃습니다. 다른 모든 값의 경우 플레이어는 게임 보드에서 해당 수의 공간을 이동합니다. 다음은 임의의 값이 아닌 하드코딩된 주사위 굴림의 결과와 본문이 없는 함수로 표현되는 다른 모든 논리를 사용하여 논리를 구현하는 match입니다. 왜냐하면 실제로 구현하는 것은 이 예제의 범위를 벗어나기 때문입니다.\n    let dice_roll = 9;\n    match dice_roll {\n        3 =&gt; add_fancy_hat(),\n        7 =&gt; remove_fancy_hat(),\n        other =&gt; move_player(other),  // 범용 arm 은 마지막에 위치\n    }\n\n    fn add_fancy_hat() {}\n    fn remove_fancy_hat() {}\n    fn move_player(num_spaces: u8) {}\n\n처음 두 팔의 경우 패턴은 리터럴 값 3 및 7입니다. 다른 모든 가능한 값을 포함하는 마지막 팔의 경우 패턴은 other라는 이름을 지정하기 위해 선택한 변수입니다. other 암에 대해 실행되는 코드는 변수를 move_player 함수에 전달하여 사용합니다.\n이 코드는 u8이 가질 수 있는 모든 가능한 값을 나열하지 않았지만 마지막 패턴이 구체적으로 나열되지 않은 모든 값과 일치하기 때문에 컴파일됩니다. 이 범용(catch-all) 패턴은 match가 철저해야 한다는 요구 사항을 충족합니다. 패턴이 순서대로 평가되기 때문에 범용(catch-all) arm을 마지막에 두어야 합니다. 범용 arm을 더 일찍 넣으면 다른 arm은 실행되지 않으므로, catch-all 후에 arm을 추가하면 Rust가 경고합니다!\nRust는 또한 포괄적인 것을 원하지만 포괄적인 패턴의 값을 사용하고 싶지 않을 때 사용할 수 있는 패턴이 있습니다. _는 모든 값과 일치하고 해당 값에 바인딩되지 않는 특수 패턴입니다. 이는 Rust에게 우리가 그 값을 사용하지 않을 것임을 알려주므로 Rust는 사용하지 않는 변수에 대해 경고하지 않습니다.\n게임의 규칙을 변경해 보겠습니다. 이제 3이나 7이 아닌 다른 것을 굴리면 다시 굴려야 합니다. 더 이상 범용 값을 사용할 필요가 없으므로 other라는 변수 대신 _를 사용하도록 코드를 변경할 수 있습니다.\n    let dice_roll = 9;\n    match dice_roll {\n        3 =&gt; add_fancy_hat(),\n        7 =&gt; remove_fancy_hat(),\n        _ =&gt; reroll(),\n    }\n\n    fn add_fancy_hat() {}\n    fn remove_fancy_hat() {}\n    fn reroll() {}}\n\n이 예제는 또한 마지막 팔의 다른 모든 값을 명시적으로 무시하기 때문에 완전성 요구 사항을 충족합니다. 우리는 아무것도 잊지 않았습니다.\n마지막으로 게임의 규칙을 한 번 더 변경하여 3이나 7 이외의 것을 굴려도 자신의 차례에 아무 일도 일어나지 않도록 하겠습니다. _ arm 에 해당하는 코드로 unit 값(“튜플 유형”  섹션에서 언급한 빈 튜플 타입)을 사용하여 표현할 수 있습니다.\n    let dice_roll = 9;\n    match dice_roll {\n        3 =&gt; add_fancy_hat(),\n        7 =&gt; remove_fancy_hat(),\n        _ =&gt; (),\n    }\n\n    fn add_fancy_hat() {}\n    fn remove_fancy_hat() {}\n\n여기에서 우리는 명시적으로 이전 버전의 패턴과 일치하지 않는 다른 값을 사용하지 않을 것이며 이 경우 어떤 코드도 실행하고 싶지 않다고 명시적으로 말하고 있습니다.\n패턴과 일치에 대한 자세한 내용은  18장 에서 다룰 것입니다. 지금은 match 표현이 다소 장황한 상황에서 유용할 수 있는 if let 구문으로 넘어갈 것입니다.\n","id":"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/","title":"The match Control Flow Construct"},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"body":"요약\n\nmatch를 사용하여 표현하기에는 너무 장황하다면,\nif let  else 를 사용할 수 있다 \n\nif let을 사용한 간결한 제어 흐름\nif let 구문을 사용하면 if와 let을 덜 장황한 방식으로 결합하여 나머지 패턴은 무시하면서 하나의 패턴과 일치하는 값을 처리할 수 있습니다. config_max 변수에 있는  Option&lt;u8&gt; 값을 매칭해서 값이 Some 변형인 경우에만 코드를 실행하는 프로그램을 Listing 6-6 에서 보겠습니다.\n    let config_max = Some(3u8);\n    match config_max {\n        Some(max) =&gt; println!(`The maximum is configured to be {}`, max),\n        _ =&gt; (),\n    }\n\n목록 6-6: 값이 Some인 경우에만 코드 실행에 관심이 있는 match\n값이 Some이면 패턴의 변수 max에 값을 바인딩하여 Some 변형의 값을 출력합니다. 우리는 None 값으로 아무 것도 하고 싶지 않습니다. match 표현을 만족시키려면 하나의 변형만 처리한 후 _ =&gt; ()를 추가해야 하는데, 이는 추가하기 귀찮은 상용구 코드입니다.\n대신 if let을 사용하여 더 짧게 작성할 수 있습니다. 다음 코드는 목록 6-6의 일치와 동일하게 작동합니다.\n    let config_max = Some(3u8);\n    if let Some(max) = config_max {\n        println!(`The maximum is configured to be {}`, max);\n    }\n\nif let 구문은 패턴과 등호로 구분된 표현식을 사용합니다. 이것은 match와 같은 방식으로 작동하며, match에 식이 주어지고 패턴이 첫 번째 arm입니다. 이 경우 패턴은 Some(max)이고 max는 Some 내부의 값에 바인딩됩니다. 그런 다음 해당 match 팔에서 max를 사용한 것과 같은 방식으로 if let 블록의 본문에서 max를 사용할 수 있습니다. 값이 패턴과 일치하지 않으면 if let 블록의 코드가 실행되지 않습니다.\nif let을 사용하면 타이핑, 들여쓰기, 상용구 코드가 줄어듭니다. 그러나 match가 시행하는 철저한 검사를 잃게 됩니다. match와 if let 중에서 선택하는 것은 특정 상황에서 수행하는 작업과 간결함을 얻는 것이 철저한 확인을 잃는 것에 대한 적절한 절충안인지 여부에 따라 다릅니다.\n즉, 값이 하나의 패턴과 일치할 때 코드를 실행한 다음 다른 모든 값을 무시하는 match에 대한 대안으로 if let을 생각할 수 있습니다.\nif let과 함께 else를 포함할 수 있습니다. else와 함께 사용되는 코드 블록은 match 표현식에서 _ 케이스와 함께 사용되는 코드 블록과 동일합니다. Listing 6-4에서 Quarter 변형이 UsState 값을 포함하는 Coin 열거형 정의를 상기하십시오. 분기 상태를 알리는 동시에 우리가 보는 모든 비 분기 동전을 세고 싶다면 다음과 같이 일치 표현식을 사용하여 계산할 수 있습니다.\n    let mut count = 0;\n    match coin {\n        Coin::Quarter(state) =&gt; println!(`State quarter from {:?}!`, state),\n        _ =&gt; count += 1,\n    }\n\n또는 다음과 같이 if let 및 else 표현식을 사용할 수 있습니다.\n    let mut count = 0;\n    if let Coin::Quarter(state) = coin {\n        println!(`State quarter from {:?}!`, state);\n    } else {\n        count += 1;\n    }\n\n프로그램에 match를 사용하여 표현하기에는 너무 장황하다면,  if let도 사용할 수 있음을 기억하십시오.\n요약\n이제 열거형(enum)을 사용하여 열거된 값 세트 중 하나가 될 수 있는 사용자 정의 타입을 만드는 방법을 다루었습니다. 우리는 표준 라이브러리의 Option&lt;T&gt; 타입은 타입 시스템을 사용하여 오류를 방지하는 데 도움이 됩니다. enum 값에 데이터가 있는 경우 처리해야 하는 사례 수에 따라 match 또는 if let을 사용하여 해당 값을 추출하고 사용할 수 있습니다.\nRust 프로그램은 이제 구조체(structs)와 열거형(enums)을 사용하여 도메인의 개념을 표현할 수 있습니다. API에서 사용할 사용자 정의 타입을 생성하면 타입 안전성이 보장됩니다. 컴파일러는 특정 함수가 각 함수가 기대하는 타입의 값만 얻도록 합니다.\n사용자에게 사용하기 쉽고 사용자에게 필요한 것만 정확하게 노출하는 잘 구성된 API를 사용자에게 제공하기 위해, 이제 Rust의 모듈을 살펴보겠습니다.\n","id":"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/","title":"Concise Control Flow with if let.md"},"https://hwjskt.github.io/rust/chapter7/":{"body":"요약\n패키지, 크레이트 및 모듈로 성장하는 프로젝트 관리\n대규모 프로그램을 작성할 때 코드 구성이 점점 더 중요해집니다. 관련 기능을 그룹화하고 고유한 기능으로 코드를 분리하면 특정 기능을 구현하는 코드를 찾을 위치와 기능 작동 방식을 변경하기 위해 이동해야 하는 위치를 명확히 할 수 있습니다.\n지금까지 우리가 작성한 프로그램은 하나의 파일에 하나의 모듈에 있었습니다. 프로젝트가 커짐에 따라 코드를 여러 모듈로 분할한 다음 여러 파일로 분할하여 구성해야 합니다. 패키지는 여러 바이너리 크레이트와 선택적으로 하나의 라이브러리 크레이트를 포함할 수 있습니다. 패키지가 커짐에 따라 외부 종속성이 되는 별도의 크레이트로 부품을 추출할 수 있습니다. 이 장에서는 이러한 모든 기술을 다룹니다. 함께 발전하는 상호 관련된 일련의 패키지로 구성된 대규모 프로젝트의 경우 Cargo는 작업 공간을 제공하며 이에 대해서는 14장의 Cargo workspace 섹션 에서 다룰 것입니다.\n또한 더 높은 수준에서 코드를 재사용할 수 있게 해주는 구현 세부 사항 캡슐화에 대해서도 논의할 것입니다. 당신이 작업을 구현하면, 다른 사람의 코드가 구현 작동 방식을 알 필요 없이 공용 인터페이스를 통해 당신의 코드를 호출할 수 있습니다. 코드를 작성하는 방식에 따라, 다른 사람 코드에서 사용할 수 있도록 공개(public)되는 부분과 당신만 변경 권한이 있는 개인(privat)e 구현 부분으로 나뉩니다.  이것은 머리 속에 간직해야 하는 세부 사항의 양을 제한하는 또 다른 방법입니다.\n관련 개념은 범위(scope)입니다. 코드가 작성되는 중첩 컨텍스트에는 in scope로 정의되는 일련의 이름이 있습니다. 코드를 읽고 쓰고 컴파일할 때 프로그래머와 컴파일러는 특정 지점의 특정 이름이 변수, 함수, 구조체, 열거형, 모듈, 상수 또는 기타 항목을 참조하는지 여부와 해당 항목이 무엇을 의미하는지 알아야 합니다. 범위를 생성하고 범위에 포함되거나 포함되지 않는 이름을 변경할 수 있습니다. 동일한 범위에 동일한 이름을 가진 두 개의 항목이 있을 수 없습니다. 이름 충돌을 해결하기 위한 도구를 사용할 수 있습니다.\nRust에는 어떤 세부 정보가 노출되고 어떤 세부 정보가 비공개인지, 프로그램의 각 범위에 어떤 이름이 있는지 등 코드 구성을 관리할 수 있는 여러 기능이 있습니다. 모듈 시스템 이라고도 통칭하는 이러한 기능에는 다음이 포함됩니다.\n\n패키지(packages) : crates 를 만들고 테스트하고 공유할 수 있는 Cargo 기능\n크레이트(crates): 라이브러리 또는 실행 파일을 생성하는 모듈 트리\n모듈 및 사용: 경로의 구성, 범위 및 개인정보 보호를 제어할 수 있습니다.\n경로(paths): 구조체, 함수 또는 모듈과 같은 항목의 이름을 지정하는 방법\n\n이 장에서는 이러한 모든 기능을 다루고, 상호 작용하는 방법에 대해 설명하고, 범위를 관리하는 데 사용하는 방법을 설명합니다. 마지막에는 모듈 시스템에 대한 확실한 이해가 있어야 하며, 프로처럼 범위(scopes)를 다룰 수 있어야 합니다!\n","id":"https://hwjskt.github.io/rust/chapter7/","title":"Managing Growing Projects with Packages, Crates, and Modules"},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"body":"요약\n\n크레이트(crates)\n\nRust 컴파일러가 한 번에 고려하는 가장 작은 양의 코드\n크레이트는 모듈을 포함할 수 있음\n바이너리 크레이트\n\nmain 함수 있음, 실행 파일로 컴파일된다\n프로젝트 디렉토리/src/main.rs 파일이 있다\n\n\n라이브러리 크레이트\n\nmain 함수가 없음, 실행 파일로 컴파일안됨\n여러 프로젝트와 공유할 기능을 정의\n일반적으로 말하는 크레이트, 라이브러리와 같은 의미\n프로젝트 디렉토리/src/lib.rs 파일이 있다\n\n\n\n\n패키지(packages)\n\n일련의 기능을 제공하는 하나 이상의 크레이트(crates) 묶음\n\n\n\n패키지 및 크레이트\n우리가 다룰 모듈 시스템의 첫 번째 부분은 패키지(packages)와 크레이트(crates)입니다.\n크레이트는 Rust 컴파일러가 한 번에 고려하는 가장 작은 양의 코드입니다. cargo 대신 rustc를 실행하고 단일 소스 코드 파일을 전달하더라도(1장의 Writing and Running a Rust Program 섹션에서 한 것처럼), 컴파일러는 해당 파일을 크레이트로  간주합니다. 크레이트는 모듈을 포함할 수 있으며, 모듈은 크레이트와 함께 컴파일되는 다른 파일에서 정의될 수 있습니다. 다음 섹션에서 살펴보겠습니다.\n크레이트는 바이너리 크레이트 또는 라이브러리 크레이트의 두 가지 형태 중 하나로 올 수 있습니다. 바이너리 크레이트는 명령줄 프로그램(command-line program)이나 서버(server)와 같이 실행할 수 있는 실행 파일로 컴파일할 수 있는 프로그램입니다. 각각에는 실행 파일이 실행될 때 발생하는 일을 정의하는 main이라는 함수가 있어야 합니다. 지금까지 우리가 만든 모든 크레이트는 바이너리 크레이트였습니다.\n라이브러리 크레이트에는 main 함수가 없으며 실행 파일로 컴파일되지 않습니다. 대신 여러 프로젝트와 공유할 기능을 정의합니다. 예를 들어 2장 에서 사용한 rand 크레이트는 난수를 생성하는 기능을 제공합니다. Rustaceans가 크레이트(crate)라고 말하는 대부분의 경우 라이브러리 크레이트를 의미하며 라이브러리의 일반적인 프로그래밍 개념과 상호 교환적으로 크레이트를 사용합니다.\n크레이트 루트(crate root)는 Rust 컴파일러가 시작하고 크레이트의 루트 모듈을 구성하는 소스 파일입니다. \"범위 및 개인정보 보호를 제어하기 위한 모듈 정의\"  섹션에서 모듈에 대해 자세히 설명합니다.\n패키지는 일련의 기능을 제공하는 하나 이상의 크레이트(crates) 묶음입니다. 패키지에는 이러한 상자를 만드는 방법을 설명하는 Cargo.toml 파일이 포함되어 있습니다. Cargo는 실제로 코드를 빌드하는 데 사용했던 명령줄 도구용 바이너리 크레이트를 포함하는 패키지입니다. Cargo 패키지에는 바이너리 크레이트가 의존하는 라이브러리 크레이트도 포함되어 있습니다. 다른 프로젝트는 Cargo 명령줄 도구가 사용하는 것과 동일한 논리를 사용하기 위해 Cargo 라이브러리 크레이트에 의존할 수 있습니다.\n패키지는 원하는 만큼 많은 바이너리 크레이트를 포함할 수 있지만, 라이브러리 크레이트는 하나만 포함할 수 있습니다. 패키지는 라이브러리든 바이너리 크레이트든 적어도 하나의 크레이트를 포함해야 합니다.\n패키지를 만들 때 어떤 일이 발생하는지 살펴보겠습니다. 먼저 cargo new 명령을 입력합니다.\n$ cargo new my-project\n     Created binary (application) `my-project` package\n$ ls my-project\nCargo.toml\nsrc\n$ ls my-project/src\nmain.rs\n\ncargo new를 실행한 후 ls를 사용하여 Cargo가 생성하는 것을 확인합니다. 프로젝트 디렉토리에는 패키지를 제공하는 Cargo.toml 파일이 있습니다. main.rs를 포함하는 src 디렉토리도 있습니다. 텍스트 편집기에서 Cargo.toml을 열고 src/main.rs 에 대한 언급이 없음에 유의하십시오. Cargo는 src/main.rs가 패키지와 같은 이름을 가진 바이너리 크레이트의 크레이트 루트라는 규칙을 따릅니다. 마찬가지로 Cargo는 패키지 디렉토리에 src/lib.rs가 포함되어 있으면 패키지에 패키지와 동일한 이름의 라이브러리 크레이트가 포함되어 있고 src/lib.rs가 포함되어 있음을 알고 있습니다.상자 루트입니다. Cargo는 크레이트 루트 파일을 rustc에 전달하여 라이브러리 또는 바이너리를 빌드합니다.\n여기에는 src/main.rs 만 포함하는 패키지가 있습니다. 즉, my-project라는 이름의 바이너리 크레이트만 포함되어 있습니다. 패키지에 src/main.rs 및 src/lib.rs 가 모두 포함되어 있으면, 패키지와 동일한 이름을 가진 바이너리 크레이트와 라이브러리 크레이트가 있는 것입니다. 패키지는 src/bin 디렉토리에 파일을 배치하여 여러 바이너리 크레이트를 가질 수 있습니다. 각 파일은 별도의 바이너리 크레이트가 됩니다.\n","id":"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/","title":"Packages and Crates"},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"body":"요약\n\n\n모듈\n\n크레이트 루트 파일에서 선언 (mod)\n모듈 파일에서 하위 모듈을 선언할 수 있다.\n모듈 선언 : priviate 는  mod , public 은 pub mod 이용\n모듈 내부에 structs, enums, constants, traits, functions 정의가능\n\n\n\n경로(paths)\n\n:: 를 이용해서 접근한다.\nuse 키워드로 short cut 을 만들수도 있다.\n\n\n\n크레이트 루트\n\nsrc/main.rs 와 src/lib.rs 파일을 지칭\n*크레이트의 모듈 구조(=모듈트리)의 루트에서 크레이트라는 모듈을 형성\n\n\n\n범위(scope) 및 프라이버시(Privacy)를 제어하기 위한 모듈 정의\n이 섹션에서는 모듈과 모듈 시스템의 다른 부분, 즉 항목 이름을 지정할 수 있는 경로(paths) 에 대해 설명합니다. 경로를 범위로 가져오는 use 키워드; 항목을 공개하기 위한 pub 키워드. 또한 as 키워드, 외부 패키지 및 glob 연산자에 대해서도 설명합니다.\n먼저 나중에 코드를 구성할 때 쉽게 참조할 수 있도록 규칙 목록부터 시작하겠습니다. 그러면 각 규칙에 대해 자세히 설명하겠습니다.\n모듈 치트 시트\n여기에서는 모듈, 경로, use 키워드 및 pub 키워드가 컴파일러에서 작동하는 방법과 대부분의 개발자가 코드를 구성하는 방법에 대한 빠른 참조를 제공합니다. 우리는 이 장 전체에서 이러한 각 규칙의 예를 살펴보겠지만, 모듈이 작동하는 방식을 먼저 간략히 살펴보겠습니다.\n\n\n크레이트 루트에서 시작합니다 : 크레이트를 컴파일할 때 컴파일러는 먼저 크레이트 루트 파일(일반적으로 라이브러리 크레이트의 경우 src/lib.rs 또는 바이너리 크레이트의 경우 src/main.rs )에서 컴파일할 코드를 찾습니다.\n\n\n모듈 선언하는 방법\n: 크레이트 루트 파일에서 새 모듈을 선언할 수 있습니다. 예를 들어 garden 모듈을 다음과 같이 선언합니다.\nmod garden;\n\n컴파일러는 다음 위치에서 모듈의 코드를 찾습니다.\n\n인라인에서, mod garden 다음의, 세미콜론을 대체하는 중괄호 내\nsrc/garden.rs 파일에서\nsrc/garden/mod.rs 파일에서\n\n\n\n하위 모듈 선언하는 방법\n: 크레이트 루트 이외의 모든 파일에서 하위 모듈을 선언할 수 있습니다. 예를 들어 src/garden.rs에서 mod vegetables 를 선언할 수 있습니다.\nmod vegetables;\n\n컴파일러는 다음 위치에서 상위 모듈의 이름이 지정된 디렉토리 내에서 하위 모듈의 코드를 찾습니다.\n\n인라인,  mod vegetables 바로 뒤에, 세미콜론 대신 중괄호 안에 \n\n\n\nsrc/garden/vegetables.rs 파일에서\n\nsrc/garden/vegetables/mod.rs 파일에서\n\n\n\n모듈 코드로 접근하는 경로 \n: 모듈이 크레이트의 일부가 되면, privacy rules이 허용하는 한, 동일한 크레이트 내에서 해당 모듈의 코드를 참조할 수 있습니다.  이 때 코드로 접근하는 경로를 사용합니다. 예를 들어 garden vegetables 모듈의 Asparagus 타입은 crate::garden::vegetables::Asparagus에서 찾을 수 있습니다.\n\n\n비공개(private) 대 공개(public) \n: 모듈 내의 코드는 기본적으로 상위 모듈에서 비공개입니다. 모듈을 공개하려면 mod 대신 pub mod로 모듈을 선언하십시오. 공용 모듈 내의 항목도 공용으로 만들려면 선언 전에 pub를 사용하십시오.\n\n\nuse 키워드 : 같은 범위 내에서 use 키워드는 긴 경로의 반복을 줄여주는 바로 가기를 만듭니다. crate::garden::vegetables::Asparagus를 참조할 수 있는 모든 범위에서 use crate::garden::vegetables::Asparagus;로 바로 가기를 만듭니다. 그런 다음 범위에서 해당 타입을 사용하려면 Asparagus만 작성하면 됩니다.\n\n\n여기에서 이러한 규칙을 설명하는 backyard라는 이름의 바이너리 크레이트를 만듭니다. backyard라고도 하는 크레이트의 디렉토리에는 다음 파일과 디렉토리가 포함되어 있습니다.\nbackyard\n├── Cargo.lock\n├── Cargo.toml\n└── src\n    ├── garden\n    │   └── vegetables.rs\n    ├── garden.rs\n    └── main.rs\n\n이 경우 크레이트 루트 파일은 src/main.rs 이며 다음을 포함합니다:\n파일 이름: src/main.rs\nuse crate::garden::vegetables::Asparagus;\n\npub mod garden;\n\nfn main() {\n    let plant = Asparagus {};\n    println!(`I'm growing {:?}!`, plant);\n}\n\npub mod garden; 줄은 src/garden.rs 에서 찾은 코드를 포함하도록 컴파일러에 지시합니다.\n파일명: src/garden.rs\npub mod vegetables;\n\n여기 pub mod vegetables; src/garden/vegetables.rs 의 코드 도 포함되어 있음을 의미합니다. 해당 코드는 다음과 같습니다.\n#[derive(Debug)]\npub struct Asparagus {}\n\n이제 이러한 규칙에 대해 자세히 알아보고 실제로 시연해 보겠습니다.\n모듈로 관련 코드를 그룹화\n모듈을 사용하면 크레이트 내에 있는 코드의 가독성을 좋게하고, 손쉽게 재사용하도록 구성할 수 있습니다. 모듈은 또한 모듈 내의 코드가 기본적으로 비공개이기 때문에 항목의 *프라이버시(privacy)*를 제어할 수 있습니다. 개인 항목(private item)은 외부에서 사용할 수 없는 내부 구현 세부 정보입니다. 우리는 모듈과 그 안에 있는 항목을 공개하도록 선택할 수 있습니다. 이렇게 하면 외부 코드가 모듈을 사용하고 의존할 수 있도록 노출됩니다.\n예를 들어 레스토랑의 기능을 제공하는 라이브러리 크레이트를 작성해 보겠습니다. 우리는 함수의 시그니쳐를 정의하지만, 식당 구현보다는 코드 구성에 집중하기 위해 본문을 비워 둡니다.\n레스토랑 업계에서 레스토랑의 일부는 프론트 오브 하우스(front of house) , 다른 일부는 백 오브 하우스(back of house) 라고 합니다. 프론트 오브 하우스는 고객이 있는 곳입니다. 여기에는 호스트가 고객을 앉히고 서버가 주문 및 지불을 받고 바텐더가 음료를 만드는 곳이 포함됩니다. 백오브하우스는 셰프와 요리사가 주방에서 일하고, 식기 세척기가 청소하고, 관리자가 관리 업무를 수행하는 곳입니다.\n이러한 방식으로 크레이트를 구성하기 위해 함수를 중첩된 모듈로 구성할 수 있습니다. cargo new restaurant --lib를 실행하여 restaurant라는 새 라이브러리를 만듭니다. 그런 다음 목록 7-1의 코드를 src/lib.rs 에 입력하여 일부 모듈 및 함수 서명을 정의합니다. 집 앞 부분은 다음과 같습니다.\n파일 이름: src/lib.rs\nmod front_of_house {\n    mod hosting {\n        fn add_to_waitlist() {}\n\n        fn seat_at_table() {}\n    }\n\n    mod serving {\n        fn take_order() {}\n\n        fn serve_order() {}\n\n        fn take_payment() {}\n    }\n}\n\n목록 7-1: 함수를 포함하는 다른 모듈을 포함하는 front_of_house 모듈\nmod 키워드 뒤에 모듈 이름(이 경우 front_of_house)을 사용하여 모듈을 정의합니다. 그러면 모듈 본문이 중괄호 안에 들어갑니다. hosting 및 serving 모듈처럼 모듈 내부에  다른 모듈을 배치할 수 있습니다. 모듈은 또한 구조체(structs), 열거형(enums), 상수(constants), 특성(traits) 및 목록 7-1에서와 같이 함수(function)와 같은 다른 항목에 대한 정의를 보유할 수 있습니다.\n모듈을 사용하여, 관련 정의를 함께 그룹화하고 관련된 이유를 명명할 수 있습니다. 이 코드를 사용하는 프로그래머는 모든 정의를 읽을 필요 없이 그룹을 기반으로 코드를 탐색할 수 있으므로 관련된 정의를 더 쉽게 찾을 수 있습니다. 이 코드에 새로운 기능을 추가하는 프로그래머는 프로그램을 체계적으로 유지하기 위해 코드를 어디에 배치해야 하는지 알 것입니다.\n앞에서 우리는 src/main.rs 와 src/lib.rs를 크레이트 루트라고 부른다고 언급했습니다. 크레이트 루트라는 이름이 붙은 이유는, 이 두 파일 중 하나의 내용이, 모듈 트리로 알려진 크레이트 모듈 구조의 루트에서 크레이트라는 모듈을 형성하기 때문입니다.\n목록 7-2는 목록 7-1의 구조에 대한 모듈 트리를 보여줍니다.\ncrate\n └── front_of_house\n     ├── hosting\n     │   ├── add_to_waitlist\n     │   └── seat_at_table\n     └── serving\n         ├── take_order\n         ├── serve_order\n         └── take_payment\n\n목록 7-2: 목록 7-1의 코드에 대한 모듈 트리\n이 트리는 일부 모듈이 서로 중첩되는 방식을 보여줍니다. 예를 들어 hosting은 front_of_house 내부에 중첩됩니다. 트리는 또한 일부 모듈이 서로 형제 임을 보여줍니다. 즉, 동일한 모듈에서 정의된다는 의미입니다. hosting 및 serving은 front_of_house 내에 정의된 형제입니다. 모듈 A가 모듈 B 안에 포함되어 있으면 모듈 A는 모듈 B의 자식 이고 모듈 B는 모듈 A의 부모 라고 말합니다. 전체 모듈 트리는 crate라는 암시적 모듈 아래에 뿌리를 두고 있습니다.\n모듈 트리는 컴퓨터에 있는 파일 시스템의 디렉토리 트리를 상기시킬 수 있습니다. 이것은 매우 적절한 비교입니다! 파일 시스템의 디렉토리와 마찬가지로 모듈을 사용하여 코드를 구성합니다. 그리고 디렉토리의 파일과 마찬가지로 모듈을 찾을 방법이 필요합니다.\n","id":"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/","title":"Defining Modules to Control Scope and Privacy"},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"body":"요약\n\n\n경로(Paths) : 모듈 트리에서 아이템의 위치\n\n\n절대경로 : 외부크레이트 이름 , 또는 crate (같은 크레이트에 있는 경우) 라는 글자로 시작\n\n\n상대경로 : 동일한 수준의 모듈 트리에 정의된 모듈 이름으로 시작\n\nsuper : 상위 모듈에서 시작하는 상대경로 지정\n\n\n\n부모 모듈의 아이템은 자식 모듈에 있는 아이템을 사용할 수 없다. 자식모듈에 pub 을 붙여야 접근가능\n\n\n자식모듈에 있는 아이템은 부모모듈의 아이템을 사용가능\n\n\n구조체(Structs) 정의 앞에 pub 를 붙이면\n\n구조체 자체는 공개, 내부의 필드는 비공개\n\n\n\n열거형(Enums) 정의 앞에 pub 를 붙이면\n\n열거형 자체와 내부 변형(variant) 모두 공개된다\n\n\n\n모듈 트리에서 항목을 참조하기 위한 경로(Paths)\nRust가 모듈 트리에서 항목을 찾을 위치를 보여주기 위해 파일 시스템을 탐색할 때 경로를 사용하는 것과 같은 방식으로 경로를 사용합니다. 함수를 호출하려면 경로를 알아야 합니다.\n경로는 두 가지 형식을 취할 수 있습니다.\n\n절대 경로는 크레이트 루트에서 시작하는 전체 경로입니다. 외부 크레이트의 코드의 경우 절대 경로는 크레이트 이름으로 시작하고 현재 크레이트의 코드의 경우  크레이트라는 글자(리터럴)로 시작합니다.\n상대 경로는 현재 모듈에서 시작하여 self, super 또는 현재 모듈의 식별자를 사용합니다.\n\n절대 경로와 상대 경로 모두 이중 콜론(::)으로 구분된 하나 이상의 식별자 뒤에 옵니다.\n목록 7-1로 돌아가서 add_to_waitlist 함수를 호출하고 싶다고 합시다. 이것은 add_to_waitlist 함수의 경로가 무엇인지 묻는 것과 같습니다. 목록 7-3에는 일부 모듈과 함수가 제거된 목록 7-1이 포함되어 있습니다.\n크레이트 루트에 정의된 새 함수 eat_at_restaurant에서 add_to_waitlist 함수를 호출하는 두 가지 방법을 보여줍니다. 이러한 경로는 정확하지만 이 예제를 있는 그대로 컴파일하지 못하게 하는 또 다른 문제가 남아 있습니다. 잠시 후에 그 이유를 설명하겠습니다.\neat_at_restaurant 함수는 라이브러리 크레이트의 공개 API의 일부이므로 pub 키워드로 표시합니다. pub 키워드를 사용하여 경로 노출 섹션 에서 pub에 대해 자세히 설명합니다.\n파일 이름: src/lib.rs\nmod front_of_house {\n    mod hosting {\n        fn add_to_waitlist() {}\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Absolute path\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    // Relative path\n    front_of_house::hosting::add_to_waitlist();\n}\n\n목록 7-3: 절대 경로와 상대 경로를 사용하여 add_to_waitlist 함수 호출\neat_at_restaurant에서 add_to_waitlist 함수를 처음 호출할 때 절대 경로를 사용합니다. add_to_waitlist 함수는 eat_at_restaurant와 같은 크레이트에 정의되어 있습니다. 즉, crate 키워드를 사용하여 절대 경로를 시작할 수 있습니다. 그런 다음 add_to_waitlist로 이동할 때까지 각 연속 모듈을 포함합니다. 동일한 구조를 가진 파일 시스템을 상상할 수 있습니다. add_to_waitlist 프로그램을 실행하기 위해 /front_of_house/hosting/add_to_waitlist 경로를 지정합니다. 크레이트 루트에서 시작하기 위해 크레이트 이름을 사용하는 것은 쉘의 파일 시스템 루트에서 시작하기 위해 /를 사용하는 것과 같습니다.\n두 번째로 eat_at_restaurant에서 add_to_waitlist를 호출할 때는 상대 경로를 사용합니다. 경로는 eat_at_restaurant와 동일한 수준의 모듈 트리에 정의된 모듈 이름인 front_of_house로 시작합니다. 여기서 동등한 파일 시스템은 front_of_house/hosting/add_to_waitlist 경로를 사용합니다. 모듈 이름으로 시작하는 것은 경로가 상대적임을 의미합니다.\n상대 경로를 사용할지 절대 경로를 사용할지 선택하는 것은 프로젝트를 기반으로 결정하며 항목 정의 코드를 항목을 사용하는 코드와 별도로 또는 함께 이동할 가능성이 더 높은지에 따라 달라집니다. 예를 들어 front_of_house 모듈과 eat_at_restaurant 함수를 customer_experience라는 모듈로 이동하면 절대 경로를 add_to_waitlist로 업데이트해야 하지만 상대 경로는 여전히 유효합니다. 그러나 eat_at_restaurant 함수를 별도로 dining이라는 모듈로 이동하면 add_to_waitlist 호출에 대한 절대 경로는 동일하게 유지되지만 상대 경로는 업데이트해야 합니다.\n목록 7-3을 컴파일하고 왜 아직 컴파일되지 않는지 알아봅시다! 우리가 얻은 오류는 Listing 7-4에 나와 있습니다.\n$ cargo build\n   Compiling restaurant v0.1.0 (file:///projects/restaurant)\nerror[E0603]: module `hosting` is private\n --&gt; src/lib.rs:9:28\n  |\n9 |     crate::front_of_house::hosting::add_to_waitlist();\n  |                            ^^^^^^^ private module\n  |\nnote: the module `hosting` is defined here\n --&gt; src/lib.rs:2:5\n  |\n2 |     mod hosting {\n  |     ^^^^^^^^^^^\n\nerror[E0603]: module `hosting` is private\n  --&gt; src/lib.rs:12:21\n   |\n12 |     front_of_house::hosting::add_to_waitlist();\n   |                     ^^^^^^^ private module\n   |\nnote: the module `hosting` is defined here\n  --&gt; src/lib.rs:2:5\n   |\n2  |     mod hosting {\n   |     ^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0603`.\nerror: could not compile `restaurant` due to 2 previous errors\n\nListing 7-4: Listing 7-3의 코드를 빌드할 때 발생하는 컴파일러 오류\n오류 메시지는 모듈 hosting이 비공개라고 말합니다. 다시 말해, 우리는 hosting 모듈과 add_to_waitlist 함수에 대한 올바른 경로를 가지고 있지만 Rust는 개인 섹션에 대한 액세스 권한이 없기 때문에 우리가 사용하도록 허용하지 않습니다. Rust에서 모든 항목(함수, 메서드, 구조체, 열거형, 모듈 및 상수)은 기본적으로 부모 모듈에 대해 비공개입니다. 함수나 구조체와 같은 항목을 비공개로 만들고 싶다면 모듈에 넣습니다.\n상위 모듈의 항목은 하위 모듈 내의 개인 항목을 사용할 수 없지만 하위 모듈의 항목은 상위 모듈의 항목을 사용할 수 있습니다. 하위 모듈은 구현 세부 정보를 래핑하고 숨기지만 하위 모듈은 정의된 컨텍스트를 볼 수 있기 때문입니다. 우리의 은유를 계속하기 위해 프라이버시 규칙을 레스토랑의 백오피스와 같다고 생각하십시오. 그곳에서 일어나는 일은 레스토랑 고객에게만 공개되지만 사무실 관리자는 자신이 운영하는 레스토랑에서 모든 것을 보고 할 수 있습니다.\nRust는 내부 구현 세부 사항을 숨기는 것이 기본값이 되도록 모듈 시스템 기능을 이런 방식으로 선택했습니다. 이렇게 하면 외부 코드를 손상시키지 않고 변경할 수 있는 내부 코드 부분을 알 수 있습니다. 그러나 Rust는 항목을 공개하기 위해 pub 키워드를 사용하여 자식 모듈 코드의 내부 부분을 외부 조상 모듈에 노출하는 옵션을 제공합니다.\npub 키워드로 경로 노출\nListing 7-4에서 hosting 모듈이 비공개라는 오류로 돌아가 봅시다. 부모 모듈의 eat_at_restaurant 함수가 자식 모듈의 add_to_waitlist 함수에 액세스하기를 원하므로 목록 7-5에 표시된 것처럼 pub 키워드로 hosting 모듈을 표시합니다.\n파일 이름: src/lib.rs\nmod front_of_house {\n    pub mod hosting {\n        fn add_to_waitlist() {}\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Absolute path\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    // Relative path\n    front_of_house::hosting::add_to_waitlist();\n}\n\nListing 7-5: eat_at_restaurant에서 사용하기 위해 hosting 모듈을 pub으로 선언\n안타깝게도 Listing 7-5의 코드는 Listing 7-6과 같이 여전히 오류를 발생시킵니다.\n$ cargo build\n   Compiling restaurant v0.1.0 (file:///projects/restaurant)\nerror[E0603]: function `add_to_waitlist` is private\n --&gt; src/lib.rs:9:37\n  |\n9 |     crate::front_of_house::hosting::add_to_waitlist();\n  |                                     ^^^^^^^^^^^^^^^ private function\n  |\nnote: the function `add_to_waitlist` is defined here\n --&gt; src/lib.rs:3:9\n  |\n3 |         fn add_to_waitlist() {}\n  |         ^^^^^^^^^^^^^^^^^^^^\n\nerror[E0603]: function `add_to_waitlist` is private\n  --&gt; src/lib.rs:12:30\n   |\n12 |     front_of_house::hosting::add_to_waitlist();\n   |                              ^^^^^^^^^^^^^^^ private function\n   |\nnote: the function `add_to_waitlist` is defined here\n  --&gt; src/lib.rs:3:9\n   |\n3  |         fn add_to_waitlist() {}\n   |         ^^^^^^^^^^^^^^^^^^^^\n\nFor more information about this error, try `rustc --explain E0603`.\nerror: could not compile `restaurant` due to 2 previous errors\n\nListing 7-6: Listing 7-5의 코드를 빌드할 때 발생하는 컴파일러 오류\n무슨 일이에요? mod hosting 앞에 pub 키워드를 추가하면 모듈이 공개됩니다. 이 변경으로 front_of_house에 액세스할 수 있으면 hosting에 액세스할 수 있습니다. 그러나 호스팅의 내용은 여전히 비공개입니다. 모듈을 공개한다고 해서 내용이 공개되는 것은 아닙니다. 모듈의 pub 키워드는 상위 모듈의 코드가 내부 코드에 액세스하지 않고 참조만 허용합니다. 모듈은 컨테이너이기 때문에 모듈을 공개하는 것만으로는 할 수 있는 일이 많지 않습니다. 더 나아가 모듈 내의 항목 중 하나 이상을 공개하도록 선택해야 합니다.\n목록 7-6의 오류는 add_to_waitlist 함수가 비공개라고 말합니다. 개인 정보 보호 규칙은 구조체, 열거형, 함수 및 메서드와 모듈에 적용됩니다.\n목록 7-7에서와 같이 정의 앞에 pub 키워드를 추가하여 add_to_waitlist 함수를 공용으로 만들어 보겠습니다.\n파일 이름: src/lib.rs\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Absolute path\n    crate::front_of_house::hosting::add_to_waitlist();\n\n    // Relative path\n    front_of_house::hosting::add_to_waitlist();\n}\n\n목록 7-7: mod hosting 및 fn add_to_waitlist에 pub 키워드를 추가하면 eat_at_restaurant에서 함수를 호출할 수 있습니다.\n이제 코드가 컴파일됩니다! pub 키워드를 추가하면 프라이버시 룰(privacy rules)과 관련하여 add_to_waitlist에서 이러한 경로를 사용할 수 있는 이유를 알아보기 위해 절대 경로와 상대 경로를 살펴보겠습니다.\n절대 경로에서 크레이트 모듈 트리의 루트인 크레이트로 시작합니다. front_of_house 모듈은 크레이트 루트에 정의되어 있습니다. front_of_house는 공개되지 않지만 eat_at_restaurant 함수는 front_of_house와 동일한 모듈에서 정의되기 때문에(즉, eat_at_restaurant와 front_of_house는 형제임) eat_at_restaurant에서 front_of_house를 참조할 수 있습니다. 다음은 pub으로 표시된 hosting 모듈입니다. hosting의 상위 모듈에 액세스할 수 있으므로 hosting에 액세스할 수 있습니다. 마지막으로, add_to_waitlist 함수는 pub로 표시되고 부모 모듈에 액세스할 수 있으므로 이 함수 호출이 작동합니다!\n상대 경로에서 논리는 첫 번째 단계를 제외하고는 절대 경로와 동일합니다. 경로는 크레이트 루트에서 시작하지 않고 front_of_house에서 시작합니다. front_of_house 모듈은 eat_at_restaurant와 동일한 모듈 내에서 정의되므로 eat_at_restaurant가 정의된 모듈에서 시작하는 상대 경로가 작동합니다. 그런 다음 hosting 및 add_to_waitlist가 pub로 표시되기 때문에 나머지 경로가 작동하고 이 함수 호출이 유효합니다!\n다른 프로젝트에서 코드를 사용할 수 있도록 라이브러리 크레이트를 공유할 계획이라면, 공개 API는 크레이트 사용자가 코드와 상호 작용할 수 있는 방법을 결정하는 계약입니다. 사람들이 당신의 크레이트에 더 쉽게 의존할 수 있도록 공개 API에 대한 변경 사항을 관리하는 것과 관련하여 많은 고려 사항이 있습니다. 이러한 고려 사항은 이 책의 범위를 벗어납니다. 이 주제에 관심이 있다면 Rust API 가이드라인 을 참조하세요 .\n\n바이너리 및 라이브러리가 포함된 패키지에 대한 모범 사례\n우리는 패키지가 src/main.rs 바이너리 크레이트 루트와 src/lib.rs 라이브러리 크레이트 루트를 모두 포함할 수 있으며 두 크레이트 모두 기본적으로 패키지 이름을 가질 것이라고 언급했습니다. 일반적으로 라이브러리와 바이너리 크레이트를 모두 포함하는 이 패턴을 가진 패키지는 바이너리 크레이트에 라이브러리 크레이트로 코드를 호출하는 실행 파일을 시작하기에 충분한 코드만 있습니다. 이렇게 하면 라이브러리 크레이트의 코드를 공유할 수 있으므로 다른 프로젝트에서 패키지가 제공하는 대부분의 기능을 활용할 수 있습니다.\n모듈 트리는 src/lib.rs 에 정의되어야 합니다. 그런 다음 패키지 이름으로 경로를 시작하여 바이너리 크레이트에서 공용 항목을 사용할 수 있습니다. 바이너리 크레이트는 완전히 외부에 있는 크레이트가 라이브러리 크레이트를 사용하는 것처럼 라이브러리 크레이트의 사용자가 됩니다. 공용 API만 사용할 수 있습니다. 이는 좋은 API를 설계하는 데 도움이 됩니다. 당신은 저자일 뿐만 아니라 고객이기도 합니다!\n12장 에서는 바이너리 크레이트와 라이브러리 크레이트를 모두 포함하는 명령줄 프로그램을 사용하여 이 조직적 관행을 시연할 것입니다.\n\nsuper로 상대 경로 시작\n경로 시작 부분에 super를 사용하여, 현재 모듈이나 크레이트 루트가 아닌, 상위 모듈에서 시작하는 상대 경로를 구성할 수 있습니다. 이것은 파일 시스템 경로에서  .. 으로 시작하는 것과 같습니다. super를 사용하면 부모 모듈에 있는 것으로 알고 있는 항목을 참조할 수 있으므로 모듈이 부모와 밀접하게 관련되어 있을 때 모듈 트리를 쉽게 재정렬할 수 있지만, 부모는 언젠가 모듈 트리의 다른 곳으로 이동할 수 있습니다.\n셰프가 잘못된 주문을 수정하고 직접 고객에게 가져오는 상황을 모델링하는 목록 7-8의 코드를 고려하십시오. back_of_house 모듈에 정의된 fix_incorrect_order 함수는 super로 시작하는 deliver_order에 대한 경로를 지정하여 상위 모듈에 정의된 deliver_order 함수를 호출합니다.\n파일 이름: src/lib.rs\nfn deliver_order() {}\n\nmod back_of_house {\n    fn fix_incorrect_order() {\n        cook_order();\n        super::deliver_order();\n    }\n\n    fn cook_order() {}\n}\n\n목록 7-8: super로 시작하는 상대 경로를 사용하여 함수 호출\nfix_incorrect_order 함수는 back_of_house 모듈에 있으므로 super를 사용하여 back_of_house의 상위 모듈로 이동할 수 있습니다. 이 경우 루트인 crate입니다. 거기에서 deliver_order를 찾아 찾습니다. 성공! 우리는 back_of_house 모듈과 deliver_order 기능이 서로 같은 관계를 유지하고 상자의 모듈 트리를 재구성하기로 결정하면 함께 이동할 가능성이 있다고 생각합니다. 따라서 우리는 super를 사용하여 이 코드가 다른 모듈로 이동될 경우 향후에 코드를 업데이트할 위치가 줄어들게 됩니다.\n구조체와 열거형을 공개하기\n또한 pub을 사용하여 구조체 및 열거형을 공용으로 지정할 수 있지만, 구조체 및 열거형과 함께 pub를 사용하는 데 추가로 몇 가지 세부 정보가 있습니다. 구조체 정의 전에 pub를 사용하면 구조체를 공개하지만, 구조체의 필드는 여전히 비공개입니다. 사례별로 각 필드를 공개하거나 공개하지 않을 수 있습니다. 목록 7-9에서 공개 toast 필드와 비공개 seasonal_fruit 필드가 있는 공개 back_of_house::Breakfast 구조체를 정의했습니다. 이것은 고객이 식사와 함께 제공되는 빵의 종류를 선택할 수 있는 레스토랑의 경우를 모델로 하지만, 요리사는 계절과 재고에 따라 식사와 함께 제공되는 과일을 결정합니다. 사용 가능한 과일은 빠르게 변경되므로 고객은 과일을 선택할 수 없으며 어떤 과일을 얻을지 알 수도 없습니다.\n파일 이름: src/lib.rs\nmod back_of_house {\n    pub struct Breakfast {\n        pub toast: String,\n        seasonal_fruit: String,\n    }\n\n    impl Breakfast {\n        pub fn summer(toast: &amp;str) -&gt; Breakfast {\n            Breakfast {\n                toast: String::from(toast),\n                seasonal_fruit: String::from(`peaches`),\n            }\n        }\n    }\n}\n\npub fn eat_at_restaurant() {\n    // Order a breakfast in the summer with Rye toast\n    let mut meal = back_of_house::Breakfast::summer(`Rye`);\n    // Change our mind about what bread we'd like\n    meal.toast = String::from(`Wheat`);\n    println!(`I'd like {} toast please`, meal.toast);\n\n    // The next line won't compile if we uncomment it; we're not allowed\n    // to see or modify the seasonal fruit that comes with the meal\n    // meal.seasonal_fruit = String::from(`blueberries`);\n}\n\nListing 7-9: 일부 공개 필드와 일부 비공개 필드가 있는 구조체\nback_of_house::Breakfast 구조체의 toast 필드가 공개되어 있기 때문에 eat_at_restaurant에서 점 표기법을 사용하여 toast 필드에 쓰고 읽을 수 있습니다. seasonal_fruit가 비공개이기 때문에 eat_at_restaurant에서 seasonal_fruit 필드를 사용할 수 없습니다. seasonal_fruit 필드 값을 수정하는 줄의 주석을 제거하여 어떤 오류가 발생하는지 확인하십시오!\n또한 back_of_house::Breakfast에는 전용 필드가 있기 때문에 구조체는 Breakfast(여기서는 summer라고 함)의 인스턴스를 구성하는 공용 관련 함수를 제공해야 합니다. Breakfast에 이러한 기능이 없으면 eat_at_restaurant에서 비공개 seasonal_fruit 필드의 값을 설정할 수 없기 때문에 eat_at_restaurant에서 Breakfast 인스턴스를 생성할 수 없습니다.\n반대로 열거형을 공개하면 내부의 모든 변형이 공개됩니다. Listing 7-10과 같이 enum 키워드 앞에 pub만 있으면 됩니다.\n파일 이름: src/lib.rs\nmod back_of_house {\n    pub enum Appetizer {\n        Soup,\n        Salad,\n    }\n}\n\npub fn eat_at_restaurant() {\n    let order1 = back_of_house::Appetizer::Soup;\n    let order2 = back_of_house::Appetizer::Salad;\n}\n\n목록 7-10: 열거형을 공개로 지정하면 모든 변형이 공개됩니다.\nAppetizer 열거형을 공개했기 때문에 eat_at_restaurant에서 Soup 및 Salad 변형을 사용할 수 있습니다.\n열거형은 해당 변형이 공개되지 않는 한 그다지 유용하지 않습니다. 모든 경우에 pub로 모든 열거형 변형에 주석을 달아야 하는 것은 성가신 일이므로 열거형 변형의 기본값은 공개입니다. 구조체는 필드가 공개되지 않아도 유용한 경우가 많으므로, 구조체 필드는 pub로 주석이 지정되지 않는 한 기본적으로 모든 것이 비공개라는 일반적인 규칙을 따릅니다.\n우리가 다루지 않은 pub와 관련된 또 다른 상황이 있습니다. 그것은 우리의 마지막 모듈 시스템 기능인 use 키워드입니다. 먼저 use 자체를 다룬 다음 pub와 use를 결합하는 방법을 보여줍니다.\n","id":"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/","title":"Paths for Referring to an Item in the Module Tree"},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"body":"요약\n\nuse 키워드 : \"경로에 대한 바로 가기\" 를 만든다\n함수의 보통 사용하는 방법\n\nuse를 사용하여 함수의 상위 모듈을 범위로 가져온다.\n-&gt; 상위 모듈::함수() 형태로 호출한다\n함수 전체경로를 범위로 가져온다음, 함수() 이름만 써서 사용하면 로컬함수인지, 다른 모듈에서 가져온 함수인지 구분어렵다\n\n\n구조체, 열거형 및 기타 항목의 보통 사용법\n\n전체 경로를 가져온다.\n예외 : 부모 모듈이 다른데 타입의 이름이 같다면, 부모모듈::타입 형태로 구분해줘야. (as키워드로 타입의 이름을 바꿀수도 있다)\n\n\n외부패키지 사용\n\nCargo.toml 에 패키지 이름 추가\nuse 크레이트이::항목  형식으로 사용\n\n\n표준 라이브러리 :  std \n\n외부 패키지인데, Cargo.toml 에 추가 안해도 된다.\n\n\n\nuse 키워드를 사용하여 경로를 범위로 가져오기\n함수를 호출하는 경로를 작성해야 하는 것은 불편하고 반복적으로 느껴질 수 있습니다. 목록 7-7에서 add_to_waitlist 함수에 대한 절대 경로를 선택했는지 상대 경로를 선택했는지에 관계없이 add_to_waitlist를 호출할 때마다 front_of_house 및 hosting도 지정해야 했습니다. 다행스럽게도 이 프로세스를 단순화하는 방법이 있습니다. use 키워드를 사용하여 \"경로에 대한 바로 가기\"를 한 번 만든 다음 범위의 다른 모든 곳에서 더 짧은 이름을 사용할 수 있습니다.\n목록 7-11에서 crate::front_of_house::hosting 모듈을 eat_at_restaurant 함수의 범위로 가져오므로 eat_at_restaurant에서 add_to_waitlist 함수를 호출하려면 hosting::add_to_waitlist만 지정하면 됩니다. `.\n파일 이름: src/lib.rs\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\nuse crate::front_of_house::hosting;\n\npub fn eat_at_restaurant() {\n    hosting::add_to_waitlist();\n}\n\n목록 7-11: use를 사용하여 모듈을 범위로 가져오기\n범위에 use와 경로를 추가하는 것은 파일 시스템에서 심볼릭 링크를 만드는 것과 유사합니다. 크레이트 루트에 use crate::front_of_house::hosting을 추가함으로써 hosting 모듈이 크레이트 루트에 정의된 것처럼 이제 해당 범위에서 hosting이 유효한 이름이 됩니다. use으로 범위에 포함된 경로는 다른 경로와 마찬가지로 프라이버시도 확인합니다.\nuse은 use이 발생하는 특정 범위에 대한 바로 가기만 생성한다는 점에 유의하십시오. 목록 7-12는 eat_at_restaurant 함수를 customer라는 이름의 새 하위 모듈로 이동합니다. 이 모듈은 use 문과 다른 범위이므로 함수 본문이 컴파일되지 않습니다.\n파일 이름: src/lib.rs\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\nuse crate::front_of_house::hosting;\n\nmod customer {\n    pub fn eat_at_restaurant() {\n        hosting::add_to_waitlist();\n    }\n}\n\n목록 7-12: use 문은 해당 범위 내에서만 적용됩니다.\n컴파일러 오류는 바로 가기가 customer 모듈 내에서 더 이상 적용되지 않음을 보여줍니다.\n$ cargo build\n   Compiling restaurant v0.1.0 (file:///projects/restaurant)\nwarning: unused import: `crate::front_of_house::hosting`\n --&gt; src/lib.rs:7:5\n  |\n7 | use crate::front_of_house::hosting;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\nerror[E0433]: failed to resolve: use of undeclared crate or module `hosting`\n  --&gt; src/lib.rs:11:9\n   |\n11 |         hosting::add_to_waitlist();\n   |         ^^^^^^^ use of undeclared crate or module `hosting`\n\nFor more information about this error, try `rustc --explain E0433`.\nwarning: `restaurant` (lib) generated 1 warning\nerror: could not compile `restaurant` due to previous error; 1 warning emitted\n\nuse이 해당 범위에서 더 이상 사용되지 않는다는 경고도 있습니다! 이 문제를 해결하려면 customer 모듈 내에서 use를 이동하거나 하위 customer 모듈 내에서 super::hosting을 사용하여 상위 모듈의 바로 가기를 참조하십시오.\n관용적인 use 경로 만들기\nListing 7-11에서 왜 우리가 use crate::front_of_house::hosting을 지정한 다음 eat_at_restaurant 함수에서 hosting::add_to_waitlist를 호출했는지 궁금할 수 있습니다. Listing 7-13과 같이  use 경로를 add_to_waitlist의 전체경로(crate::front_of_house::hosting::add_to_waitlist)로 지정하고, 함수 이름만 써서 사용 수도 있기때문입니다. \n파일 이름: src/lib.rs\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\nuse crate::front_of_house::hosting::add_to_waitlist;\n\npub fn eat_at_restaurant() {\n    add_to_waitlist();\n}\n\n목록 7-13: use를 사용하여 add_to_waitlist 함수를 범위로 가져오기\nListing 7-11과 7-13 모두 동일한 작업을 수행하지만 Listing 7-11은 use를 사용하여 함수를 범위로 가져오는 관용적인 방법입니다. use를 사용하여 함수의 상위 모듈을 범위로 가져오는 것은 함수를 호출할 때 상위 모듈을 지정해야 함을 의미합니다. 함수를 호출할 때 부모 모듈을 지정하면, 전체 경로의 반복을 최소화하면서 함수가 로컬로 정의되지 않았음을 분명히 할 수 있습니다. 목록 7-13의 코드는 add_to_waitlist가 정의된 위치가 명확하지 않습니다.\n반면에 구조체, 열거형 및 기타 항목을 use로 가져올 때는 전체 경로를 지정하는 것이 관용적입니다. 목록 7-14는 표준 라이브러리의 HashMap 구조체를 바이너리 크레이트의 범위로 가져오는 관용적인 방법을 보여줍니다.\n파일 이름: src/main.rs\nuse std::collections::HashMap;\n\nfn main() {\n    let mut map = HashMap::new();\n    map.insert(1, 2);\n}\n\nListing 7-14: 관용적인 방식으로 HashMap을 범위로 가져오기\n이 관용구 뒤에 강력한 이유가 있는 것은 아닙니다. 등장한 관례일 뿐이고 사람들은 이러한 방식으로 Rust 코드를 읽고 쓰는 데 익숙해졌습니다.\n이런 관용구 상용법이 안되는 경우는, use 문을 사용하여 이름이 같은 두 항목을 범위로 가져 올 때입니다. 이런 경우는 Rust가 허용하지 않습니다. 목록 7-15는 이름은 같지만 상위 모듈이 다른 두 개의 Result 타입을 범위로 가져오는 방법과 이를 참조하는 방법을 보여줍니다.\n파일 이름: src/lib.rs\nuse std::fmt;\nuse std::io;\n\nfn function1() -&gt; fmt::Result {\n    // --snip--\n}\n\nfn function2() -&gt; io::Result&lt;()&gt; {\n    // --snip--\n}\n\n목록 7-15: 이름이 같은 두 유형을 동일한 범위로 가져오려면 부모 모듈을 사용해야 합니다.\n보시다시피 상위 모듈을 사용하면 두 가지 Result 타입이 구별됩니다. 대신에 우리가 use std::fmt::Result와 use std::io::Result를 지정했다면, 우리는 같은 범위에 두 개의 Result 유형을 가지게 될 것이고 러스트는 언제 우리가 의미하는 것이 무엇인지 알지 못할 것입니다. \nas 키워드로 새 이름 제공\nuse를 사용하여 동일한 이름의 두 타입을 동일한 범위로 가져오는 문제에 대한 또 다른 솔루션이 있습니다. 경로 뒤에 유형에 대해 as 및 새 로컬 이름 또는 alias 를 지정할 수 있습니다. Listing 7-16은 as를 사용하여 두 개의 Result 유형 중 하나의 이름을 변경하여 Listing 7-15의 코드를 작성하는 또 다른 방법을 보여줍니다.\n파일 이름: src/lib.rs\nuse std::fmt::Result;\nuse std::io::Result as IoResult;\n\nfn function1() -&gt; Result {\n    // --snip--\n}\n\nfn function2() -&gt; IoResult&lt;()&gt; {\n    // --snip--\n}\n\nListing 7-16: as 키워드를 사용하여 범위로 가져올 때 유형 이름 바꾸기\n두 번째 use 문에서 우리는 std::io::Result 유형에 대해 IoResult라는 새 이름을 선택했습니다. 이는 std::fmt의 Result와 충돌하지 않습니다. 또한 범위에 포함되었습니다. Listing 7-15와 Listing 7-16은 관용적인 것으로 간주되므로 선택은 여러분에게 달려 있습니다!\npub use로 이름을 다시 내보내기\nuse 키워드를 사용하여 이름을 범위로 가져오면, 새 범위에서 사용할 수 있는 이름은 비공개입니다. 코드 범위에 정의된 것처럼 해당 이름을 참조하도록 코드를 호출하는 코드를 활성화하려면 pub와 use를 결합할 수 있습니다. 이 기술을 다시 내보내기라고 부르는 이유는 항목을 범위로 가져오는 동시에 다른 사람이 해당 항목을 범위로 가져올 수 있도록 만들기 때문입니다.\nListing 7-17은 루트 모듈의 use가 pub use로 변경된 Listing 7-11의 코드를 보여줍니다.\n파일 이름: src/lib.rs\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\npub use crate::front_of_house::hosting;\n\npub fn eat_at_restaurant() {\n    hosting::add_to_waitlist();\n}\n\n목록 7-17:  pub use을 통해, 새 범위의 모든 코드에서 사용가능한 이름 만들기\n이 변경 전에는 외부 코드에서 restaurant::front_of_house::hosting::add_to_waitlist() 경로를 사용하여 add_to_waitlist 함수를 호출해야 했습니다. 이제 이 pub use가 루트 모듈에서 hosting 모듈을 다시 내보냈으므로, 이제 외부 코드에서 restaurant::hosting::add_to_waitlist() 경로를 대신 사용할 수 있습니다.\n다시 내보내기는 코드의 내부 구조가, 코드를 호출하는 프로그래머가 도메인에 대해 생각하는 방식과 다를 때 유용합니다. 예를 들어, 이 식당 비유에서 식당을 운영하는 사람들은 front of house과 back of house를 생각합니다. 그러나 레스토랑을 방문하는 고객은 아마도 그러한 용어로 레스토랑의 부분에 대해 생각하지 않을 것입니다. pub use를 사용하면 하나의 구조로 코드를 작성할 수 있지만, 다른 구조를 노출할 수 있습니다. 이렇게 하면 라이브러리에서 작업하는 프로그래머와 라이브러리를 호출하는 프로그래머를 위해 라이브러리가 잘 정리됩니다. 14장의 pub use 로 편리한 공용 API 내보내기 섹션 에서 pub use의 또 다른 예와 이것이 크레이트 문서에 미치는 영향을 살펴보겠습니다.\n외부 패키지 사용\n2장에서 추측 게임 프로젝트를 프로그래밍하면서, 우리는 임의의 숫자를 얻기 위해 rand라는 외부 패키지를 사용했습니다. 프로젝트에서 rand를 사용하기 위해 Cargo.toml 에 다음 행을 추가했습니다.\n파일 이름: Cargo.toml\nrand = `0.8.5`\n\nCargo.toml 에 rand를 종속 항목으로 추가하면 Cargo가 crates.io 에서 rand 패키지와 모든 종속 항목을 다운로드 하고 프로젝트에서 rand를 사용할 수 있도록 합니다.\n그런 다음 rand 정의를 패키지 범위로 가져오기 위해, 크레이트 이름 rand로 시작하는 use 행을 추가하고, 범위로 가져오고자 하는 항목을 나열했습니다. 2장의 난수 생성 섹션 에서 Rng 특성을 범위로 가져오고 rand::thread_rng 함수를 호출했습니다.\nuse rand::Rng;\n\nfn main() {\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n}\n\nRust 커뮤니티의 구성원은 crates.io 에서 사용할 수 있는 많은 패키지를 만들었습니다. 우리 패키지에 외부 패키지를 가져오려면 Cargo.toml 파일에 외부 패키지를 나열하고, use를 사용하여 외부 패키지의 크레이트에서 항목을 범위로 가져옵니다.\n표준 std 라이브러리는 패키지 외부에 있는 크레이트이기도 합니다. 표준 라이브러리는 Rust 언어와 함께 제공되기 때문에 std를 포함하도록 Cargo.toml을 변경할 필요가 없습니다. 그러나 항목을 패키지 범위로 가져오려면 use으로 참조해야 합니다. 예를 들어 HashMap의 경우 다음 행을 사용합니다.\nuse std::collections::HashMap;\n\n이것은 표준 라이브러리 크레이트의 이름인 std로 시작하는 절대 경로입니다.\n중첩된 경로를 사용하여 큰 use 목록 정리\n동일한 크레이트 또는 동일한 모듈에 정의된 여러 항목을 사용하는 경우 각 항목을 한 줄에 나열하면 파일에서 세로 공간을 많이 차지할 수 있습니다. 예를 들어 목록 2-4의 추측 게임에 있는 두 개의 use 문은 std의 항목을 범위로 가져옵니다.\n파일 이름: src/main.rs\n// --snip--\nuse std::cmp::Ordering;\nuse std::io;\n// --snip--\n\n대신 중첩된 경로를 사용하여 동일한 항목을 한 줄의 범위로 가져올 수 있습니다. Listing 7-18과 같이 경로의 공통 부분을 지정하고 두 개의 콜론을 지정한 다음 서로 다른 경로 부분의 목록 주위에 중괄호를 지정하여 이를 수행합니다.\n파일 이름: src/main.rs\n// --snip--\nuse std::{cmp::Ordering, io};\n// --snip--\n\nListing 7-18: 동일한 접두사를 가진 여러 항목을 범위로 가져오는 중첩 경로 지정\n더 큰 프로그램에서 중첩된 경로를 사용하여 동일한 크레이트 또는 모듈에서 많은 항목을 범위로 가져오면, 필요한 별도의 use 문 수를 크게 줄일 수 있습니다!\n경로의 모든 수준에서 중첩 경로를 사용할 수 있습니다. 이는 하위 경로를 공유하는 두 개의 use 문을 결합할 때 유용합니다. 예를 들어 Listing 7-19는 두 개의 use 문을 보여줍니다. 하나는 std::io를 범위로 가져오고 다른 하나는 std::io::Write를 범위로 가져옵니다.\n파일 이름: src/lib.rs\nuse std::io;\nuse std::io::Write;\n\n목록 7-19: 하나가 다른 하나의 하위 경로인 두 개의 use 문\n이 두 경로의 공통 부분은 std::io이며 이것이 완전한 첫 번째 경로입니다. 이 두 경로를 하나의 use 문으로 병합하려면 Listing 7-20에 표시된 것처럼 중첩된 경로에서 self를 사용할 수 있습니다.\n파일 이름: src/lib.rs\nuse std::io::{self, Write};\n\n목록 7-20: 목록 7-19의 경로를 하나의 use 문으로 결합\n이 줄은 std::io 및 std::io::Write를 범위로 가져옵니다.\nGlob(*) 연산자\n경로에 정의된 모든 공용 항목을 범위로 가져오려면 해당 경로 뒤에 * glob 연산자를 지정할 수 있습니다.\nuse std::collections::*;\n\n이 use 문은 std::collections에 정의된 모든 공용 항목을 현재 범위로 가져옵니다. glob 연산자를 사용할 때 주의하십시오! Glob은 범위 내에 어떤 이름이 있고 프로그램에서 사용된 이름이 정의된 위치를 구분하기 어렵게 만들 수 있습니다.\nglob 연산자는 테스트 중인 모든 항목을 tests 모듈로 가져오기 위해 테스트할 때 자주 사용됩니다. 11장의 테스트 작성 방법 섹션 에서 이에 대해 이야기하겠습니다. glob 연산자는 때때로 prelude 패턴의 일부로 사용되기도 합니다. 해당 패턴에 대한 자세한 내용은 표준 라이브러리 문서 를 참조하십시오.\n","id":"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/","title":"Bringing Paths Into Scope with the use Keyword"},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"body":"요약\n모듈을 각각의 파일들로 분리\n지금까지 이 장의 모든 예제는 하나의 파일 안에 여러 모듈을 정의했습니다. 모듈이 커지면 해당 정의를 별도의 파일로 이동하여 코드를 더 쉽게 탐색할 수 있습니다.\nFilename: src/lib.rs\nmod front_of_house {\n    pub mod hosting {\n        pub fn add_to_waitlist() {}\n    }\n}\n\npub use crate::front_of_house::hosting;\n\npub fn eat_at_restaurant() {\n    hosting::add_to_waitlist();\n}\n\nListing 7-17: pub use을 통해, 새 범위의 모든 코드에서 사용가능한 이름 만들기\n예를 들어, 여러 식당 모듈이 있는 Listing 7-17의 코드부터 시작해 봅시다. 크레이트 루트 파일에 모든 모듈을 정의하는 대신, 모듈을 파일들로 추출겠습니다. 이 경우 크레이트 루트 파일은 src/lib.rs 이지만 이 절차는 크레이트 루트 파일이 src/main.rs 인 바이너리 크레이트에서도 작동합니다.\n먼저 front_of_house 모듈을 자체 파일로 추출합니다. front_of_house 모듈의 중괄호 안에 있는 코드를 제거하고 mod front_of_house;만 남깁니다. 그래서 src/lib.rs는 목록 7-21에 표시된 코드를 포함합니다. 목록 7-22 과 같은  src/front_of_house.rs 파일을 생성하기 전까지 컴파일은 되지 않습니다.\n파일 이름: src/lib.rs\nmod front_of_house;\n\npub use crate::front_of_house::hosting;\n\npub fn eat_at_restaurant() {\n    hosting::add_to_waitlist();\n}\n\nListing 7-21: 본문이 src/front_of_house.rs 으로 옮겨진 front_of_house 모듈 선언\n다음으로 목록 7-22에 표시된 것처럼 중괄호 안에 있던 코드를 src/front_of_house.rs 라는 새 파일에 배치합니다. 컴파일러는 front_of_house라는 이름의 크레이트 루트에서 모듈 선언을 발견했기 때문에 이 파일을 살펴봐야 한다는 것을 압니다.\n파일 이름: src/front_of_house.rs\npub mod hosting {\n    pub fn add_to_waitlist() {}\n}\n\n목록 7-22: src/front_of_house.rs 의 front_of_house 모듈 내부 정의\n모듈 트리에서 한 번만 mod 선언을 사용하여 파일을 로드하면 됩니다. 컴파일러가 파일이 프로젝트의 일부임을 알게 되면(그리고 모듈 트리에서 mod 문을 넣은 위치로 인해 코드가 상주하는 위치를 알게 되면) 프로젝트의 다른 파일은 다음을 사용하여 로드된 파일의 코드를 참조해야 합니다. 모듈 트리에서 항목을 참조하기 위한 경로 섹션 에서 설명한 대로 선언된 위치의 경로입니다. 즉, mod는 다른 프로그래밍 언어에서 볼 수 있는 include 작업이 아닙니다.\n다음으로 hosting 모듈을 자체 파일로 추출해보겠습니다. hosting은 루트 모듈이 아닌 front_of_house의 하위 모듈이기 때문에 프로세스가 약간 다릅니다. hosting을 위한 파일을 모듈 트리의 조상 이름을 따서 명명될 새 디렉토리(이 경우 src/front_of_house/ ) 에 배치합니다.\nhosting 이동을 시작하려면 hosting 모듈의 선언만 포함하도록 src/front_of_house.rs를 변경합니다.\n파일 이름: src/front_of_house.rs\npub mod hosting;\n\n그런 다음 hosting 모듈에서 만든 정의를 포함하기 위해 src/front_of_house 디렉터리와 hosting.rs 파일을 만듭니다.\n파일 이름: src/front_of_house/hosting.rs\npub fn add_to_waitlist() {}\n\n이렇게 하지 않고, hosting.rs 를 src 디렉토리 에 넣으면 컴파일러는 hosting.rs 코드가 front_of_house 모듈의 자식으로 선언되지 않고 크레이트 루트에 선언된 hosting 모듈에 있을 것으로 예상합니다. 어떤 모듈의 코드를 검사할 파일에 대한 컴파일러의 규칙은 디렉토리와 파일이 모듈 트리와 더 밀접하게 일치함을 의미합니다.\n\n파일 경로를 지정하는 다른 방법\n지금까지 Rust 컴파일러가 사용하는 가장 관용적인 파일 경로를 다루었지만 Rust는 이전 스타일의 파일 경로도 지원합니다. 크레이트 루트에 선언된 front_of_house라는 모듈의 경우 컴파일러는 다음에서 모듈의 코드를 찾습니다.\n\nsrc/front_of_house.rs (우리가 다룬 것)\nsrc/front_of_house/mod.rs (이전 스타일, 여전히 지원되는 경로)\n\nfront_of_house의 하위 모듈인 hosting이라는 모듈의 경우 컴파일러는 다음에서 모듈의 코드를 찾습니다.\n\nsrc/front_of_house/hosting.rs (우리가 다룬 것)\nsrc/front_of_house/hosting/mod.rs (이전 스타일, 계속 지원되는 경로)\n\n동일한 모듈에 대해 두 스타일을 모두 사용하면 컴파일러 오류가 발생합니다. 동일한 프로젝트의 서로 다른 모듈에 대해 두 가지 스타일을 혼합하여 사용할 수 있지만 프로젝트를 탐색하는 사람들에게 혼동을 줄 수 있습니다.\nmod.rs 라는 이름의 파일을 사용하는 스타일의 주요 단점은 프로젝트가 mod.rs 라는 이름의 많은 파일로 끝날 수 있다는 것입니다. 이는 편집기에서 파일을 동시에 열 때 혼동될 수 있습니다.\n\n각 모듈의 코드를 별도의 파일로 옮겼으며 모듈 트리는 그대로 유지됩니다. eat_at_restaurant의 함수 호출은 정의가 다른 파일에 있더라도 수정하지 않고 작동합니다. 이 기술을 사용하면 모듈의 크기가 커짐에 따라 모듈을 새 파일로 이동할 수 있습니다.\nsrc/lib.rs 의 pub use crate::front_of_house::hosting 문도 변경되지 않았으며 use는 크레이트의 일부로 컴파일되는 파일에 영향을 미치지 않습니다. mod 키워드는 모듈을 선언하고,  Rust는 해당 모듈에 들어가는 코드의 모듈과 동일한 이름을 가진 파일을 찾습니다.\n요약\nRust를 사용하면 패키지를 여러 크레이트로 분할하고, 크레이트를 모듈로 분할하여 한 모듈에 정의된 항목을 다른 모듈에서 참조할 수 있습니다. 절대 또는 상대 경로를 지정하여 이를 수행할 수 있습니다. 이러한 경로는 use 문을 사용하여 범위로 가져올 수 있으므로, 해당 범위에서 항목을 여러 번 사용하는 경우 더 짧은 경로를 사용할 수 있습니다. 모듈 코드는 기본적으로 비공개이지만 pub 키워드를 추가하여 정의를 공개할 수 있습니다.\n다음 장에서는 깔끔하게 정리된 코드에서 사용할 수 있는 표준 라이브러리의 일부 컬렉션 데이터 구조를 살펴보겠습니다.\n","id":"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/","title":"Separating Modules into Different Files"},"https://hwjskt.github.io/rust/chapter8/":{"body":"요약\n\n\n컬렉션 : 표준 라이브러리에 있는 데이터 구조들\nvector, String, hash map 이 있다.\n모두 데이터는 힙에 저장\n\n공통 컬렉션\nRust의 표준 라이브러리에는 collections 라는 매우 유용한 데이터 구조가 많이 포함되어 있습니다. 대부분의 다른 데이터 유형은 하나의 특정 값을 나타내지만, 컬렉션에는 여러 값이 포함될 수 있습니다. 기본 제공되는 배열 및 튜플 타입과 달리, 이러한 컬렉션이 가리키는 데이터는 힙에 저장됩니다. 즉, 데이터 양은 컴파일 타임에 알 필요가 없으며 프로그램 실행에 따라 늘어나거나 줄어들 수 있습니다. 컬렉션 종류마다 기능과 비용이 다르며 현재 상황에 적합한 컬렉션을 선택하는 것은 시간이 지남에 따라 발전하게 될 기술입니다. 이 장에서는 Rust 프로그램에서 매우 자주 사용되는 세 가지 모음에 대해 논의할 것입니다.\n\n\nvector를 사용하면 가변 갯수의 값을 서로 옆에 저장할 수 있습니다.\n\n\nString은 문자 모음입니다. 앞에서 String 유형에 대해 언급했지만 이 장에서는 이에 대해 자세히 설명합니다.\n\n\nhash map을 사용 하면, 값을 특정 키와 연결할 수 있습니다. map 이라고 하는, 보다 일반적인 데이터 구조의 특정 구현입니다. 파이썬의 딕셔너리와 비슷합니다.\n\n\n표준 라이브러리에서 제공하는 다른 종류의 컬렉션에 대해 알아보려면 설명서 를 참조하십시오 .\nvectors, strings 및 hash maps을 만들고 업데이트하는 방법과 각 항목을 특별하게 만드는 방법에 대해 설명합니다.\n","id":"https://hwjskt.github.io/rust/chapter8/","title":"Common Collections"},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"body":"요약\n\n\nVec 와 vector 는 같은 말이다.\n\n\n파이썬 리스트처럼 하나에 여러개의 값을 저장\n\n\n각 데이터는 메모리에서 서로 옆에 저장\n\n\n어떤 타입이든 가능하지만, 동일한 타입의 값만 저장가능\n\n\n여러 종류의 타입을 포함하고 싶으면\n\n여러타입이 포함된 enum 을 만들어 사용한다. \n(enum은 하나의 타입으로 인식되니까)\n\n\n\n백터 만들기\n\n빈 백터를 만들 때 new사용 /  type 을 적어줘야한다.\n값을 가지는 백터를 만들때는 vec! 매크로를 사용하고, type은 자동이다.\n\n\n\n백터에 내용추가 : \n\n.push 사용\n메모리 위치가 바뀌어, 미리 참조해두었던 내용이 없어진다\n\n\n\n백터의 내용 읽기\n\n[index]  : 값을 바로 얻음\n.get(index) : Option&lt;&amp;T&gt; 형태로 값을 얻음\n\n\n\n벡터 내부 값 iteration\n\n일반적인 for 문 사용가능\n참조한 벡터를 for 문이 사용중이면, for문 내부에서 벡터를 수정할수 없다\n\n\n\n벡터(Vector)를 사용하여 여러 값을 저장\n우리가 살펴볼 첫 번째 컬렉션 타입은 Vec&lt;T&gt; 이며, vector 라고도 합니다. 벡터를 사용하면 단일 데이터 구조에 둘 이상의 값을 저장할 수 있으며, 모든 값은 메모리에서 나란히 배치됩니다. 벡터는 동일한 타입의 값만 저장할 수 있습니다. 벡터는 아이템 리스트의 경우에 유용합니다: 파일의 텍스트 줄, 장바구니 안의 항목의 가격\n새 벡터 만들기\n새로운 빈 벡터를 생성하기 위해 목록 8-1에 표시된 것처럼 Vec::new 함수를 호출합니다.\n    let v: Vec&lt;i32&gt; = Vec::new();\n\n목록 8-1: i32 타입의 값을 담을 새 빈 벡터 만들기\n여기에 타입 주석을 추가했습니다. 우리가 이 벡터에 어떤 값도 삽입하지 않기 때문에 Rust는 우리가 어떤 종류의 요소를 저장하려고 하는지 알지 못합니다. 이것은 중요한 포인트입니다. 벡터는 제네릭을 사용하여 구현됩니다. 10장에서 고유한 타입으로 제네릭을 사용하는 방법을 다룰 것입니다. 지금은 표준 라이브러리에서 제공하는  Vec&lt;T&gt; 타입은 모든 타입을 가질수 있다고만 알아주세요. 특정 타입을 보유하기 위해 벡터를 만들 때 꺾쇠 괄호 안에 타입을 지정할 수 있습니다. Listing 8-1에서 Rust에게 v의 Vec&lt;T&gt;는 i32 타입의 요소를 보유합니다.\n흔히, Rust가 저장하려는 값의 타입을 추론할수 있도록  Vec&lt;T 가 초기 값을 가지면, 이 타입 주석을 적어줄 필요가 없습니다. Rust는 vec! 매크로를 편리하게 제공하며, 이 매크로는 사용자가 지정한 값을 보유하는 새 벡터를 생성합니다. . 목록 8-2는 새로운 Vec&lt;i32&gt;는 값 1, 2 및 3을 포함합니다. 정수 타입은 i32입니다. 3장의 데이터 타입](https://doc.rust-lang.org/book/ch03-02-data-types.html#data-types) 섹션 에서 논의한 것처럼 이것이 기본 정수 타입이기 때문입니다.\n    let v = vec![1, 2, 3];\n\n목록 8-2: 값을 포함하는 새 벡터 만들기\n초기 i32 값을 제공했기 때문에 Rust는 v의 타입이 Vec&lt;i32&gt;임을 추론할 수 있습니다. 타입 어노테이션은 필요하지 않습니다. 다음으로 벡터를 수정하는 방법을 살펴보겠습니다.\n벡터 업데이트\n벡터를 생성한 다음 여기에 요소를 추가하려면 Listing 8-3과 같이 push 방법을 사용할 수 있습니다.\n    let mut v = Vec::new();\n\n    v.push(5);\n    v.push(6);\n    v.push(7);\n    v.push(8);\n\nListing 8-3: push 방법을 사용하여 벡터에 값 추가\n모든 변수와 마찬가지로, 값을 변경하려면 3장에서 설명한 것처럼 mut 키워드를 사용하여 변경 가능하게 만들어야 합니다. 내부에 배치하는 숫자는 모두 i32 타입이고 Rust 데이터에서 이것을 추론하므로 Vec&lt;i32&gt; 라고 주석을 적지 않아도 됩니다.\n벡터의 요소 읽기\n벡터에 저장된 값을 참조하는 방법에는 인덱싱을 통하거나 get 메서드를 사용하는 두 가지 방법이 있습니다. 다음 예제에서는 명확성을 높이기 위해 이러한 함수에서 반환되는 값의 타입에 주석을 달았습니다.\n목록 8-4는 인덱싱 구문과 get 방법을 사용하여 벡터의 값에 액세스하는 두 가지 방법을 보여줍니다.\n    let v = vec![1, 2, 3, 4, 5];\n\n    let third: &amp;i32 = &amp;v[2];\n    println!(`The third element is {third}`);\n\n    let third: Option&lt;&amp;i32&gt; = v.get(2);\n    match third {\n        Some(third) =&gt; println!(`The third element is {third}`),\n        None =&gt; println!(`There is no third element.`),\n    }\n\n목록 8-4: 인덱싱 구문 또는 get 메서드를 사용하여 벡터의 항목에 액세스\n여기에 몇 가지 세부 사항이 있습니다. 벡터는 0부터 시작하여 숫자로 인덱싱되기 때문에 인덱스 값 2를 사용하여 세 번째 요소를 얻습니다. &amp; 및 []를 사용하면 인덱스 값에 있는 요소에 대한 참조를 제공합니다. \n인수로 전달된 인덱스와 함께 get 메서드를 사용하면 match와 함께 사용할 수 있는 Option&lt;&amp;T&gt;를 얻습니다.\nRust가 요소를 참조하는 이 두 가지 방법을 제공하는 이유는 기존 요소 범위 밖의 인덱스 값을 사용하려고 할 때 프로그램이 동작하는 방식을 선택할 수 있도록 하기 위함입니다. 예를 들어, 목록 8-5에 표시된 것처럼 5개 요소의 벡터가 있고 각 기술을 사용하여 인덱스 100의 요소에 액세스하려고 하면 어떤 일이 발생하는지 봅시다.\n    let v = vec![1, 2, 3, 4, 5];\n\n    let does_not_exist = &amp;v[100];\n    let does_not_exist = v.get(100);\n\n목록 8-5: 5개의 요소를 포함하는 벡터에서 인덱스 100의 요소에 액세스 시도\n이 코드를 실행할 때 첫 번째 [] 메서드는 존재하지 않는 요소를 참조하기 때문에 프로그램을 패닉 상태로 만듭니다. 이 방법은 벡터의 끝을 지나 요소에 액세스하려는 시도가 있는 경우 프로그램을 중단시키려는 경우에 가장 적합합니다.\nget 메서드에 벡터 외부에 있는 인덱스가 전달되면 당황하지 않고 None을 반환합니다. 벡터 범위를 벗어난 요소에 액세스하는 것이 정상적인 상황에서 가끔 발생할 수 있는 경우 이 방법을 사용합니다. 그러면 코드는 6장에서 설명한 대로 Some(&amp;element) 또는 None을 처리하는 논리를 갖게 됩니다. 예를 들어 인덱스는 사람이 숫자를 입력하는 것에서 나올 수 있습니다. 사용자가 실수로 너무 큰 숫자를 입력하여 프로그램이 None 값을 얻는 경우 사용자에게 현재 벡터에 몇 개의 항목이 있는지 알려주고 유효한 값을 입력할 수 있는 또 다른 기회를 제공할 수 있습니다. 오타로 인해 프로그램이 충돌하는 것보다 더 사용자 친화적일 것입니다!\n프로그램 안에 유효한 참조가 있는 경우, 차용 검사기(borrow checker)는 소유권 및 차용 규칙(4장에서 다룸)을 시행하여 이 참조 및 벡터 내용에 대한 다른 참조가 유효한지 확인합니다. 동일한 범위에서 가변 및 불변 참조를 가질 수 없다는 규칙을 기억하세요. 이 규칙은 벡터의 첫 번째 요소에 대한 불변 참조를 보유하고 끝에 요소를 추가하려고 시도하는 목록 8-6에 적용됩니다. 이 프로그램은 나중에 함수에서 해당 요소를 참조하려고 하면 작동하지 않습니다.\n    let mut v = vec![1, 2, 3, 4, 5];\n\n    let first = &amp;v[0];  //첫번재 요소를 참조\n\n    v.push(6);  // 마지막에 요소를 추가 -&gt; 메모리 새 공간으로 이동\n\n    println!(`The first element is: {first}`);\n\n목록 8-6: 항목에 대한 참조를 유지하면서 벡터에 요소 추가 시도\n이 코드를 컴파일하면 다음 오류가 발생합니다.\n$ cargo run\n   Compiling collections v0.1.0 (file:///projects/collections)\nerror[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n --&gt; src/main.rs:6:5\n  |\n4 |     let first = &amp;v[0];\n  |                  - immutable borrow occurs here\n5 |\n6 |     v.push(6);\n  |     ^^^^^^^^^ mutable borrow occurs here\n7 |\n8 |     println!(`The first element is: {first}`);\n  |                                      ----- immutable borrow later used here\n\nFor more information about this error, try `rustc --explain E0502`.\nerror: could not compile `collections` due to previous error\n\n목록 8-6의 코드는 제대로 작동하는 것처럼 보일 수 있습니다. 벡터의 첫 번째 요소를 참조했는데, 벡터의 마지막에서 일어난 변경 사항에 대해 왜 관심을 가져야 할까요? 이 오류는 벡터가 작동하는 방식 때문입니다. 벡터는 메모리에서 값을 서로 옆에 위치시키기 때문에, 벡터 끝에 새 요소를 추가하려면 새 메모리를 할당하고 이전 요소를 새 공간에 복사해야 할 수 있습니다. 벡터가 현재 저장된 위치에 모든 요소를 나란히 놓을 공간이 충분하지 않습니다. 이 경우 첫 번째 요소에 대한 참조는 할당 해제된 메모리를 가리킵니다. 차용 규칙은 프로그램이 그러한 상황에서 종료되는 것을 방지합니다.\n\n참고: Vec&lt;T&gt;타입의 구현 세부 사항에 대한 자세한 내용은 “The Rustonomicon” 참조 .\n\n벡터의 값에 대한 반복(iterating)\n벡터의 각 요소에 차례로 액세스하려면 인덱스를 사용하여 한 번에 하나씩 액세스하는 대신 모든 요소를 반복합니다. 목록 8-7은 벡터에 있는 i32 값의  각 요소에 대한 불변 참조를 가져오고, 인쇄하기 위해 for 루프를 사용하는 방법을 보여줍니다.\n    let v = vec![100, 32, 57];\n    for i in &amp;v {\n        println!(`{i}`);\n    }\n\n목록 8-7: for 루프를 사용하여 요소를 반복하여 벡터의 각 요소 인쇄\n모든 요소를 변경하기 위해 가변 벡터의 각 요소에 대한 가변 참조를 반복할 수도 있습니다. 목록 8-8의 for 루프는 각 요소에 50을 추가합니다.\n    let mut v = vec![100, 32, 57];\n    for i in &amp;mut v {\n        *i += 50;\n    }\n\n목록 8-8: 벡터의 요소에 대한 변경 가능한 참조에 대한 반복\n가변 참조가 참조하는 값을 변경하려면 += 연산자를 사용하기 전에 * 역참조 연산자를 사용하여 i의 값을 가져와야 합니다. 역참조 연산자에 대한 자세한 내용은 15장의 역참조 연산자를 사용하여 값에 대한 포인터 추적 섹션 에서 설명합니다.\n불변이든 가변이든 벡터를 반복하는 것은 빌림 검사기의 규칙 때문에 안전합니다. Listing 8-7 및 Listing 8-8의 for 루프 본문에서 항목을 삽입하거나 제거하려고 시도하면 Listing 8-6의 코드에서 얻은 것과 유사한 컴파일러 오류가 발생합니다. for 루프가 \"참조하고 있는 벡터\" 를 사용하고 있으면, 전체 벡터는 수정될 수 없습니다. \n열거형을 사용하여 여러 타입 저장\n벡터는 동일한 타입의 값만 저장할 수 있습니다. 이는 불편할 수 있습니다. 다양한 타입의 항목 리스트를 저장해야 하는 경우가 분명히 있습니다. 다행스럽게도 열거형(enum)의 변형들(variants)은 동일한 열거형 타입으로 정의되므로, 다른 타입의 요소를 나타내기 위해 하나의 타입이 필요할 때 열거형을 정의하고 사용할 수 있습니다!\n예를 들어 행의 일부 열에 정수, 부동 소수점 숫자 및 문자열이 포함된 스프레드시트의 행에서 값을 가져오고 싶다고 가정해 보겠습니다. 변형이 다른 값 타입을 보유할 열거형을 정의할 수 있으며 모든 열거형 변형은 동일한 타입, 즉 열거형으로 간주됩니다. 그런 다음 해당 열거형을 보유할 벡터를 생성할 수 있으므로 궁극적으로 다른 타입을 보유합니다. Listing 8-9에서 이를 증명했습니다.\n    enum SpreadsheetCell {\n        Int(i32),\n        Float(f64),\n        Text(String),\n    }\n\n    let row = vec![\n        SpreadsheetCell::Int(3),\n        SpreadsheetCell::Text(String::from(`blue`)),\n        SpreadsheetCell::Float(10.12),\n    ];\n\nListing 8-9: 하나의 벡터에 다른 타입의 값을 저장하는 enum 정의\nRust는 각 요소를 저장하는 데 필요한 힙의 메모리 양을 정확히 알기 위해 컴파일 시간에 벡터에 어떤 타입이 있는지 알아야 합니다. 또한 이 벡터에서 어떤 타입이 허용되는지 명시해야 합니다. Rust가 벡터가 어떤 타입이든 가질 수 있도록 허용했다면, 하나 이상의 타입이 벡터의 요소에 대해 수행되는 작업에서 오류를 일으킬 가능성이 있습니다. 열거형과 match 표현식을 사용한다는 것은 6장에서 논의한 것처럼 Rust가 컴파일 타임에 가능한 모든 경우를 처리한다는 것을 의미합니다.\n프로그램이 벡터에 저장하기 위해 런타임에 얻을 수 있는 전체 타입 세트를 모른다면 enum 기술이 작동하지 않습니다. 대신 17장에서 다룰 특성 개체를 사용할 수 있습니다.\n벡터를 사용하는 가장 일반적인 방법에 대해 논의했으므로, 표준라이브러리에서 Vec&lt;T&gt;에 정의된 모든 유용한 방법에 대한 API 문서를 검토하십시오. 예를 들어 push 외에도 pop 메서드는 마지막 요소를 제거하고 반환합니다.\n벡터를 삭제하면 요소가 삭제됨\n다른 구조체(struct)와 마찬가지로 벡터는 목록 8-10에 설명된 대로 범위를 벗어나면 해제됩니다.\n    {\n        let v = vec![1, 2, 3, 4];\n\n        // do stuff with v\n    } // &lt;- v goes out of scope and is freed here\n\nListing 8-10: 벡터와 해당 요소가 놓이는 위치 표시\n벡터가 삭제되면 모든 내용도 삭제됩니다. 즉, 보유하고 있는 정수가 정리됩니다. 차용 검사기는 벡터 자체가 유효한 동안에만 벡터 내용에 대한 참조가 사용되는지 확인합니다.\n다음 컬렉션 타입인 String로 이동하겠습니다!\n","id":"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/","title":"Storing Lists of Values with Vectors"},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"body":"요약\n\n\n문자열 타입(string type) 종류 (대소문자 구분해야)\n\n문자열 리터럴 string slice str : 기본 내장된 타입\nString : 외부 (표준) 라이브러리에서 제공\n\n\n\nString 만들기\n\nvector 와 다르게 type 을 적지 않는다.\n빈 String 만들 때 new사용\n값을 가지는 String 을 만들 때 문자열 리터럴을 String 으로 변환\n\n.to_string() 또는 from  사용\n가독성의 차이뿐. 동일한 기능이다\n\n\n\n\n\nString에 내용추가 : \n\n.push_str 는 여러글자 추가 / push 는 한글자만 추가\n\n원본, 추가한 내용 모두 소유권을 가져오지 않는다\n\n\n+ 연산자\n\ns1 + &amp;s2 처럼, 앞은 원본값, 뒤는 참조값으로 사용\n원본값은 사용되었으므로 사라진다\n\n\nformat!\n\nformat!(\"{s1}-{s2}-{s3}\") 이런식으로 사용\n소유권을 가져오지 않는다.\n\n\n\n\n\nString의 내용 읽기\n\n[index]  : 지원하지 않는다\n[0...4] 같은 슬라이싱은 가능, 숫자는 글자가 아니라 바이트를 의미. 슬라이싱한 바이트값이 글자를 만들지 못하면 패닉\n\n\n\nString 내부 값 iteration\n\n.chars() 또는 .bytes() 로 어떤걸 원하는지 명시한 후에\nfor 문 사용\n\n\n\nUTF-8로 인코딩된 텍스트를 String 으로 저장\n4장에서 문자열에 대해 이야기했지만 이제 더 자세히 살펴보겠습니다. 새로운 Rustacean 이 된 사람들은 일반적으로 세 가지 이유로 문자열(String)을 어려워합니다: 생길수 있는 오류를 노출하는 Rust의 성향, 생각보다 더 복잡한 데이터 구조, 그리고 UTF-8 입니다. 이러한 요소 이 합쳐지면 다른 프로그래밍 언어에서 왔을 때 이 어렵게 보일 수 있습니다.\nString은 바이트 모음으로 구현되고 해당 바이트가 텍스트로 해석될 때 유용한 기능을 제공하는 일부 메서드로 구현되기 때문에 컬렉션(collections)의 맥락에서 문자열에 대해 논의합니다. 이 섹션에서는 생성, 업데이트 및 읽기와 같은 모든 컬렉션 타입이 갖는 String에 대한 작업에 대해 설명합니다. 또한 String이 다른 컬렉션과 다른 방식, 즉 사람과 컴퓨터가 String 데이터를 해석하는 방식의 차이로 인해 String에 대한 인덱싱이 복잡해지는 방식에 대해서도 설명합니다.\nString이란 무엇입니까?\n먼저 String 이라는 용어의 의미를 정의합니다. Rust는 그 핵심 언어에 단 하나의 문자열 타입을 가지고 있는데, 이는 일반적으로 차용된 형식 &amp;str으로 볼 수 있는 문자열 슬라이스 str입니다. 4장에서 다른 곳에 저장된 일부 UTF-8 인코딩 문자열 데이터에 대한 참조인 문자열 슬라이스에 대해 이야기했습니다. 예를 들어 문자열 리터럴(String literals)은 프로그램의 바이너리에 저장되므로 문자열 조각입니다.\n핵심 언어로 코딩되지 않고 Rust의 표준 라이브러리에서 제공하는 String 타입은 확장 가능하고, 변경 가능하며, 소유되는, UTF-8 인코딩 문자열 타입입니다. Rustacean이 Rust에서 string을 언급할 때, 그들은 String 또는 문자열 슬라이스 &amp;str 타입 중 하나를 참조할 수 있습니다. 이 섹션은 주로 String에 관한 것이지만 Rust의 표준 라이브러리에서 두 가지 타입이 많이 사용되며 String과 문자열 슬라이스(string slices)는 모두 UTF-8로 인코딩됩니다.\n새 String 만들기\nVec&lt;T&gt;에서 사용할 수 있는 많은 작업는 String 에서 동일하게 사용할 수 있습니다. String은 실제로 일부 추가 보증, 제한 및 기능이 있는 바이트 벡터 주위의 래퍼로 구현되기 때문입니다. Vec&lt;T&gt;과 동일한 방식으로 작동하는 함수의 예입니다. 및 String은 목록 8-11에 표시된 것처럼 인스턴스를 생성하는 new 함수입니다.\n    let mut s = String::new();\n\n목록 8-11: 비어 있는 새 String 만들기\n이 줄은 데이터를 로드할 수 있는 s라는 새 빈 문자열을 만듭니다. 종종 문자열을 시작하려는 초기 데이터가 있습니다. 이를 위해 문자열 리터럴처럼 Display 특성을 구현하는 모든 타입에서 사용할 수 있는 to_string 메서드를 사용합니다. 목록 8-12는 두 가지 예를 보여줍니다.\n    let data = `initial contents`;\n\n    let s = data.to_string();\n\n    // the method also works on a literal directly:\n    let s = `initial contents`.to_string();\n\n목록 8-12: to_string 메서드를 사용하여 문자열 리터럴에서 String 생성\n이 코드는 initial contents을 포함하는 문자열을 생성합니다.\n문자열 리터럴에서 String을 생성하기 위해 String::from 함수를 사용할 수도 있습니다. 목록 8-13의 코드는 to_string을 사용하는 목록 8-12의 코드와 동일합니다.\n    let s = String::from(`initial contents`);\n\nListing 8-13: String::from 함수를 사용하여 문자열 리터럴에서 String 생성\n문자열은 매우 많은 용도로 사용되기 때문에 문자열에 대해 다양한 일반 API를 사용하여 많은 옵션을 제공할 수 있습니다. 그들 중 일부는 중복되는 것처럼 보일 수 있지만 모두 자리가 있습니다! 이 경우 String::from과 to_string은 동일한 작업을 수행하므로 어떤 것을 선택하느냐는 스타일과 가독성의 문제입니다.\n문자열은 UTF-8로 인코딩되어 있으므로 Listing 8-14와 같이 적절하게 인코딩된 데이터를 문자열에 포함할 수 있습니다.\n    let hello = String::from(`السلام عليكم`);\n    let hello = String::from(`Dobrý den`);\n    let hello = String::from(`Hello`);\n    let hello = String::from(`שָׁלוֹם`);\n    let hello = String::from(`नमस्ते`);\n    let hello = String::from(`こんにちは`);\n    let hello = String::from(`안녕하세요`);\n    let hello = String::from(`你好`);\n    let hello = String::from(`Olá`);\n    let hello = String::from(`Здравствуйте`);\n    let hello = String::from(`Hola`);\n\nListing 8-14: 다양한 언어로 된 인사말을 문자열에 저장하기\n이들은 모두 유효한 String 값입니다.\nString 업데이트\nString은 Vec&lt;T&gt;의 내용과 마찬가지로 크기가 커지고 내용이 변경될 수 있습니다.더 많은 데이터를 푸시하면 추가로 + 연산자 또는 format! 매크로를 사용하여 String 값을 연결할 수 있습니다.\npush_str 및 push를 사용하여 문자열에 추가\nListing 8-15와 같이 문자열 조각을 추가하기 위해 push_str 메서드를 사용하여 String을 늘릴 수 있습니다.\n    let mut s = String::from(`foo`);\n    s.push_str(`bar`);  // s = `foobar`\n\n목록 8-15: push_str 메서드를 사용하여 문자열 슬라이스를 String에 추가\n이 두 줄 뒤에 s는 foobar를 포함합니다. 매개변수의 소유권이 필요하지 않기 때문에  push_str 메서드는 문자열 슬라이스를 사용합니다. 예를 들어 Listing 8-16의 코드에서 s1에 내용을 추가한 후 s2를 사용할 수 있기를 원합니다.\n    let mut s1 = String::from(`foo`);\n    let s2 = `bar`;\n    s1.push_str(s2);\n    println!(`s2 is {s2}`);  // s1, s2 모두 사용가능\n\n목록 8-16: String에 내용을 추가한 후 문자열 슬라이스 사용\npush_str 메서드가 s2의 소유권을 가져간다면, 마지막 줄에 해당 값을 인쇄할 수 없습니다. 그러나 이 코드는 예상대로 작동합니다!\npush 방법은 단일 문자를 매개변수로 사용하여 String에 추가합니다. Listing 8-17은 push 메소드를 사용하여 문자 l을 String에 추가합니다.\n    let mut s = String::from(`lo`);\n    s.push('l');  // s = `lol`\n\n목록 8-17: push를 사용하여 문자열 값에 문자 하나 추가\n결과적으로 s에는 lol이 포함됩니다.\n+ 연산자 또는 format! 매크로\n종종 두 개의 기존 문자열을 결합하고 싶을 것입니다. 그렇게 하는 한 가지 방법은 목록 8-18에 표시된 것처럼 + 연산자를 사용하는 것입니다.\n    let s1 = String::from(\"Hello, \");\n    let s2 = String::from(\"world!\");\n    let s3 = s1 + &amp;s2; // s1 은 더이상 쓸수없다,  s2,s3 는 유지 중\n\nListing 8-18: + 연산자를 사용하여 두 개의 String 값을 새로운 String 값으로 결합\n문자열 s3에는 Hello, world!가 포함됩니다. 추가 후 s1이 더 이상 유효하지 않은 이유와 s2에 대한 참조를 사용한 이유는 + 연산자를 사용할 때 호출되는 메서드의 시그니처와 관련이 있습니다. + 연산자는 서명이 다음과 같은 추가 방법을 사용합니다.\nfn add(self, s: &amp;str) -&gt; String {    // s1 이 s3로 바뀌는 것\n\n표준 라이브러리에서 제네릭 및 관련 타입을 사용하여 정의된 add를 볼 수 있습니다. 여기서 우리는 String 값으로 이 메서드를 호출할 때 발생하는 구체적인 타입으로 대체했습니다. 10장에서 제네릭에 대해 논의할 것입니다. 이 서명은 + 연산자의 까다로운 부분을 이해하는 데 필요한 단서를 제공합니다.\n첫째, s2에는 &amp;가 있습니다. 즉, 첫 번째 문자열에 두 번째 문자열의 참조를 추가한다는 의미입니다. 이는 add 함수의 s 매개변수 때문입니다. &amp;str만 String에 추가할 수 있습니다. 두 개의 String 값을 함께 추가할 수 없습니다. 하지만 잠깐만요. &amp;s2의 타입은 add에 대한 두 번째 매개변수에 지정된 &amp;str이 아니라 &amp;String입니다. 그렇다면 Listing 8-18이 컴파일되는 이유는 무엇입니까?\nadd 호출에서 &amp;s2를 사용할 수 있는 이유는 컴파일러가 &amp;String 인수를 &amp;str로 강제 할 수 있기 때문입니다. 우리가 add 메소드를 호출할 때, Rust는 여기서 &amp;s2를 &amp;s2[..]로 바꾸는 역참조 강제를 사용합니다. 15장에서 역참조 강제에 대해 더 자세히 논의할 것입니다. add는 s 매개변수의 소유권을 가지지 않기 때문에 s2는 이 작업 후에도 여전히 유효한 String입니다.\n둘째, 서명에서 add가 self의 소유권을 갖는 것을 볼 수 있습니다. self에는 &amp;가 없기 때문입니다. 이는 Listing 8-18의 s1이 add 호출로 이동되고 그 이후에는 더 이상 유효하지 않음을 의미합니다. 따라서 let s3 = s1 + &amp;s2; 두 문자열을 모두 복사하고 새 문자열을 만드는 것처럼 보이지만 이 문은 실제로 s1의 소유권을 가져오고 s2 내용의 복사본을 추가한 다음 결과의 소유권을 반환합니다. 즉, 복사를 많이 하는 것처럼 보이지만 그렇지 않습니다. 구현은 복사보다 효율적입니다.\n여러 문자열을 연결해야 하는 경우 + 연산자의 동작이 다루기 어려워집니다.\n    let s1 = String::from(`tic`);\n    let s2 = String::from(`tac`);\n    let s3 = String::from(`toe`);\n\n    let s = s1 + `-` + &amp;s2 + `-` + &amp;s3;  //s1,s2,s3,s 모두사용가능\n\n이 시점에서 s는 tic-tac-toe가 됩니다. format! 매크로는 println!처럼 작동하지만 결과를 화면에 출력하는 대신 내용이 포함된 문자열을 반환합니다. format!을 사용하는 코드가 읽기가 훨씬 쉽고, format! 매크로는 참조를 사용하므로 호출해도 매개변수의 소유권을 갖지 않습니다.\n모든 + 및 문자를 사용하면 무슨 일이 일어나고 있는지 보기가 어렵습니다. 더 복잡한 문자열 결합을 위해 대신 format! 매크로를 사용할 수 있습니다. \n    let s1 = String::from(`tic`);\n    let s2 = String::from(`tac`);\n    let s3 = String::from(`toe`);\n\n    let s = format!(`{s1}-{s2}-{s3}`);\n\n이 코드는 또한 s를 tic-tac-toe로 설정합니다. format! 매크로는 println!처럼 작동하지만 출력을 화면에 인쇄하는 대신 내용이 포함된 String을 반환합니다. format!을 사용하는 코드 버전 훨씬 읽기 쉽고 format! 매크로는 이 호출이 해당 매개변수의 소유권을 가지지 않도록 참조를 사용합니다.\nString 내부를 인덱싱\n다른 많은 프로그래밍 언어에서 인덱스로 참조하여 문자열의 개별 문자에 액세스하는 것은 유효하고 일반적인 작업입니다. 그러나 Rust에서 인덱싱 구문을 사용하여 String의 일부에 액세스하려고 하면 오류가 발생합니다. Listing 8-19의 유효하지 않은 코드를 고려하십시오.\n    let s1 = String::from(`hello`);\n    let h = s1[0];\n\nListing 8-19: 문자열로 인덱싱 구문 사용 시도\n이 코드는 다음 오류를 발생시킵니다.\n$ cargo run\n   Compiling collections v0.1.0 (file:///projects/collections)\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\n --&gt; src/main.rs:3:13\n  |\n3 |     let h = s1[0];\n  |             ^^^^^ `String` cannot be indexed by `{integer}`\n  |\n  = help: the trait `Index&lt;{integer}&gt;` is not implemented for `String`\n  = help: the following other types implement trait `Index&lt;Idx&gt;`:\n            &lt;String as Index&lt;RangeFrom&lt;usize&gt;&gt;&gt;\n            &lt;String as Index&lt;RangeFull&gt;&gt;\n            &lt;String as Index&lt;RangeInclusive&lt;usize&gt;&gt;&gt;\n            &lt;String as Index&lt;RangeTo&lt;usize&gt;&gt;&gt;\n            &lt;String as Index&lt;RangeToInclusive&lt;usize&gt;&gt;&gt;\n            &lt;String as Index&lt;std::ops::Range&lt;usize&gt;&gt;&gt;\n\nFor more information about this error, try `rustc --explain E0277`.\nerror: could not compile `collections` due to previous error\n\n오류와 메모는 이야기를 말해줍니다. Rust 문자열은 인덱싱을 지원하지 않습니다. 왜 안될까요? 이 질문에 답하기 위해 우리는 Rust가 문자열을 메모리에 저장하는 방법을 논의할 필요가 있습니다.\n내부 대표\n문자열은 Vec&lt;u8&gt;에 대한 래퍼입니다. Listing 8-14에서 적절하게 인코딩된 UTF-8 예제 문자열 중 일부를 살펴보겠습니다. 먼저 다음과 같습니다.\n    let hello = String::from(`Hola`);\n\n이 경우 len은 4가 됩니다. 즉, 문자열 Hola를 저장하는 벡터의 길이는 4바이트입니다. 이러한 각 문자는 UTF-8로 인코딩될 때 1바이트를 사용합니다. 그러나 다음 줄은 당신을 놀라게 할 수 있습니다. (이 문자열은 아라비아 숫자 3이 아닌 대문자 키릴 문자 Ze로 시작합니다.)\n    let hello = String::from(`Здравствуйте`);\n\n문자열의 길이를 묻는 질문에 12라고 답할 수 있습니다. 사실 Rust의 대답은 24입니다. UTF-8로 Здравствуйте를 인코딩하는 데 걸리는 바이트 수입니다. 해당 문자열의 각 유니코드 스칼라 값은 2바이트의 저장 공간을 차지하기 때문입니다.  따라서 문자열의 바이트에 대한 인덱스가 항상 유효한 유니코드 스칼라 값과 상관되지는 않습니다. 시연을 위해 다음과 같은 잘못된 Rust 코드를 고려하십시오.\nlet hello = `Здравствуйте`;\nlet answer = &amp;hello[0];\n\n당신은 이미 answer이 첫 글자인 З가 아니라는 것을 알고 있습니다. UTF-8로 인코딩하면 З의 첫 번째 바이트는 208이고 두 번째 바이트는 151이므로 answer는 실제로 208이어야 하지만 208은 유효하지 않습니다.  사용자가 이 문자열의 첫 번째 문자를 요청한 경우 208을 반환하는 것은 원하는 것이 아닐 가능성이 높습니다. 그러나 208은 Rust가 바이트 인덱스 0에 있는 유일한 데이터입니다. \n사용자는 일반적으로 문자열에 라틴 문자만 포함되어 있어도 바이트 값이 반환되는 것을 원하지 않습니다. &amp;\"hello\"[0] 가 바이트 값을 반환한다면, h가 아니라 104를 반환합니다.\n그렇다면 대답은 예상치 못한 값을 반환하고 즉시 발견되지 않을 수 있는 버그를 유발하지 않기 위해 Rust가 이 코드를 전혀 컴파일하지 않고 개발 프로세스 초기에 오해를 방지한다는 것입니다.\n바이트 및 스칼라 값과 문자소 클러스터! 어머!\nUTF-8에 대한 또 다른 요점은 실제로 Rust의 관점에서 문자열을 보는 세 가지 방법이 있다는 것입니다: 바이트(bytes), 스칼라 값(scalar values) 및 문자소 클러스터(grapheme clusters)(우리가 문자라고 부르는 것에 가장 가까운 것 ) .\nDevanagari 스크립트에 쓰여진 힌디어 단어  “नमस्ते”를 보면 다음과 같이 u8 값의 벡터로 저장됩니다.\n[224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164,\n224, 165, 135]\n\n그것은 18바이트이며 컴퓨터가 궁극적으로 이 데이터를 저장하는 방법입니다. Rust의 char 타입인 유니코드 스칼라 값으로 보면 해당 바이트는 다음과 같습니다.\n['न', 'म', 'स', '्', 'त', 'े']\n\n여기에는 6개의 char 값이 있지만 네 번째와 여섯 번째는 문자가 아닙니다. 자체적으로 의미가 없는 분음 부호입니다. 마지막으로, 그것들을 문자소 클러스터로 보면 힌디어 단어를 구성하는 4개의 문자라고 부르는 것을 얻을 수 있습니다.\n[`न`, `म`, `स्`, `ते`]\n\nRust는 컴퓨터가 저장하는 원시 문자열 데이터를 해석하는 다양한 방법을 제공하므로 데이터가 어떤 인간 언어로 되어 있는지에 관계없이 각 프로그램이 필요한 해석을 선택할 수 있습니다.\nRust가 문자를 얻기 위해 String로 색인하는 것을 허용하지 않는 마지막 이유는 색인 작업이 항상 일정한 시간(O(1))이 걸릴 것으로 예상되기 때문입니다. 그러나 String로 성능을 보장하는 것은 불가능합니다. 왜냐하면 Rust는 얼마나 많은 유효한 문자가 있는지 확인하기 위해 내용을 처음부터 인덱스까지 살펴봐야 하기 때문입니다.\n문자열 슬라이싱\n문자열 인덱싱 작업의 반환 타입(바이트 값, 문자, 문자소 클러스터 또는 문자열 슬라이스)이 무엇인지 명확하지 않기 때문에 문자열로 인덱싱하는 것은 좋지 않은 생각인 경우가 많습니다. 문자열 슬라이스를 생성하기 위해 인덱스를 사용해야 한다면 Rust는 더 구체적으로 지정하도록 요청합니다.\n단일 숫자와 함께 []를 사용하여 인덱싱하는 대신 범위와 함께 []를 사용하여 특정 바이트를 포함하는 문자열 슬라이스를 만들 수 있습니다.\nlet hello = `Здравствуйте`;\n\nlet s = &amp;hello[0..4];\n\n여기서 s는 문자열의 처음 4바이트를 포함하는 &amp;str입니다. 앞서 우리는 이러한 각 문자가 2바이트이며 s가 Зд가 됨을 의미한다고 언급했습니다.\n&amp;hello[0..1]과 같은 것으로 문자 바이트의 일부만 슬라이스하려고 하면 Rust는 벡터에서 유효하지 않은 인덱스에 액세스하는 것과 같은 방식으로 런타임에 패닉을 일으킬 것입니다.\n$ cargo run\n   Compiling collections v0.1.0 (file:///projects/collections)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.43s\n     Running `target/debug/collections`\nthread 'main' panicked at 'byte index 1 is not a char boundary; it is inside 'З' (bytes 0..2) of `Здравствуйте`', src/main.rs:4:14\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n\n범위를 사용하여 스트링 슬라이스를 만들면 프로그램이 중단될 수 있으므로 주의해야 합니다.\n문자열 반복(iterate) 방법\n문자열 조각을 반복하는 가장 좋은 방법은 문자 또는 바이트 중에서 어떤걸 원하는지 명시하는 것입니다. 개별 유니코드 스칼라 값의 경우 chars 메서드를 사용합니다. Зд에서 chars를 호출하면 char 타입의 두 값을 분리하고 반환하며 결과를 반복하여 각 요소에 액세스할 수 있습니다.\nfor c in `Зд`.chars() {\n    println!(`{c}`);\n}\n\n이 코드는 다음을 인쇄합니다.\nЗ\nд\n\n또는 bytes 메서드는 도메인에 적합할 수 있는 각 원시 바이트를 반환합니다.\nfor b in `Зд`.bytes() {\n    println!(`{b}`);\n}\n\n이 코드는 이 문자열을 구성하는 4바이트를 인쇄합니다.\n208\n151\n208\n180\n\n그러나 유효한 유니코드 스칼라 값은 1바이트 이상으로 구성될 수 있음을 기억하십시오.\nDevanagari 스크립트를 사용하여 문자열에서 문자소 클러스터를 가져오는 것은 복잡하므로 이 기능은 표준 라이브러리에서 제공되지 않습니다. 필요한 기능인 경우 crates.io 에서 크레이트를 사용할 수 있습니다.\n문자열은 그렇게 간단하지 않습니다\n요약하면 문자열은 복잡합니다. 다른 프로그래밍 언어는 이러한 복잡성을 프로그래머에게 제시하는 방법에 대해 다른 선택을 합니다. Rust는 String 데이터의 올바른 처리를 모든 Rust 프로그램의 기본 동작으로 만들기로 선택했습니다. 이는 프로그래머가 UTF-8 데이터를 미리 처리하는 데 더 많은 생각을 해야 한다는 것을 의미합니다. 이러한 트레이드오프는 다른 프로그래밍 언어에서 명백한 것보다 더 많은 문자열의 복잡성을 드러내지만 개발 수명 주기 후반에 비ASCII 문자와 관련된 오류를 처리하지 않아도 됩니다.\n좋은 소식은 표준 라이브러리가 이러한 복잡한 상황을 올바르게 처리하는 데 도움이 되는 String 및 &amp;str 타입으로 구성된 많은 기능을 제공한다는 것입니다. 문자열에서 검색하기 위한 contains 및 문자열의 일부를 다른 문자열로 대체하기 위한 replace와 같은 유용한 메서드에 대한 설명서를 확인하십시오.\n조금 덜 복잡한 것으로 전환해 봅시다: hash maps!\n","id":"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/","title":"Storing UTF-8 Encoded Text with Strings"},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"body":"요약\n\n\n잘 안쓴다\n\n\n파이썬의 딕셔너리와 비슷\n\nkey ,  value 를 매칭해서 저장한다.\n내부 값에 순서가 없다.\n\n\n\n모든 key 는 같은 타입,  모든 value 는 같은 타입\n\n\n해시 맵 만들기\n\n빈 해시 맵만 만들수 있다.\nnew사용\n\n\n\n해시 맵에 내용추가 : \n\n.insert 사용\n추가한 key ,  value은 해시맵이 소유한다. (다시 사용할 수 없다)\n참조한 건 소유권이 해시맵으로 넘어가지 않는다\n\n\n\n해시 맵의 내용 수정\n\n.insert : 키,값이 없으면 새로 만들고,  키가 있으면, 값을 덮어쓴다\n.entry(key).or_insert(value) : 키가 없을 때만 키,값 추가\n\n\n\n해시 맵의 내용 읽기\n\n[index]  : 값을 바로 얻음\n.get(index) : Option&lt;&amp;T&gt; 형태로 값을 얻음\n\n\n\n해시 맵 내부 값 iteration\n\n일반적인 for 문 사용가능\n참조한 벡터를 for 문이 사용중이면, for문 내부에서 벡터를 수정할수 없다\n\n\n\n해시 맵에 연관된 값과 함께 키 저장\n공통 컬렉션의 마지막은 해시 맵(hash map) 입니다. HashMap&lt;K, V&gt; 타입은  K 타입의 키를 V 타입의 값에 매핑한 내용을 저장합니다. 이 때 해싱 함수를 사용하는데, 이것은 키와 값을 메모리에 배치하는 방법을 결정합니다.   많은 프로그래밍 언어가 이러한 종류의 데이터 구조를 지원하지만 다른 이름(예: 해시, 맵, 객체, 해시 테이블, 사전 또는 연관 배열)을 사용하는 경우가 많습니다.\n해시 맵은 벡터와 마찬가지로 인덱스를 사용하지 않고 모든 타입의 키를 사용하여 데이터를 조회하려는 경우에 유용합니다. 예를 들어 게임에서 각 키가 팀의 이름이고 값이 각 팀의 점수인 해시 맵에서 각 팀의 점수를 추적할 수 있습니다. 팀 이름이 주어지면 점수를 검색할 수 있습니다.\n이 섹션에서는 해시 맵의 기본 API를 살펴보겠지만 표준 라이브러리에서 HashMap&lt;K, V&gt;에 정의된 함수에는 더 많은 장점이 숨어 있습니다. 항상 그렇듯이 자세한 내용은 표준 라이브러리 문서를 확인하세요.\n새 해시 맵 생성\n빈 해시 맵을 만드는 한 가지 방법은 new를 사용하고 insert로 요소를 추가하는 것입니다. 목록 8-20에서 이름이 Blue 및 Yellow 인 두 팀의 점수를 추적하고 있습니다. 파란색 팀은 10점으로 시작하고 노란색 팀은 50점으로 시작합니다.\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::new();\n\n    scores.insert(String::from(`Blue`), 10);\n    scores.insert(String::from(`Yellow`), 50);\n\n목록 8-20: 새 해시 맵 생성 및 일부 키와 값 삽입\n먼저 표준 라이브러리의 컬렉션 부분에서 HashMap을 사용해야 합니다. 세 가지 공통 컬렉션 중에서 가장 적게 사용되는 컬렉션이므로 서곡에서 자동으로 범위에 포함된 기능에 포함되지 않습니다. 해시 맵도 표준 라이브러리의 지원이 적습니다. 예를 들어 이를 구성하는 내장 매크로가 없습니다.\n벡터와 마찬가지로 해시 맵은 데이터를 힙에 저장합니다. 이 HashMap에는 String 타입의 키와 i32 타입의 값이 있습니다. 벡터와 마찬가지로 해시 맵은 동질적입니다. 모든 키는 서로 같은 타입이어야 하고 모든 값은 같은 타입이어야 합니다.\n해시 맵의 값에 액세스\n목록 8-21에 표시된 것처럼 get 메서드에 키를 제공하여 해시 맵에서 값을 가져올 수 있습니다.\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::new();\n\n    scores.insert(String::from(`Blue`), 10);\n    scores.insert(String::from(`Yellow`), 50);\n\n    let team_name = String::from(`Blue`);\n    let score = scores.get(&amp;team_name).copied().unwrap_or(0);\n\n목록 8-21: 해시 맵에 저장된 Blue 팀의 점수에 액세스\n여기에서 score는 파란색 팀과 관련된 값을 가지며 결과는 10이 됩니다. get 메서드는 Option&lt;&amp;V&gt;를 반환합니다. 해시 맵에 해당 키에 대한 값이 없으면 get은 None을 반환합니다. 이 프로그램은 Option&lt;&amp;i32&gt; 대신 Option&lt;i32&gt;을 얻기 위해 copied()을 호출하여 Option을 처리합니다. unwrap_or를 사용하여 scores에 키에 대한 항목이 없는 경우 score를 0으로 설정합니다.\nfor 루프를 사용하여 벡터와 유사한 방식으로 해시 맵의 각 키/값 쌍을 반복할 수 있습니다.\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::new();\n\n    scores.insert(String::from(`Blue`), 10);\n    scores.insert(String::from(`Yellow`), 50);\n\n    for (key, value) in &amp;scores {\n        println!(`{key}: {value}`);\n    }\n\n이 코드는 임의의 순서로 각 쌍을 인쇄합니다.\nYellow: 50\nBlue: 10\n\n해시 맵 및 소유권\ni32처럼, Copy 특성을 구현하는 타입의 경우 값이 해시 맵에 복사됩니다. String과 같은 소유된 값의 경우 목록 8-22에 표시된 것처럼 값이 이동되고 해시 맵이 해당 값의 소유자가 됩니다.\n    use std::collections::HashMap;\n\n    let field_name = String::from(`Favorite color`);\n    let field_value = String::from(`Blue`);\n\n    let mut map = HashMap::new();\n    map.insert(field_name, field_value);\n    // field_name and field_value are invalid at this point, try using them and\n    // see what compiler error you get!\n\nListing 8-22: 키와 값이 삽입되면 해시 맵이 키와 값을 소유함을 보여줌\n변수 field_name 및 field_value가 insert 호출로 해시 맵으로 이동된 후에는 사용할 수 없습니다.\n값에 대한 참조를 해시 맵에 삽입하면 값이 해시 맵으로 이동되지 않습니다. 참조가 가리키는 값은 적어도 해시 맵이 유효한 동안에는 유효해야 합니다. 10장의 수명이 있는 참조 유효성 검사 섹션 에서 이러한 문제에 대해 자세히 설명합니다.\n해시 맵 업데이트\n키와 값 쌍의 수는 증가할 수 있지만 각 고유 키는 한 번에 하나의 값만 연결할 수 있습니다(반대의 경우도 마찬가지입니다. 예를 들어 파란색 팀과 노란색 팀 모두  scores해시 맵에 10 이라는 값을 가질 수 있습니다).\n해시 맵의 데이터를 변경하려면, 키에 이미 할당된 값이 있는 경우를 처리하는 방법을 결정해야 합니다. \n\n이전 값을 완전히 무시하고 이전 값을 새 값으로 바꿀 수 있습니다. \n이전 값을 유지하고 새 값을 무시하고 키에 이미 값이 없는 경우에만  새 값을 추가할 수 있습니다.\n또는 이전 값과 새 값을 결합할 수 있습니다. \n\n각 작업을 수행하는 방법을 살펴보겠습니다!\n값 덮어쓰기\n키와 값을 해시 맵에 삽입한 다음 동일한 키를 다른 값으로 삽입하면 해당 키와 연결된 값이 대체됩니다. Listing 8-23의 코드가 insert를 두 번 호출하더라도 Blue 팀의 키 값을 두 번 모두 삽입하기 때문에 해시 맵에는 하나의 키/값 쌍만 포함됩니다.\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::new();\n\n    scores.insert(String::from(`Blue`), 10);\n    scores.insert(String::from(`Blue`), 25);\n\n    println!(`{:?}`, scores);\n\nListing 8-23: 저장된 값을 특정 키로 바꾸기\n이 코드는 {Blue: 25}를 인쇄합니다. 10의 원래 값을 덮어썼습니다.\n키가 없는 경우에만 키와 값 추가\n특정 키가 값과 함께 해시 맵에 이미 존재하는지 확인한 후 다음 조치를 취하는 것이 일반적입니다. 키가 해시 맵에 존재하는 경우 기존 값은 그대로 유지되어야 합니다. 키가 없으면 키와 값을 삽입합니다.\n해시 맵에는 확인하려는 키를 매개변수로 사용하는 entry이라는 특수 API가 있습니다. entry 메서드의 반환 값은 존재하거나 존재하지 않을 수 있는 값을 나타내는 Entry라는 열거형입니다. Yellow 팀의 키에 연결된 값이 있는지 확인하고 싶다고 가정해 보겠습니다. 그렇지 않은 경우 값 50을 삽입하고 Blue 팀에도 동일하게 삽입하려고 합니다. entry API를 사용하는 코드는 Listing 8-24와 같습니다.\n    use std::collections::HashMap;\n\n    let mut scores = HashMap::new();\n    scores.insert(String::from(`Blue`), 10);\n\n    scores.entry(String::from(`Yellow`)).or_insert(50);\n    scores.entry(String::from(`Blue`)).or_insert(50);\n\n    println!(`{:?}`, scores);\n\nListing 8-24: entry 메서드를 사용하여 키에 아직 값이 없는 경우에만 삽입\nEntry의 or_insert 메소드는 해당 Entry 키가 존재하는 경우 해당 Entry 키의 값에 대한 변경 가능한 참조를 반환하고, 그렇지 않은 경우 이 키의 새 값으로 매개변수를 삽입하고 변경 가능한 참조를 반환하도록 정의됩니다. 새로운 가치에. 이 기술은 논리를 직접 작성하는 것보다 훨씬 깨끗하며, 추가로 차용 검사기와 더 잘 작동합니다.\n목록 8-24의 코드를 실행하면 {Yellow: 50, Blue: 10}가 인쇄됩니다. entry에 대한 첫 번째 호출은 노란색 팀에 이미 값이 없기 때문에 값이 50인 노란색 팀의 키를 삽입합니다. entry에 대한 두 번째 호출은 Blue 팀이 이미 값 10을 가지고 있기 때문에 해시 맵을 변경하지 않습니다.\n이전 값을 기반으로 값 업데이트\n해시 맵의 또 다른 일반적인 사용 사례는 키 값을 조회한 다음 이전 값을 기반으로 업데이트하는 것입니다. 예를 들어 Listing 8-25는 각 단어가 일부 텍스트에 나타나는 횟수를 세는 코드를 보여줍니다. 단어를 키로 사용하는 해시 맵을 사용하고 해당 단어를 본 횟수를 추적하기 위해 값을 증가시킵니다. 단어를 처음 본 경우 먼저 값 0을 삽입합니다.\n    use std::collections::HashMap;\n\n    let text = `hello world wonderful world`;\n\n    let mut map = HashMap::new();\n\n    for word in text.split_whitespace() {\n        let count = map.entry(word).or_insert(0);\n        *count += 1;\n    }\n\n    println!(`{:?}`, map);\n\nListing 8-25: 단어와 카운트를 저장하는 해시 맵을 사용하여 단어의 발생 횟수 세기\n이 코드는 {world: 2, hello: 1, wonderful: 1}을 인쇄합니다. 동일한 키/값 쌍이 다른 순서로 인쇄된 것을 볼 수 있습니다. 해시 맵에서 값 액세스 섹션에서 해시 맵을 반복하는 것이 임의의 순서로 발생한다는 것을 기억하십시오.\nsplit_whitespace 메서드는 text 값의 공백으로 구분된 하위 슬라이스에 대한 반복자를 반환합니다. or_insert 메서드는 지정된 키의 값에 대한 변경 가능한 참조(&amp;mut V)를 반환합니다. 여기에서 count 변수에 가변 참조를 저장하므로 해당 값에 할당하려면 먼저 별표(*)를 사용하여 count를 역참조해야 합니다. 변경 가능한 참조는 for 루프의 끝에서 범위를 벗어나므로 이러한 모든 변경은 안전하고 차용 규칙에 의해 허용됩니다.\n해싱 함수\n기본적으로 HashMap은 해시 테이블 1 과 관련된 서비스 거부(DoS) 공격에 대한 저항을 제공할 수 있는 SipHash 라는 해싱 기능을 사용합니다. 이것은 사용 가능한 가장 빠른 해싱 알고리즘은 아니지만 성능 저하와 함께 제공되는 더 나은 보안을 위한 트레이드 오프는 그만한 가치가 있습니다. 코드를 프로파일링하고 기본 해시 함수가 용도에 비해 너무 느린 경우 다른 해시를 지정하여 다른 함수로 전환할 수 있습니다. 해셔는 BuildHasher 특성을 구현하는 타입입니다. 우리는 10장에서 트레이트와 이를 구현하는 방법에 대해 이야기할 것입니다. 처음부터 자신의 해셔를 구현할 필요는 없습니다. crates.io에는 많은 일반적인 해싱 알고리즘을 구현하는 해셔를 제공하는 다른 Rust 사용자가 공유하는 라이브러리가 있습니다.\n\nhttps://en.wikipedia.org/wiki/SipHash\n\n요약\n벡터, 문자열 및 해시 맵은 데이터를 저장, 액세스 및 수정해야 할 때 프로그램에 필요한 많은 기능을 제공합니다. 다음은 해결하기 위해 갖추어야 할 몇 가지 연습입니다.\n\n정수 목록이 주어지면 벡터를 사용하고 목록의 중앙값(정렬할 때 중간 위치의 값)과 최빈값(가장 자주 발생하는 값, 여기에서 해시 맵이 도움이 됨)을 반환합니다.\n문자열을 돼지 라틴어로 변환합니다. 각 단어의 첫 자음이 단어의 끝으로 이동되고 “ay”가 추가되므로 “first”는 “irst-fay”가 됩니다. 모음으로 시작하는 단어는 대신 끝에 hay가 추가됩니다(apple은 apple-hay가 됨). UTF-8 인코딩에 대한 세부 사항을 명심하십시오!\n해시 맵과 벡터를 사용하여 사용자가 회사의 부서에 직원 이름을 추가할 수 있는 텍스트 인터페이스를 만듭니다. 예를 들어 엔지니어링에 Sally 추가 또는 영업에 Amir 추가가 있습니다. 그런 다음 사용자가 부서의 모든 사람 또는 부서별로 회사의 모든 사람 목록을 사전순으로 정렬하여 검색하도록 합니다.\n\n표준 라이브러리 API 문서는 이러한 연습에 도움이 될 벡터, 문자열 및 해시 맵에 있는 메서드를 설명합니다!\n작업이 실패할 수 있는 더 복잡한 프로그램에 들어가고 있으므로 오류 처리에 대해 논의하기에 완벽한 시기입니다. 다음에 그렇게 하겠습니다!\nuse std::collections::HashMap;\n\nfn main() {\n    let numbers = vec![4, 2, 8, 6, 4, 5, 3, 8, 4, 7, 2, 9, 4, 6, 1];\n\n    let median = calculate_median(&amp;numbers);\n    println!(\"Median: {}\", median);\n\n    let mode = calculate_mode(&amp;numbers);\n    println!(\"Mode: {}\", mode);\n}\n\nfn calculate_median(numbers: &amp;Vec&lt;i32&gt;) -&gt; f64 {\n    let mut sorted_numbers = numbers.clone();\n    sorted_numbers.sort();\n\n    let length = sorted_numbers.len();\n    if length % 2 == 0 {\n        let middle1 = sorted_numbers[length / 2 - 1];\n        let middle2 = sorted_numbers[length / 2];\n        return (middle1 + middle2) as f64 / 2.0;\n    } else {\n        return sorted_numbers[length / 2] as f64;\n    }\n}\n\nfn calculate_mode(numbers: &amp;Vec&lt;i32&gt;) -&gt; i32 {\n    let mut freq_map: HashMap&lt;i32, i32&gt; = HashMap::new();\n    for &amp;num in numbers {\n        *freq_map.entry(num).or_insert(0) += 1;\n    }\n\n    let mut mode = 0;\n    let mut max_freq = 0;\n\n    for (&amp;num, &amp;freq) in &amp;freq_map {\n        if freq &gt; max_freq {\n            mode = num;\n            max_freq = freq;\n        }\n    }\n\n    mode\n}\n\nfn main() {\n  \tlet input = \"Convert strings to pig latin\";\n    let words: Vec&lt;&amp;str&gt; = input.split_whitespace().collect();\n    \n    let pig_latin_words: Vec&lt;String&gt; = words\n        .iter()\n        .map(|word| convert_to_pig_latin(word))\n        .collect();\n    \n    let pig_latin_sentence = pig_latin_words.join(\" \");\n    println!(\"{}\", pig_latin_sentence);\n}\n\nfn convert_to_pig_latin(word: &amp;str) -&gt; String {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let mut chars = word.chars();\n    \n    let first_char = chars.next().unwrap();\n    \n    if vowels.contains(&amp;first_char.to_ascii_lowercase()) {\n        format!(\"{}-hay\", word)\n    } else {\n        let rest: String = chars.collect();\n        format!(\"{}-{}ay\", rest, first_char)\n    }\n}\n\nuse std::collections::{HashMap, BTreeMap};\nuse std::io::{self, Write};\n\nfn main() {\n    let mut departments: HashMap&lt;String, Vec&lt;String&gt;&gt; = HashMap::new();\n\n    loop {\n        println!(\"사용법: [부서]에 [직원 이름] 추가\");\n        print!(\"명령어 입력: \");\n        io::stdout().flush().unwrap();\n\n        let mut input = String::new();\n        io::stdin().read_line(&amp;mut input).expect(\"입력을 읽을 수 없습니다.\");\n\n        let input = input.trim();\n\n        if input == \"종료\" {\n            println!(\"프로그램을 종료합니다.\");\n            break;\n        }\n\n        let parts: Vec&lt;&amp;str&gt; = input.split_whitespace().collect();\n        if parts.len() &gt;= 4 &amp;&amp; parts[1] == \"에\" &amp;&amp; parts[2] == \"추가\" {\n            let department = parts[0];\n            let employee = parts[3];\n            departments.entry(department.to_string()).or_default().push(employee.to_string());\n            println!(\"'{}' 부서에 '{}'를 추가했습니다.\", department, employee);\n        } else {\n            println!(\"잘못된 명령어 형식입니다.\");\n        }\n    }\n\n    println!(\"부서별 직원 목록:\");\n    let mut sorted_departments: BTreeMap&lt;String, Vec&lt;String&gt;&gt; = BTreeMap::new();\n    for (department, employees) in &amp;departments {\n        let mut sorted_employees = employees.clone();\n        sorted_employees.sort();\n        sorted_departments.insert(department.clone(), sorted_employees);\n    }\n\n    for (department, employees) in &amp;sorted_departments {\n        println!(\"{} 부서:\", department);\n        for employee in employees {\n            println!(\" - {}\", employee);\n        }\n    }\n}\n\n\n","id":"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/","title":"Storing Keys with Associated Values in Hash Maps"}},"docInfo":{"https://hwjskt.github.io/":{"body":31,"title":1},"https://hwjskt.github.io/about/":{"body":12,"title":1},"https://hwjskt.github.io/docs/":{"body":0,"title":1},"https://hwjskt.github.io/docs/basic-markdown-syntax/":{"body":1244,"title":3},"https://hwjskt.github.io/docs/config-options/":{"body":254,"title":2},"https://hwjskt.github.io/docs/extended-shortcodes/":{"body":1368,"title":2},"https://hwjskt.github.io/docs/theme-extension/":{"body":96,"title":2},"https://hwjskt.github.io/docs/welcome-to-deep-thought/":{"body":180,"title":2},"https://hwjskt.github.io/posts/":{"body":0,"title":1},"https://hwjskt.github.io/posts/post-1/":{"body":158,"title":1},"https://hwjskt.github.io/posts/post-2/":{"body":130,"title":5},"https://hwjskt.github.io/rust/":{"body":151,"title":1},"https://hwjskt.github.io/rust/chapter1/":{"body":9,"title":2},"https://hwjskt.github.io/rust/chapter1/1-installation/":{"body":118,"title":1},"https://hwjskt.github.io/rust/chapter1/2-helloworld/":{"body":210,"title":2},"https://hwjskt.github.io/rust/chapter1/3-hellocargo/":{"body":364,"title":2},"https://hwjskt.github.io/rust/chapter2/":{"body":1272,"title":3},"https://hwjskt.github.io/rust/chapter3/":{"body":9,"title":3},"https://hwjskt.github.io/rust/chapter3/1-variables-and-mutability/":{"body":259,"title":2},"https://hwjskt.github.io/rust/chapter3/2-data-types/":{"body":466,"title":2},"https://hwjskt.github.io/rust/chapter3/3-functions/":{"body":446,"title":1},"https://hwjskt.github.io/rust/chapter3/4-comments/":{"body":46,"title":1},"https://hwjskt.github.io/rust/chapter3/5-control-flow/":{"body":573,"title":2},"https://hwjskt.github.io/rust/chapter4/":{"body":9,"title":2},"https://hwjskt.github.io/rust/chapter4/1-what-is-ownership/":{"body":596,"title":1},"https://hwjskt.github.io/rust/chapter4/2-references-and-borrowing/":{"body":524,"title":2},"https://hwjskt.github.io/rust/chapter4/3-the-slice-type/":{"body":388,"title":2},"https://hwjskt.github.io/rust/chapter5/":{"body":5,"title":5},"https://hwjskt.github.io/rust/chapter5/1-defining-and-instantiating-structs/":{"body":387,"title":3},"https://hwjskt.github.io/rust/chapter5/2-an-example-program-using-structs/":{"body":400,"title":4},"https://hwjskt.github.io/rust/chapter5/3-method-syntax/":{"body":378,"title":2},"https://hwjskt.github.io/rust/chapter6/":{"body":6,"title":3},"https://hwjskt.github.io/rust/chapter6/1-defining-an-enum/":{"body":402,"title":2},"https://hwjskt.github.io/rust/chapter6/2-the-match-control-flow-construct/":{"body":432,"title":4},"https://hwjskt.github.io/rust/chapter6/3-concise-control-flow-with-if-let/":{"body":90,"title":4},"https://hwjskt.github.io/rust/chapter7/":{"body":15,"title":6},"https://hwjskt.github.io/rust/chapter7/1-packages-and-crates/":{"body":75,"title":2},"https://hwjskt.github.io/rust/chapter7/2-defining-modules-to-control-scope-and-privacy/":{"body":175,"title":5},"https://hwjskt.github.io/rust/chapter7/3-paths-for-referring-to-an-item-in-the-module-tree/":{"body":479,"title":5},"https://hwjskt.github.io/rust/chapter7/4-bringing-paths-into-scope-with-the-use-keyword/":{"body":428,"title":5},"https://hwjskt.github.io/rust/chapter7/5-separating-modules-into-different-files/":{"body":117,"title":4},"https://hwjskt.github.io/rust/chapter8/":{"body":17,"title":2},"https://hwjskt.github.io/rust/chapter8/1-storing-lists-of-values-with-vectors/":{"body":309,"title":4},"https://hwjskt.github.io/rust/chapter8/2-storing-utf-8-encoded-text-with-strings/":{"body":566,"title":6},"https://hwjskt.github.io/rust/chapter8/3-storing-keys-with-associated-values-in-hash-maps/":{"body":458,"title":6}},"length":45},"lang":"English"};